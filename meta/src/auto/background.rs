// Generated by gir (https://github.com/gtk-rs/gir @ b193568)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 8e47c67)
// from mutter-gir-files
// DO NOT EDIT

use crate::Display;
use glib::object::IsA;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "MetaBackground")]
    pub struct Background(Object<ffi::MetaBackground, ffi::MetaBackgroundClass>);

    match fn {
        type_ => || ffi::meta_background_get_type(),
    }
}

impl Background {
    #[doc(alias = "meta_background_new")]
    pub fn new(display: &Display) -> Background {
        unsafe {
            from_glib_full(ffi::meta_background_new(display.to_glib_none().0))
        }
    }

    #[doc(alias = "meta_background_set_blend")]
    pub fn set_blend<P: IsA<gio::File>, Q: IsA<gio::File>>(&self, file1: &P, file2: &Q, blend_factor: f64, style: gdesktop_enums::BackgroundStyle) {
        unsafe {
            ffi::meta_background_set_blend(self.to_glib_none().0, file1.as_ref().to_glib_none().0, file2.as_ref().to_glib_none().0, blend_factor, style.into_glib());
        }
    }

    #[doc(alias = "meta_background_set_color")]
    pub fn set_color(&self, color: &mut clutter::Color) {
        unsafe {
            ffi::meta_background_set_color(self.to_glib_none().0, color.to_glib_none_mut().0);
        }
    }

    /// Set the background to `file`
    /// ## `file`
    /// a [`gio::File`][crate::gio::File] representing the background file
    /// ## `style`
    /// the background style to apply
    #[doc(alias = "meta_background_set_file")]
    pub fn set_file<P: IsA<gio::File>>(&self, file: Option<&P>, style: gdesktop_enums::BackgroundStyle) {
        unsafe {
            ffi::meta_background_set_file(self.to_glib_none().0, file.map(|p| p.as_ref()).to_glib_none().0, style.into_glib());
        }
    }

    //#[doc(alias = "meta_background_set_gradient")]
    //pub fn set_gradient(&self, shading_direction: /*Ignored*/gdesktop_enums::BackgroundShading, color: &mut clutter::Color, second_color: &mut clutter::Color) {
    //    unsafe { TODO: call ffi:meta_background_set_gradient() }
    //}

    #[doc(alias = "meta-display")]
    pub fn meta_display(&self) -> Option<Display> {
        unsafe {
            let mut value = glib::Value::from_type(<Display as StaticType>::static_type());
            glib::gobject_ffi::g_object_get_property(self.as_ptr() as *mut glib::gobject_ffi::GObject, b"meta-display\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `meta-display` getter")
        }
    }

    #[doc(alias = "meta_background_refresh_all")]
    pub fn refresh_all() {
        unsafe {
            ffi::meta_background_refresh_all();
        }
    }

    #[doc(alias = "changed")]
    pub fn connect_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn changed_trampoline<F: Fn(&Background) + 'static>(this: *mut ffi::MetaBackground, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(changed_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Background {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Background")
    }
}
