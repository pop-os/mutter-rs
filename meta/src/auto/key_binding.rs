// Generated by gir (https://github.com/gtk-rs/gir @ 5bbf6cb)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 8e47c67)
// from mutter-gir-files
// DO NOT EDIT

use glib::translate::*;

glib::wrapper! {
    #[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Hash)]
    pub struct KeyBinding(Boxed<ffi::MetaKeyBinding>);

    match fn {
        copy => |ptr| glib::gobject_ffi::g_boxed_copy(ffi::meta_key_binding_get_type(), ptr as *mut _) as *mut ffi::MetaKeyBinding,
        free => |ptr| glib::gobject_ffi::g_boxed_free(ffi::meta_key_binding_get_type(), ptr as *mut _),
        type_ => || ffi::meta_key_binding_get_type(),
    }
}

impl KeyBinding {
    #[doc(alias = "meta_key_binding_get_mask")]
    #[doc(alias = "get_mask")]
    pub fn mask(&mut self) -> u32 {
        unsafe {
            ffi::meta_key_binding_get_mask(self.to_glib_none_mut().0)
        }
    }

    //#[doc(alias = "meta_key_binding_get_modifiers")]
    //#[doc(alias = "get_modifiers")]
    //pub fn modifiers(&mut self) -> /*Ignored*/VirtualModifier {
    //    unsafe { TODO: call ffi:meta_key_binding_get_modifiers() }
    //}

    #[doc(alias = "meta_key_binding_get_name")]
    #[doc(alias = "get_name")]
    pub fn name(&mut self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::meta_key_binding_get_name(self.to_glib_none_mut().0))
        }
    }

    #[doc(alias = "meta_key_binding_is_builtin")]
    pub fn is_builtin(&mut self) -> bool {
        unsafe {
            from_glib(ffi::meta_key_binding_is_builtin(self.to_glib_none_mut().0))
        }
    }

    #[doc(alias = "meta_key_binding_is_reversed")]
    pub fn is_reversed(&mut self) -> bool {
        unsafe {
            from_glib(ffi::meta_key_binding_is_reversed(self.to_glib_none_mut().0))
        }
    }
}
