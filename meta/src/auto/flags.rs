// Generated by gir (https://github.com/gtk-rs/gir @ 45cd7bc)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 8e47c67)
// from mutter-gir-files
// DO NOT EDIT

use bitflags::bitflags;
use glib::translate::*;
use glib::value::FromValue;
use glib::value::ToValue;
use glib::StaticType;
use glib::Type;
use std::fmt;

bitflags! {
    #[doc(alias = "MetaDirection")]
    pub struct Direction: u32 {
        #[doc(alias = "META_DIRECTION_LEFT")]
        const LEFT = ffi::META_DIRECTION_LEFT as u32;
        #[doc(alias = "META_DIRECTION_RIGHT")]
        const RIGHT = ffi::META_DIRECTION_RIGHT as u32;
        #[doc(alias = "META_DIRECTION_TOP")]
        const TOP = ffi::META_DIRECTION_TOP as u32;
        #[doc(alias = "META_DIRECTION_BOTTOM")]
        const BOTTOM = ffi::META_DIRECTION_BOTTOM as u32;
        #[doc(alias = "META_DIRECTION_UP")]
        const UP = ffi::META_DIRECTION_UP as u32;
        #[doc(alias = "META_DIRECTION_DOWN")]
        const DOWN = ffi::META_DIRECTION_DOWN as u32;
        #[doc(alias = "META_DIRECTION_HORIZONTAL")]
        const HORIZONTAL = ffi::META_DIRECTION_HORIZONTAL as u32;
        #[doc(alias = "META_DIRECTION_VERTICAL")]
        const VERTICAL = ffi::META_DIRECTION_VERTICAL as u32;
    }
}

impl fmt::Display for Direction {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        <Self as fmt::Debug>::fmt(self, f)
    }
}

#[doc(hidden)]
impl IntoGlib for Direction {
    type GlibType = ffi::MetaDirection;

    fn into_glib(self) -> ffi::MetaDirection {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::MetaDirection> for Direction {
    unsafe fn from_glib(value: ffi::MetaDirection) -> Self {
        Self::from_bits_truncate(value)
    }
}

impl StaticType for Direction {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::meta_direction_get_type()) }
    }
}

impl glib::value::ValueType for Direction {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for Direction {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for Direction {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

bitflags! {
    #[doc(alias = "MetaKeyBindingFlags")]
    pub struct KeyBindingFlags: u32 {
        #[doc(alias = "META_KEY_BINDING_NONE")]
        const NONE = ffi::META_KEY_BINDING_NONE as u32;
        #[doc(alias = "META_KEY_BINDING_PER_WINDOW")]
        const PER_WINDOW = ffi::META_KEY_BINDING_PER_WINDOW as u32;
        #[doc(alias = "META_KEY_BINDING_BUILTIN")]
        const BUILTIN = ffi::META_KEY_BINDING_BUILTIN as u32;
        #[doc(alias = "META_KEY_BINDING_IS_REVERSED")]
        const IS_REVERSED = ffi::META_KEY_BINDING_IS_REVERSED as u32;
        #[doc(alias = "META_KEY_BINDING_NON_MASKABLE")]
        const NON_MASKABLE = ffi::META_KEY_BINDING_NON_MASKABLE as u32;
        #[doc(alias = "META_KEY_BINDING_IGNORE_AUTOREPEAT")]
        const IGNORE_AUTOREPEAT = ffi::META_KEY_BINDING_IGNORE_AUTOREPEAT as u32;
        #[doc(alias = "META_KEY_BINDING_NO_AUTO_GRAB")]
        const NO_AUTO_GRAB = ffi::META_KEY_BINDING_NO_AUTO_GRAB as u32;
    }
}

impl fmt::Display for KeyBindingFlags {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        <Self as fmt::Debug>::fmt(self, f)
    }
}

#[doc(hidden)]
impl IntoGlib for KeyBindingFlags {
    type GlibType = ffi::MetaKeyBindingFlags;

    fn into_glib(self) -> ffi::MetaKeyBindingFlags {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::MetaKeyBindingFlags> for KeyBindingFlags {
    unsafe fn from_glib(value: ffi::MetaKeyBindingFlags) -> Self {
        Self::from_bits_truncate(value)
    }
}

impl StaticType for KeyBindingFlags {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::meta_key_binding_flags_get_type()) }
    }
}

impl glib::value::ValueType for KeyBindingFlags {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for KeyBindingFlags {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for KeyBindingFlags {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

bitflags! {
    #[doc(alias = "MetaMaximizeFlags")]
    pub struct MaximizeFlags: u32 {
        #[doc(alias = "META_MAXIMIZE_HORIZONTAL")]
        const HORIZONTAL = ffi::META_MAXIMIZE_HORIZONTAL as u32;
        #[doc(alias = "META_MAXIMIZE_VERTICAL")]
        const VERTICAL = ffi::META_MAXIMIZE_VERTICAL as u32;
        #[doc(alias = "META_MAXIMIZE_BOTH")]
        const BOTH = ffi::META_MAXIMIZE_BOTH as u32;
    }
}

impl fmt::Display for MaximizeFlags {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        <Self as fmt::Debug>::fmt(self, f)
    }
}

#[doc(hidden)]
impl IntoGlib for MaximizeFlags {
    type GlibType = ffi::MetaMaximizeFlags;

    fn into_glib(self) -> ffi::MetaMaximizeFlags {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::MetaMaximizeFlags> for MaximizeFlags {
    unsafe fn from_glib(value: ffi::MetaMaximizeFlags) -> Self {
        Self::from_bits_truncate(value)
    }
}

impl StaticType for MaximizeFlags {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::meta_maximize_flags_get_type()) }
    }
}

impl glib::value::ValueType for MaximizeFlags {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for MaximizeFlags {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for MaximizeFlags {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

bitflags! {
    #[doc(alias = "MetaModalOptions")]
    pub struct ModalOptions: u32 {
        #[doc(alias = "META_MODAL_POINTER_ALREADY_GRABBED")]
        const POINTER_ALREADY_GRABBED = ffi::META_MODAL_POINTER_ALREADY_GRABBED as u32;
        #[doc(alias = "META_MODAL_KEYBOARD_ALREADY_GRABBED")]
        const KEYBOARD_ALREADY_GRABBED = ffi::META_MODAL_KEYBOARD_ALREADY_GRABBED as u32;
    }
}

impl fmt::Display for ModalOptions {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        <Self as fmt::Debug>::fmt(self, f)
    }
}

#[doc(hidden)]
impl IntoGlib for ModalOptions {
    type GlibType = ffi::MetaModalOptions;

    fn into_glib(self) -> ffi::MetaModalOptions {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::MetaModalOptions> for ModalOptions {
    unsafe fn from_glib(value: ffi::MetaModalOptions) -> Self {
        Self::from_bits_truncate(value)
    }
}

impl StaticType for ModalOptions {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::meta_modal_options_get_type()) }
    }
}

impl glib::value::ValueType for ModalOptions {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for ModalOptions {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for ModalOptions {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

