// Generated by gir (https://github.com/gtk-rs/gir @ b193568)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 8e47c67)
// from mutter-gir-files
// DO NOT EDIT

use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectExt;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;
use std::pin::Pin;
use std::ptr;

glib::wrapper! {
    #[doc(alias = "MetaSelectionSource")]
    pub struct SelectionSource(Object<ffi::MetaSelectionSource, ffi::MetaSelectionSourceClass>);

    match fn {
        type_ => || ffi::meta_selection_source_get_type(),
    }
}

pub const NONE_SELECTION_SOURCE: Option<&SelectionSource> = None;

/// Trait containing all [`struct@SelectionSource`] methods.
///
/// # Implementors
///
/// [`SelectionSource`][struct@crate::SelectionSource]
pub trait SelectionSourceExt: 'static {
    /// Returns the list of supported mimetypes.
    ///
    /// # Returns
    ///
    /// The supported mimetypes
    #[doc(alias = "meta_selection_source_get_mimetypes")]
    #[doc(alias = "get_mimetypes")]
    fn mimetypes(&self) -> Vec<glib::GString>;

    /// Returns [`true`] if the source is active on a selection.
    ///
    /// # Returns
    ///
    /// [`true`] if the source owns a selection.
    #[doc(alias = "meta_selection_source_is_active")]
    fn is_active(&self) -> bool;

    #[doc(alias = "meta_selection_source_read_async")]
    fn read_async<P: IsA<gio::Cancellable>, Q: FnOnce(Result<gio::InputStream, glib::Error>) + Send + 'static>(&self, mimetype: &str, cancellable: Option<&P>, callback: Q);

    
    fn read_async_future(&self, mimetype: &str) -> Pin<Box_<dyn std::future::Future<Output = Result<gio::InputStream, glib::Error>> + 'static>>;

    #[doc(alias = "activated")]
    fn connect_activated<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn emit_activated(&self);

    #[doc(alias = "deactivated")]
    fn connect_deactivated<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    fn emit_deactivated(&self);
}

impl<O: IsA<SelectionSource>> SelectionSourceExt for O {
    fn mimetypes(&self) -> Vec<glib::GString> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::meta_selection_source_get_mimetypes(self.as_ref().to_glib_none().0))
        }
    }

    fn is_active(&self) -> bool {
        unsafe {
            from_glib(ffi::meta_selection_source_is_active(self.as_ref().to_glib_none().0))
        }
    }

    fn read_async<P: IsA<gio::Cancellable>, Q: FnOnce(Result<gio::InputStream, glib::Error>) + Send + 'static>(&self, mimetype: &str, cancellable: Option<&P>, callback: Q) {
        let user_data: Box_<Q> = Box_::new(callback);
        unsafe extern "C" fn read_async_trampoline<Q: FnOnce(Result<gio::InputStream, glib::Error>) + Send + 'static>(_source_object: *mut glib::gobject_ffi::GObject, res: *mut gio::ffi::GAsyncResult, user_data: glib::ffi::gpointer) {
            let mut error = ptr::null_mut();
            let ret = ffi::meta_selection_source_read_finish(_source_object as *mut _, res, &mut error);
            let result = if error.is_null() { Ok(from_glib_full(ret)) } else { Err(from_glib_full(error)) };
            let callback: Box_<Q> = Box_::from_raw(user_data as *mut _);
            callback(result);
        }
        let callback = read_async_trampoline::<Q>;
        unsafe {
            ffi::meta_selection_source_read_async(self.as_ref().to_glib_none().0, mimetype.to_glib_none().0, cancellable.map(|p| p.as_ref()).to_glib_none().0, Some(callback), Box_::into_raw(user_data) as *mut _);
        }
    }

    
    fn read_async_future(&self, mimetype: &str) -> Pin<Box_<dyn std::future::Future<Output = Result<gio::InputStream, glib::Error>> + 'static>> {

        let mimetype = String::from(mimetype);
        Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
            obj.read_async(
                &mimetype,
                Some(cancellable),
                move |res| {
                    send.resolve(res);
                },
            );
        }))
    }

    fn connect_activated<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn activated_trampoline<P: IsA<SelectionSource>, F: Fn(&P) + 'static>(this: *mut ffi::MetaSelectionSource, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(SelectionSource::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"activated\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(activated_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn emit_activated(&self) {
        let _ = unsafe { glib::Object::from_glib_borrow(self.as_ptr() as *mut glib::gobject_ffi::GObject).emit_by_name("activated", &[]).unwrap() };
    }

    fn connect_deactivated<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn deactivated_trampoline<P: IsA<SelectionSource>, F: Fn(&P) + 'static>(this: *mut ffi::MetaSelectionSource, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(SelectionSource::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"deactivated\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(deactivated_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn emit_deactivated(&self) {
        let _ = unsafe { glib::Object::from_glib_borrow(self.as_ptr() as *mut glib::gobject_ffi::GObject).emit_by_name("deactivated", &[]).unwrap() };
    }
}

impl fmt::Display for SelectionSource {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("SelectionSource")
    }
}
