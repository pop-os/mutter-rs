// Generated by gir (https://github.com/gtk-rs/gir @ 5bbf6cb)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 8e47c67)
// from mutter-gir-files
// DO NOT EDIT

use glib::translate::*;
use glib::value::FromValue;
use glib::value::ToValue;
use glib::StaticType;
use glib::Type;
use std::fmt;

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "MetaCursor")]
pub enum Cursor {
    #[doc(alias = "META_CURSOR_NONE")]
    None,
    #[doc(alias = "META_CURSOR_DEFAULT")]
    Default,
    #[doc(alias = "META_CURSOR_NORTH_RESIZE")]
    NorthResize,
    #[doc(alias = "META_CURSOR_SOUTH_RESIZE")]
    SouthResize,
    #[doc(alias = "META_CURSOR_WEST_RESIZE")]
    WestResize,
    #[doc(alias = "META_CURSOR_EAST_RESIZE")]
    EastResize,
    #[doc(alias = "META_CURSOR_SE_RESIZE")]
    SeResize,
    #[doc(alias = "META_CURSOR_SW_RESIZE")]
    SwResize,
    #[doc(alias = "META_CURSOR_NE_RESIZE")]
    NeResize,
    #[doc(alias = "META_CURSOR_NW_RESIZE")]
    NwResize,
    #[doc(alias = "META_CURSOR_MOVE_OR_RESIZE_WINDOW")]
    MoveOrResizeWindow,
    #[doc(alias = "META_CURSOR_BUSY")]
    Busy,
    #[doc(alias = "META_CURSOR_DND_IN_DRAG")]
    DndInDrag,
    #[doc(alias = "META_CURSOR_DND_MOVE")]
    DndMove,
    #[doc(alias = "META_CURSOR_DND_COPY")]
    DndCopy,
    #[doc(alias = "META_CURSOR_DND_UNSUPPORTED_TARGET")]
    DndUnsupportedTarget,
    #[doc(alias = "META_CURSOR_POINTING_HAND")]
    PointingHand,
    #[doc(alias = "META_CURSOR_CROSSHAIR")]
    Crosshair,
    #[doc(alias = "META_CURSOR_IBEAM")]
    Ibeam,
    #[doc(alias = "META_CURSOR_BLANK")]
    Blank,
    #[doc(alias = "META_CURSOR_LAST")]
    Last,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for Cursor {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Cursor::{}", match *self {
            Self::None => "None",
            Self::Default => "Default",
            Self::NorthResize => "NorthResize",
            Self::SouthResize => "SouthResize",
            Self::WestResize => "WestResize",
            Self::EastResize => "EastResize",
            Self::SeResize => "SeResize",
            Self::SwResize => "SwResize",
            Self::NeResize => "NeResize",
            Self::NwResize => "NwResize",
            Self::MoveOrResizeWindow => "MoveOrResizeWindow",
            Self::Busy => "Busy",
            Self::DndInDrag => "DndInDrag",
            Self::DndMove => "DndMove",
            Self::DndCopy => "DndCopy",
            Self::DndUnsupportedTarget => "DndUnsupportedTarget",
            Self::PointingHand => "PointingHand",
            Self::Crosshair => "Crosshair",
            Self::Ibeam => "Ibeam",
            Self::Blank => "Blank",
            Self::Last => "Last",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl IntoGlib for Cursor {
    type GlibType = ffi::MetaCursor;

    fn into_glib(self) -> ffi::MetaCursor {
        match self {
            Self::None => ffi::META_CURSOR_NONE,
            Self::Default => ffi::META_CURSOR_DEFAULT,
            Self::NorthResize => ffi::META_CURSOR_NORTH_RESIZE,
            Self::SouthResize => ffi::META_CURSOR_SOUTH_RESIZE,
            Self::WestResize => ffi::META_CURSOR_WEST_RESIZE,
            Self::EastResize => ffi::META_CURSOR_EAST_RESIZE,
            Self::SeResize => ffi::META_CURSOR_SE_RESIZE,
            Self::SwResize => ffi::META_CURSOR_SW_RESIZE,
            Self::NeResize => ffi::META_CURSOR_NE_RESIZE,
            Self::NwResize => ffi::META_CURSOR_NW_RESIZE,
            Self::MoveOrResizeWindow => ffi::META_CURSOR_MOVE_OR_RESIZE_WINDOW,
            Self::Busy => ffi::META_CURSOR_BUSY,
            Self::DndInDrag => ffi::META_CURSOR_DND_IN_DRAG,
            Self::DndMove => ffi::META_CURSOR_DND_MOVE,
            Self::DndCopy => ffi::META_CURSOR_DND_COPY,
            Self::DndUnsupportedTarget => ffi::META_CURSOR_DND_UNSUPPORTED_TARGET,
            Self::PointingHand => ffi::META_CURSOR_POINTING_HAND,
            Self::Crosshair => ffi::META_CURSOR_CROSSHAIR,
            Self::Ibeam => ffi::META_CURSOR_IBEAM,
            Self::Blank => ffi::META_CURSOR_BLANK,
            Self::Last => ffi::META_CURSOR_LAST,
            Self::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::MetaCursor> for Cursor {
    unsafe fn from_glib(value: ffi::MetaCursor) -> Self {
        match value {
            ffi::META_CURSOR_NONE => Self::None,
            ffi::META_CURSOR_DEFAULT => Self::Default,
            ffi::META_CURSOR_NORTH_RESIZE => Self::NorthResize,
            ffi::META_CURSOR_SOUTH_RESIZE => Self::SouthResize,
            ffi::META_CURSOR_WEST_RESIZE => Self::WestResize,
            ffi::META_CURSOR_EAST_RESIZE => Self::EastResize,
            ffi::META_CURSOR_SE_RESIZE => Self::SeResize,
            ffi::META_CURSOR_SW_RESIZE => Self::SwResize,
            ffi::META_CURSOR_NE_RESIZE => Self::NeResize,
            ffi::META_CURSOR_NW_RESIZE => Self::NwResize,
            ffi::META_CURSOR_MOVE_OR_RESIZE_WINDOW => Self::MoveOrResizeWindow,
            ffi::META_CURSOR_BUSY => Self::Busy,
            ffi::META_CURSOR_DND_IN_DRAG => Self::DndInDrag,
            ffi::META_CURSOR_DND_MOVE => Self::DndMove,
            ffi::META_CURSOR_DND_COPY => Self::DndCopy,
            ffi::META_CURSOR_DND_UNSUPPORTED_TARGET => Self::DndUnsupportedTarget,
            ffi::META_CURSOR_POINTING_HAND => Self::PointingHand,
            ffi::META_CURSOR_CROSSHAIR => Self::Crosshair,
            ffi::META_CURSOR_IBEAM => Self::Ibeam,
            ffi::META_CURSOR_BLANK => Self::Blank,
            ffi::META_CURSOR_LAST => Self::Last,
            value => Self::__Unknown(value),
}
    }
}

impl StaticType for Cursor {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::meta_cursor_get_type()) }
    }
}

impl glib::value::ValueType for Cursor {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for Cursor {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for Cursor {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "MetaDisplayCorner")]
pub enum DisplayCorner {
    #[doc(alias = "META_DISPLAY_TOPLEFT")]
    Topleft,
    #[doc(alias = "META_DISPLAY_TOPRIGHT")]
    Topright,
    #[doc(alias = "META_DISPLAY_BOTTOMLEFT")]
    Bottomleft,
    #[doc(alias = "META_DISPLAY_BOTTOMRIGHT")]
    Bottomright,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for DisplayCorner {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "DisplayCorner::{}", match *self {
            Self::Topleft => "Topleft",
            Self::Topright => "Topright",
            Self::Bottomleft => "Bottomleft",
            Self::Bottomright => "Bottomright",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl IntoGlib for DisplayCorner {
    type GlibType = ffi::MetaDisplayCorner;

    fn into_glib(self) -> ffi::MetaDisplayCorner {
        match self {
            Self::Topleft => ffi::META_DISPLAY_TOPLEFT,
            Self::Topright => ffi::META_DISPLAY_TOPRIGHT,
            Self::Bottomleft => ffi::META_DISPLAY_BOTTOMLEFT,
            Self::Bottomright => ffi::META_DISPLAY_BOTTOMRIGHT,
            Self::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::MetaDisplayCorner> for DisplayCorner {
    unsafe fn from_glib(value: ffi::MetaDisplayCorner) -> Self {
        match value {
            ffi::META_DISPLAY_TOPLEFT => Self::Topleft,
            ffi::META_DISPLAY_TOPRIGHT => Self::Topright,
            ffi::META_DISPLAY_BOTTOMLEFT => Self::Bottomleft,
            ffi::META_DISPLAY_BOTTOMRIGHT => Self::Bottomright,
            value => Self::__Unknown(value),
}
    }
}

impl StaticType for DisplayCorner {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::meta_display_corner_get_type()) }
    }
}

impl glib::value::ValueType for DisplayCorner {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for DisplayCorner {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for DisplayCorner {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "MetaDisplayDirection")]
pub enum DisplayDirection {
    #[doc(alias = "META_DISPLAY_UP")]
    Up,
    #[doc(alias = "META_DISPLAY_DOWN")]
    Down,
    #[doc(alias = "META_DISPLAY_LEFT")]
    Left,
    #[doc(alias = "META_DISPLAY_RIGHT")]
    Right,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for DisplayDirection {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "DisplayDirection::{}", match *self {
            Self::Up => "Up",
            Self::Down => "Down",
            Self::Left => "Left",
            Self::Right => "Right",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl IntoGlib for DisplayDirection {
    type GlibType = ffi::MetaDisplayDirection;

    fn into_glib(self) -> ffi::MetaDisplayDirection {
        match self {
            Self::Up => ffi::META_DISPLAY_UP,
            Self::Down => ffi::META_DISPLAY_DOWN,
            Self::Left => ffi::META_DISPLAY_LEFT,
            Self::Right => ffi::META_DISPLAY_RIGHT,
            Self::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::MetaDisplayDirection> for DisplayDirection {
    unsafe fn from_glib(value: ffi::MetaDisplayDirection) -> Self {
        match value {
            ffi::META_DISPLAY_UP => Self::Up,
            ffi::META_DISPLAY_DOWN => Self::Down,
            ffi::META_DISPLAY_LEFT => Self::Left,
            ffi::META_DISPLAY_RIGHT => Self::Right,
            value => Self::__Unknown(value),
}
    }
}

impl StaticType for DisplayDirection {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::meta_display_direction_get_type()) }
    }
}

impl glib::value::ValueType for DisplayDirection {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for DisplayDirection {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for DisplayDirection {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "MetaFrameType")]
pub enum FrameType {
    #[doc(alias = "META_FRAME_TYPE_NORMAL")]
    Normal,
    #[doc(alias = "META_FRAME_TYPE_DIALOG")]
    Dialog,
    #[doc(alias = "META_FRAME_TYPE_MODAL_DIALOG")]
    ModalDialog,
    #[doc(alias = "META_FRAME_TYPE_UTILITY")]
    Utility,
    #[doc(alias = "META_FRAME_TYPE_MENU")]
    Menu,
    #[doc(alias = "META_FRAME_TYPE_BORDER")]
    Border,
    #[doc(alias = "META_FRAME_TYPE_ATTACHED")]
    Attached,
    #[doc(alias = "META_FRAME_TYPE_LAST")]
    Last,
#[doc(hidden)]
    __Unknown(i32),
}

impl FrameType {
    #[doc(alias = "meta_frame_type_to_string")]
    #[doc(alias = "to_string")]
    pub fn to_str(self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::meta_frame_type_to_string(self.into_glib()))
        }
    }
}

impl fmt::Display for FrameType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "FrameType::{}", match *self {
            Self::Normal => "Normal",
            Self::Dialog => "Dialog",
            Self::ModalDialog => "ModalDialog",
            Self::Utility => "Utility",
            Self::Menu => "Menu",
            Self::Border => "Border",
            Self::Attached => "Attached",
            Self::Last => "Last",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl IntoGlib for FrameType {
    type GlibType = ffi::MetaFrameType;

    fn into_glib(self) -> ffi::MetaFrameType {
        match self {
            Self::Normal => ffi::META_FRAME_TYPE_NORMAL,
            Self::Dialog => ffi::META_FRAME_TYPE_DIALOG,
            Self::ModalDialog => ffi::META_FRAME_TYPE_MODAL_DIALOG,
            Self::Utility => ffi::META_FRAME_TYPE_UTILITY,
            Self::Menu => ffi::META_FRAME_TYPE_MENU,
            Self::Border => ffi::META_FRAME_TYPE_BORDER,
            Self::Attached => ffi::META_FRAME_TYPE_ATTACHED,
            Self::Last => ffi::META_FRAME_TYPE_LAST,
            Self::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::MetaFrameType> for FrameType {
    unsafe fn from_glib(value: ffi::MetaFrameType) -> Self {
        match value {
            ffi::META_FRAME_TYPE_NORMAL => Self::Normal,
            ffi::META_FRAME_TYPE_DIALOG => Self::Dialog,
            ffi::META_FRAME_TYPE_MODAL_DIALOG => Self::ModalDialog,
            ffi::META_FRAME_TYPE_UTILITY => Self::Utility,
            ffi::META_FRAME_TYPE_MENU => Self::Menu,
            ffi::META_FRAME_TYPE_BORDER => Self::Border,
            ffi::META_FRAME_TYPE_ATTACHED => Self::Attached,
            ffi::META_FRAME_TYPE_LAST => Self::Last,
            value => Self::__Unknown(value),
}
    }
}

impl StaticType for FrameType {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::meta_frame_type_get_type()) }
    }
}

impl glib::value::ValueType for FrameType {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for FrameType {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for FrameType {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "MetaGrabOp")]
pub enum GrabOp {
    #[doc(alias = "META_GRAB_OP_NONE")]
    None,
    #[doc(alias = "META_GRAB_OP_WINDOW_BASE")]
    WindowBase,
    #[doc(alias = "META_GRAB_OP_COMPOSITOR")]
    Compositor,
    #[doc(alias = "META_GRAB_OP_WAYLAND_POPUP")]
    WaylandPopup,
    #[doc(alias = "META_GRAB_OP_FRAME_BUTTON")]
    FrameButton,
    #[doc(alias = "META_GRAB_OP_RESIZING_NW")]
    ResizingNw,
    #[doc(alias = "META_GRAB_OP_RESIZING_N")]
    ResizingN,
    #[doc(alias = "META_GRAB_OP_RESIZING_NE")]
    ResizingNe,
    #[doc(alias = "META_GRAB_OP_RESIZING_E")]
    ResizingE,
    #[doc(alias = "META_GRAB_OP_RESIZING_SW")]
    ResizingSw,
    #[doc(alias = "META_GRAB_OP_RESIZING_S")]
    ResizingS,
    #[doc(alias = "META_GRAB_OP_RESIZING_SE")]
    ResizingSe,
    #[doc(alias = "META_GRAB_OP_RESIZING_W")]
    ResizingW,
    #[doc(alias = "META_GRAB_OP_KEYBOARD_MOVING")]
    KeyboardMoving,
    #[doc(alias = "META_GRAB_OP_KEYBOARD_RESIZING_UNKNOWN")]
    KeyboardResizingUnknown,
    #[doc(alias = "META_GRAB_OP_KEYBOARD_RESIZING_NW")]
    KeyboardResizingNw,
    #[doc(alias = "META_GRAB_OP_KEYBOARD_RESIZING_N")]
    KeyboardResizingN,
    #[doc(alias = "META_GRAB_OP_KEYBOARD_RESIZING_NE")]
    KeyboardResizingNe,
    #[doc(alias = "META_GRAB_OP_KEYBOARD_RESIZING_E")]
    KeyboardResizingE,
    #[doc(alias = "META_GRAB_OP_KEYBOARD_RESIZING_SW")]
    KeyboardResizingSw,
    #[doc(alias = "META_GRAB_OP_KEYBOARD_RESIZING_S")]
    KeyboardResizingS,
    #[doc(alias = "META_GRAB_OP_KEYBOARD_RESIZING_SE")]
    KeyboardResizingSe,
    #[doc(alias = "META_GRAB_OP_KEYBOARD_RESIZING_W")]
    KeyboardResizingW,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for GrabOp {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "GrabOp::{}", match *self {
            Self::None => "None",
            Self::WindowBase => "WindowBase",
            Self::Compositor => "Compositor",
            Self::WaylandPopup => "WaylandPopup",
            Self::FrameButton => "FrameButton",
            Self::ResizingNw => "ResizingNw",
            Self::ResizingN => "ResizingN",
            Self::ResizingNe => "ResizingNe",
            Self::ResizingE => "ResizingE",
            Self::ResizingSw => "ResizingSw",
            Self::ResizingS => "ResizingS",
            Self::ResizingSe => "ResizingSe",
            Self::ResizingW => "ResizingW",
            Self::KeyboardMoving => "KeyboardMoving",
            Self::KeyboardResizingUnknown => "KeyboardResizingUnknown",
            Self::KeyboardResizingNw => "KeyboardResizingNw",
            Self::KeyboardResizingN => "KeyboardResizingN",
            Self::KeyboardResizingNe => "KeyboardResizingNe",
            Self::KeyboardResizingE => "KeyboardResizingE",
            Self::KeyboardResizingSw => "KeyboardResizingSw",
            Self::KeyboardResizingS => "KeyboardResizingS",
            Self::KeyboardResizingSe => "KeyboardResizingSe",
            Self::KeyboardResizingW => "KeyboardResizingW",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl IntoGlib for GrabOp {
    type GlibType = ffi::MetaGrabOp;

    fn into_glib(self) -> ffi::MetaGrabOp {
        match self {
            Self::None => ffi::META_GRAB_OP_NONE,
            Self::WindowBase => ffi::META_GRAB_OP_WINDOW_BASE,
            Self::Compositor => ffi::META_GRAB_OP_COMPOSITOR,
            Self::WaylandPopup => ffi::META_GRAB_OP_WAYLAND_POPUP,
            Self::FrameButton => ffi::META_GRAB_OP_FRAME_BUTTON,
            Self::ResizingNw => ffi::META_GRAB_OP_RESIZING_NW,
            Self::ResizingN => ffi::META_GRAB_OP_RESIZING_N,
            Self::ResizingNe => ffi::META_GRAB_OP_RESIZING_NE,
            Self::ResizingE => ffi::META_GRAB_OP_RESIZING_E,
            Self::ResizingSw => ffi::META_GRAB_OP_RESIZING_SW,
            Self::ResizingS => ffi::META_GRAB_OP_RESIZING_S,
            Self::ResizingSe => ffi::META_GRAB_OP_RESIZING_SE,
            Self::ResizingW => ffi::META_GRAB_OP_RESIZING_W,
            Self::KeyboardMoving => ffi::META_GRAB_OP_KEYBOARD_MOVING,
            Self::KeyboardResizingUnknown => ffi::META_GRAB_OP_KEYBOARD_RESIZING_UNKNOWN,
            Self::KeyboardResizingNw => ffi::META_GRAB_OP_KEYBOARD_RESIZING_NW,
            Self::KeyboardResizingN => ffi::META_GRAB_OP_KEYBOARD_RESIZING_N,
            Self::KeyboardResizingNe => ffi::META_GRAB_OP_KEYBOARD_RESIZING_NE,
            Self::KeyboardResizingE => ffi::META_GRAB_OP_KEYBOARD_RESIZING_E,
            Self::KeyboardResizingSw => ffi::META_GRAB_OP_KEYBOARD_RESIZING_SW,
            Self::KeyboardResizingS => ffi::META_GRAB_OP_KEYBOARD_RESIZING_S,
            Self::KeyboardResizingSe => ffi::META_GRAB_OP_KEYBOARD_RESIZING_SE,
            Self::KeyboardResizingW => ffi::META_GRAB_OP_KEYBOARD_RESIZING_W,
            Self::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::MetaGrabOp> for GrabOp {
    unsafe fn from_glib(value: ffi::MetaGrabOp) -> Self {
        match value {
            ffi::META_GRAB_OP_NONE => Self::None,
            ffi::META_GRAB_OP_WINDOW_BASE => Self::WindowBase,
            ffi::META_GRAB_OP_COMPOSITOR => Self::Compositor,
            ffi::META_GRAB_OP_WAYLAND_POPUP => Self::WaylandPopup,
            ffi::META_GRAB_OP_FRAME_BUTTON => Self::FrameButton,
            ffi::META_GRAB_OP_RESIZING_NW => Self::ResizingNw,
            ffi::META_GRAB_OP_RESIZING_N => Self::ResizingN,
            ffi::META_GRAB_OP_RESIZING_NE => Self::ResizingNe,
            ffi::META_GRAB_OP_RESIZING_E => Self::ResizingE,
            ffi::META_GRAB_OP_RESIZING_SW => Self::ResizingSw,
            ffi::META_GRAB_OP_RESIZING_S => Self::ResizingS,
            ffi::META_GRAB_OP_RESIZING_SE => Self::ResizingSe,
            ffi::META_GRAB_OP_RESIZING_W => Self::ResizingW,
            ffi::META_GRAB_OP_KEYBOARD_MOVING => Self::KeyboardMoving,
            ffi::META_GRAB_OP_KEYBOARD_RESIZING_UNKNOWN => Self::KeyboardResizingUnknown,
            ffi::META_GRAB_OP_KEYBOARD_RESIZING_NW => Self::KeyboardResizingNw,
            ffi::META_GRAB_OP_KEYBOARD_RESIZING_N => Self::KeyboardResizingN,
            ffi::META_GRAB_OP_KEYBOARD_RESIZING_NE => Self::KeyboardResizingNe,
            ffi::META_GRAB_OP_KEYBOARD_RESIZING_E => Self::KeyboardResizingE,
            ffi::META_GRAB_OP_KEYBOARD_RESIZING_SW => Self::KeyboardResizingSw,
            ffi::META_GRAB_OP_KEYBOARD_RESIZING_S => Self::KeyboardResizingS,
            ffi::META_GRAB_OP_KEYBOARD_RESIZING_SE => Self::KeyboardResizingSe,
            ffi::META_GRAB_OP_KEYBOARD_RESIZING_W => Self::KeyboardResizingW,
            value => Self::__Unknown(value),
}
    }
}

impl StaticType for GrabOp {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::meta_grab_op_get_type()) }
    }
}

impl glib::value::ValueType for GrabOp {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for GrabOp {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for GrabOp {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "MetaMotionDirection")]
pub enum MotionDirection {
    #[doc(alias = "META_MOTION_UP")]
    Up,
    #[doc(alias = "META_MOTION_DOWN")]
    Down,
    #[doc(alias = "META_MOTION_LEFT")]
    Left,
    #[doc(alias = "META_MOTION_RIGHT")]
    Right,
    #[doc(alias = "META_MOTION_UP_LEFT")]
    UpLeft,
    #[doc(alias = "META_MOTION_UP_RIGHT")]
    UpRight,
    #[doc(alias = "META_MOTION_DOWN_LEFT")]
    DownLeft,
    #[doc(alias = "META_MOTION_DOWN_RIGHT")]
    DownRight,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for MotionDirection {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "MotionDirection::{}", match *self {
            Self::Up => "Up",
            Self::Down => "Down",
            Self::Left => "Left",
            Self::Right => "Right",
            Self::UpLeft => "UpLeft",
            Self::UpRight => "UpRight",
            Self::DownLeft => "DownLeft",
            Self::DownRight => "DownRight",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl IntoGlib for MotionDirection {
    type GlibType = ffi::MetaMotionDirection;

    fn into_glib(self) -> ffi::MetaMotionDirection {
        match self {
            Self::Up => ffi::META_MOTION_UP,
            Self::Down => ffi::META_MOTION_DOWN,
            Self::Left => ffi::META_MOTION_LEFT,
            Self::Right => ffi::META_MOTION_RIGHT,
            Self::UpLeft => ffi::META_MOTION_UP_LEFT,
            Self::UpRight => ffi::META_MOTION_UP_RIGHT,
            Self::DownLeft => ffi::META_MOTION_DOWN_LEFT,
            Self::DownRight => ffi::META_MOTION_DOWN_RIGHT,
            Self::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::MetaMotionDirection> for MotionDirection {
    unsafe fn from_glib(value: ffi::MetaMotionDirection) -> Self {
        match value {
            ffi::META_MOTION_UP => Self::Up,
            ffi::META_MOTION_DOWN => Self::Down,
            ffi::META_MOTION_LEFT => Self::Left,
            ffi::META_MOTION_RIGHT => Self::Right,
            ffi::META_MOTION_UP_LEFT => Self::UpLeft,
            ffi::META_MOTION_UP_RIGHT => Self::UpRight,
            ffi::META_MOTION_DOWN_LEFT => Self::DownLeft,
            ffi::META_MOTION_DOWN_RIGHT => Self::DownRight,
            value => Self::__Unknown(value),
}
    }
}

impl StaticType for MotionDirection {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::meta_motion_direction_get_type()) }
    }
}

impl glib::value::ValueType for MotionDirection {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for MotionDirection {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for MotionDirection {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "MetaPadActionType")]
pub enum PadActionType {
    #[doc(alias = "META_PAD_ACTION_BUTTON")]
    Button,
    #[doc(alias = "META_PAD_ACTION_RING")]
    Ring,
    #[doc(alias = "META_PAD_ACTION_STRIP")]
    Strip,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for PadActionType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "PadActionType::{}", match *self {
            Self::Button => "Button",
            Self::Ring => "Ring",
            Self::Strip => "Strip",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl IntoGlib for PadActionType {
    type GlibType = ffi::MetaPadActionType;

    fn into_glib(self) -> ffi::MetaPadActionType {
        match self {
            Self::Button => ffi::META_PAD_ACTION_BUTTON,
            Self::Ring => ffi::META_PAD_ACTION_RING,
            Self::Strip => ffi::META_PAD_ACTION_STRIP,
            Self::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::MetaPadActionType> for PadActionType {
    unsafe fn from_glib(value: ffi::MetaPadActionType) -> Self {
        match value {
            ffi::META_PAD_ACTION_BUTTON => Self::Button,
            ffi::META_PAD_ACTION_RING => Self::Ring,
            ffi::META_PAD_ACTION_STRIP => Self::Strip,
            value => Self::__Unknown(value),
}
    }
}

impl StaticType for PadActionType {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::meta_pad_action_type_get_type()) }
    }
}

impl glib::value::ValueType for PadActionType {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for PadActionType {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for PadActionType {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "MetaSelectionType")]
pub enum SelectionType {
    #[doc(alias = "META_SELECTION_PRIMARY")]
    SelectionPrimary,
    #[doc(alias = "META_SELECTION_CLIPBOARD")]
    SelectionClipboard,
    #[doc(alias = "META_SELECTION_DND")]
    SelectionDnd,
    #[doc(alias = "META_N_SELECTION_TYPES")]
    NSelectionTypes,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for SelectionType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "SelectionType::{}", match *self {
            Self::SelectionPrimary => "SelectionPrimary",
            Self::SelectionClipboard => "SelectionClipboard",
            Self::SelectionDnd => "SelectionDnd",
            Self::NSelectionTypes => "NSelectionTypes",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl IntoGlib for SelectionType {
    type GlibType = ffi::MetaSelectionType;

    fn into_glib(self) -> ffi::MetaSelectionType {
        match self {
            Self::SelectionPrimary => ffi::META_SELECTION_PRIMARY,
            Self::SelectionClipboard => ffi::META_SELECTION_CLIPBOARD,
            Self::SelectionDnd => ffi::META_SELECTION_DND,
            Self::NSelectionTypes => ffi::META_N_SELECTION_TYPES,
            Self::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::MetaSelectionType> for SelectionType {
    unsafe fn from_glib(value: ffi::MetaSelectionType) -> Self {
        match value {
            ffi::META_SELECTION_PRIMARY => Self::SelectionPrimary,
            ffi::META_SELECTION_CLIPBOARD => Self::SelectionClipboard,
            ffi::META_SELECTION_DND => Self::SelectionDnd,
            ffi::META_N_SELECTION_TYPES => Self::NSelectionTypes,
            value => Self::__Unknown(value),
}
    }
}

impl StaticType for SelectionType {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::meta_selection_type_get_type()) }
    }
}

impl glib::value::ValueType for SelectionType {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for SelectionType {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for SelectionType {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

/// Layers a window can be in.
/// These MUST be in the order of stacking.
#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "MetaStackLayer")]
pub enum StackLayer {
    #[doc(alias = "META_LAYER_DESKTOP")]
    Desktop,
    #[doc(alias = "META_LAYER_BOTTOM")]
    Bottom,
    #[doc(alias = "META_LAYER_NORMAL")]
    Normal,
    #[doc(alias = "META_LAYER_TOP")]
    Top,
    #[doc(alias = "META_LAYER_OVERRIDE_REDIRECT")]
    OverrideRedirect,
    #[doc(alias = "META_LAYER_LAST")]
    Last,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for StackLayer {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "StackLayer::{}", match *self {
            Self::Desktop => "Desktop",
            Self::Bottom => "Bottom",
            Self::Normal => "Normal",
            Self::Top => "Top",
            Self::OverrideRedirect => "OverrideRedirect",
            Self::Last => "Last",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl IntoGlib for StackLayer {
    type GlibType = ffi::MetaStackLayer;

    fn into_glib(self) -> ffi::MetaStackLayer {
        match self {
            Self::Desktop => ffi::META_LAYER_DESKTOP,
            Self::Bottom => ffi::META_LAYER_BOTTOM,
            Self::Normal => ffi::META_LAYER_NORMAL,
            Self::Top => ffi::META_LAYER_TOP,
            Self::OverrideRedirect => ffi::META_LAYER_OVERRIDE_REDIRECT,
            Self::Last => ffi::META_LAYER_LAST,
            Self::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::MetaStackLayer> for StackLayer {
    unsafe fn from_glib(value: ffi::MetaStackLayer) -> Self {
        match value {
            ffi::META_LAYER_DESKTOP => Self::Desktop,
            ffi::META_LAYER_BOTTOM => Self::Bottom,
            ffi::META_LAYER_NORMAL => Self::Normal,
            ffi::META_LAYER_TOP => Self::Top,
            ffi::META_LAYER_OVERRIDE_REDIRECT => Self::OverrideRedirect,
            ffi::META_LAYER_LAST => Self::Last,
            value => Self::__Unknown(value),
}
    }
}

impl StaticType for StackLayer {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::meta_stack_layer_get_type()) }
    }
}

impl glib::value::ValueType for StackLayer {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for StackLayer {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for StackLayer {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "MetaTabList")]
pub enum TabList {
    #[doc(alias = "META_TAB_LIST_NORMAL")]
    Normal,
    #[doc(alias = "META_TAB_LIST_DOCKS")]
    Docks,
    #[doc(alias = "META_TAB_LIST_GROUP")]
    Group,
    #[doc(alias = "META_TAB_LIST_NORMAL_ALL")]
    NormalAll,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for TabList {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "TabList::{}", match *self {
            Self::Normal => "Normal",
            Self::Docks => "Docks",
            Self::Group => "Group",
            Self::NormalAll => "NormalAll",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl IntoGlib for TabList {
    type GlibType = ffi::MetaTabList;

    fn into_glib(self) -> ffi::MetaTabList {
        match self {
            Self::Normal => ffi::META_TAB_LIST_NORMAL,
            Self::Docks => ffi::META_TAB_LIST_DOCKS,
            Self::Group => ffi::META_TAB_LIST_GROUP,
            Self::NormalAll => ffi::META_TAB_LIST_NORMAL_ALL,
            Self::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::MetaTabList> for TabList {
    unsafe fn from_glib(value: ffi::MetaTabList) -> Self {
        match value {
            ffi::META_TAB_LIST_NORMAL => Self::Normal,
            ffi::META_TAB_LIST_DOCKS => Self::Docks,
            ffi::META_TAB_LIST_GROUP => Self::Group,
            ffi::META_TAB_LIST_NORMAL_ALL => Self::NormalAll,
            value => Self::__Unknown(value),
}
    }
}

impl StaticType for TabList {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::meta_tab_list_get_type()) }
    }
}

impl glib::value::ValueType for TabList {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for TabList {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for TabList {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "MetaWindowClientType")]
pub enum WindowClientType {
    #[doc(alias = "META_WINDOW_CLIENT_TYPE_WAYLAND")]
    Wayland,
    #[doc(alias = "META_WINDOW_CLIENT_TYPE_X11")]
    X11,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for WindowClientType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "WindowClientType::{}", match *self {
            Self::Wayland => "Wayland",
            Self::X11 => "X11",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl IntoGlib for WindowClientType {
    type GlibType = ffi::MetaWindowClientType;

    fn into_glib(self) -> ffi::MetaWindowClientType {
        match self {
            Self::Wayland => ffi::META_WINDOW_CLIENT_TYPE_WAYLAND,
            Self::X11 => ffi::META_WINDOW_CLIENT_TYPE_X11,
            Self::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::MetaWindowClientType> for WindowClientType {
    unsafe fn from_glib(value: ffi::MetaWindowClientType) -> Self {
        match value {
            ffi::META_WINDOW_CLIENT_TYPE_WAYLAND => Self::Wayland,
            ffi::META_WINDOW_CLIENT_TYPE_X11 => Self::X11,
            value => Self::__Unknown(value),
}
    }
}

impl StaticType for WindowClientType {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::meta_window_client_type_get_type()) }
    }
}

impl glib::value::ValueType for WindowClientType {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for WindowClientType {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for WindowClientType {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "MetaWindowType")]
pub enum WindowType {
    #[doc(alias = "META_WINDOW_NORMAL")]
    Normal,
    #[doc(alias = "META_WINDOW_DESKTOP")]
    Desktop,
    #[doc(alias = "META_WINDOW_DOCK")]
    Dock,
    #[doc(alias = "META_WINDOW_DIALOG")]
    Dialog,
    #[doc(alias = "META_WINDOW_MODAL_DIALOG")]
    ModalDialog,
    #[doc(alias = "META_WINDOW_TOOLBAR")]
    Toolbar,
    #[doc(alias = "META_WINDOW_MENU")]
    Menu,
    #[doc(alias = "META_WINDOW_UTILITY")]
    Utility,
    #[doc(alias = "META_WINDOW_SPLASHSCREEN")]
    Splashscreen,
    #[doc(alias = "META_WINDOW_DROPDOWN_MENU")]
    DropdownMenu,
    #[doc(alias = "META_WINDOW_POPUP_MENU")]
    PopupMenu,
    #[doc(alias = "META_WINDOW_TOOLTIP")]
    Tooltip,
    #[doc(alias = "META_WINDOW_NOTIFICATION")]
    Notification,
    #[doc(alias = "META_WINDOW_COMBO")]
    Combo,
    #[doc(alias = "META_WINDOW_DND")]
    Dnd,
    #[doc(alias = "META_WINDOW_OVERRIDE_OTHER")]
    OverrideOther,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for WindowType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "WindowType::{}", match *self {
            Self::Normal => "Normal",
            Self::Desktop => "Desktop",
            Self::Dock => "Dock",
            Self::Dialog => "Dialog",
            Self::ModalDialog => "ModalDialog",
            Self::Toolbar => "Toolbar",
            Self::Menu => "Menu",
            Self::Utility => "Utility",
            Self::Splashscreen => "Splashscreen",
            Self::DropdownMenu => "DropdownMenu",
            Self::PopupMenu => "PopupMenu",
            Self::Tooltip => "Tooltip",
            Self::Notification => "Notification",
            Self::Combo => "Combo",
            Self::Dnd => "Dnd",
            Self::OverrideOther => "OverrideOther",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl IntoGlib for WindowType {
    type GlibType = ffi::MetaWindowType;

    fn into_glib(self) -> ffi::MetaWindowType {
        match self {
            Self::Normal => ffi::META_WINDOW_NORMAL,
            Self::Desktop => ffi::META_WINDOW_DESKTOP,
            Self::Dock => ffi::META_WINDOW_DOCK,
            Self::Dialog => ffi::META_WINDOW_DIALOG,
            Self::ModalDialog => ffi::META_WINDOW_MODAL_DIALOG,
            Self::Toolbar => ffi::META_WINDOW_TOOLBAR,
            Self::Menu => ffi::META_WINDOW_MENU,
            Self::Utility => ffi::META_WINDOW_UTILITY,
            Self::Splashscreen => ffi::META_WINDOW_SPLASHSCREEN,
            Self::DropdownMenu => ffi::META_WINDOW_DROPDOWN_MENU,
            Self::PopupMenu => ffi::META_WINDOW_POPUP_MENU,
            Self::Tooltip => ffi::META_WINDOW_TOOLTIP,
            Self::Notification => ffi::META_WINDOW_NOTIFICATION,
            Self::Combo => ffi::META_WINDOW_COMBO,
            Self::Dnd => ffi::META_WINDOW_DND,
            Self::OverrideOther => ffi::META_WINDOW_OVERRIDE_OTHER,
            Self::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::MetaWindowType> for WindowType {
    unsafe fn from_glib(value: ffi::MetaWindowType) -> Self {
        match value {
            ffi::META_WINDOW_NORMAL => Self::Normal,
            ffi::META_WINDOW_DESKTOP => Self::Desktop,
            ffi::META_WINDOW_DOCK => Self::Dock,
            ffi::META_WINDOW_DIALOG => Self::Dialog,
            ffi::META_WINDOW_MODAL_DIALOG => Self::ModalDialog,
            ffi::META_WINDOW_TOOLBAR => Self::Toolbar,
            ffi::META_WINDOW_MENU => Self::Menu,
            ffi::META_WINDOW_UTILITY => Self::Utility,
            ffi::META_WINDOW_SPLASHSCREEN => Self::Splashscreen,
            ffi::META_WINDOW_DROPDOWN_MENU => Self::DropdownMenu,
            ffi::META_WINDOW_POPUP_MENU => Self::PopupMenu,
            ffi::META_WINDOW_TOOLTIP => Self::Tooltip,
            ffi::META_WINDOW_NOTIFICATION => Self::Notification,
            ffi::META_WINDOW_COMBO => Self::Combo,
            ffi::META_WINDOW_DND => Self::Dnd,
            ffi::META_WINDOW_OVERRIDE_OTHER => Self::OverrideOther,
            value => Self::__Unknown(value),
}
    }
}

impl StaticType for WindowType {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::meta_window_type_get_type()) }
    }
}

impl glib::value::ValueType for WindowType {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for WindowType {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

impl ToValue for WindowType {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

