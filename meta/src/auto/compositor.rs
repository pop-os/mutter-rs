// Generated by gir (https://github.com/gtk-rs/gir @ 45cd7bc)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 8e47c67)
// from mutter-gir-files
// DO NOT EDIT

use crate::Display;
use crate::KeyBinding;
use crate::MotionDirection;
use crate::Rectangle;
use crate::Window;
use crate::Workspace;
use glib::object::ObjectType as ObjectType_;
use glib::translate::*;
use glib::StaticType;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "MetaCompositor")]
    pub struct Compositor(Object<ffi::MetaCompositor, ffi::MetaCompositorClass>);

    match fn {
        type_ => || ffi::meta_compositor_get_type(),
    }
}

impl Compositor {
    #[doc(alias = "meta_compositor_add_window")]
    pub fn add_window(&self, window: &Window) {
        unsafe {
            ffi::meta_compositor_add_window(self.to_glib_none().0, window.to_glib_none().0);
        }
    }

    #[doc(alias = "meta_compositor_destroy")]
    pub fn destroy(&self) {
        unsafe {
            ffi::meta_compositor_destroy(self.to_glib_none().0);
        }
    }

    #[doc(alias = "meta_compositor_filter_keybinding")]
    pub fn filter_keybinding(&self, binding: &KeyBinding) -> bool {
        unsafe {
            from_glib(ffi::meta_compositor_filter_keybinding(self.to_glib_none().0, mut_override(binding.to_glib_none().0)))
        }
    }

    #[doc(alias = "meta_compositor_flash_display")]
    pub fn flash_display(&self, display: &Display) {
        unsafe {
            ffi::meta_compositor_flash_display(self.to_glib_none().0, display.to_glib_none().0);
        }
    }

    #[doc(alias = "meta_compositor_hide_tile_preview")]
    pub fn hide_tile_preview(&self) {
        unsafe {
            ffi::meta_compositor_hide_tile_preview(self.to_glib_none().0);
        }
    }

    //#[doc(alias = "meta_compositor_hide_window")]
    //pub fn hide_window(&self, window: &Window, effect: /*Ignored*/CompEffect) {
    //    unsafe { TODO: call ffi:meta_compositor_hide_window() }
    //}

    #[doc(alias = "meta_compositor_manage")]
    pub fn manage(&self) {
        unsafe {
            ffi::meta_compositor_manage(self.to_glib_none().0);
        }
    }

    #[doc(alias = "meta_compositor_queue_frame_drawn")]
    pub fn queue_frame_drawn(&self, window: &Window, no_delay_frame: bool) {
        unsafe {
            ffi::meta_compositor_queue_frame_drawn(self.to_glib_none().0, window.to_glib_none().0, no_delay_frame.into_glib());
        }
    }

    #[doc(alias = "meta_compositor_remove_window")]
    pub fn remove_window(&self, window: &Window) {
        unsafe {
            ffi::meta_compositor_remove_window(self.to_glib_none().0, window.to_glib_none().0);
        }
    }

    #[doc(alias = "meta_compositor_show_tile_preview")]
    pub fn show_tile_preview(&self, window: &Window, tile_rect: &mut Rectangle, tile_monitor_number: i32) {
        unsafe {
            ffi::meta_compositor_show_tile_preview(self.to_glib_none().0, window.to_glib_none().0, tile_rect.to_glib_none_mut().0, tile_monitor_number);
        }
    }

    //#[doc(alias = "meta_compositor_show_window")]
    //pub fn show_window(&self, window: &Window, effect: /*Ignored*/CompEffect) {
    //    unsafe { TODO: call ffi:meta_compositor_show_window() }
    //}

    //#[doc(alias = "meta_compositor_show_window_menu")]
    //pub fn show_window_menu(&self, window: &Window, menu: /*Ignored*/WindowMenuType, x: i32, y: i32) {
    //    unsafe { TODO: call ffi:meta_compositor_show_window_menu() }
    //}

    //#[doc(alias = "meta_compositor_show_window_menu_for_rect")]
    //pub fn show_window_menu_for_rect(&self, window: &Window, menu: /*Ignored*/WindowMenuType, rect: &mut Rectangle) {
    //    unsafe { TODO: call ffi:meta_compositor_show_window_menu_for_rect() }
    //}

    //#[doc(alias = "meta_compositor_size_change_window")]
    //pub fn size_change_window(&self, window: &Window, which_change: /*Ignored*/SizeChange, old_frame_rect: &mut Rectangle, old_buffer_rect: &mut Rectangle) {
    //    unsafe { TODO: call ffi:meta_compositor_size_change_window() }
    //}

    #[doc(alias = "meta_compositor_switch_workspace")]
    pub fn switch_workspace(&self, from: &Workspace, to: &Workspace, direction: MotionDirection) {
        unsafe {
            ffi::meta_compositor_switch_workspace(self.to_glib_none().0, from.to_glib_none().0, to.to_glib_none().0, direction.into_glib());
        }
    }

    //#[doc(alias = "meta_compositor_sync_stack")]
    //pub fn sync_stack(&self, stack: /*Unimplemented*/&[&Fundamental: Pointer]) {
    //    unsafe { TODO: call ffi:meta_compositor_sync_stack() }
    //}

    #[doc(alias = "meta_compositor_sync_updates_frozen")]
    pub fn sync_updates_frozen(&self, window: &Window) {
        unsafe {
            ffi::meta_compositor_sync_updates_frozen(self.to_glib_none().0, window.to_glib_none().0);
        }
    }

    #[doc(alias = "meta_compositor_sync_window_geometry")]
    pub fn sync_window_geometry(&self, window: &Window, did_placement: bool) {
        unsafe {
            ffi::meta_compositor_sync_window_geometry(self.to_glib_none().0, window.to_glib_none().0, did_placement.into_glib());
        }
    }

    #[doc(alias = "meta_compositor_unmanage")]
    pub fn unmanage(&self) {
        unsafe {
            ffi::meta_compositor_unmanage(self.to_glib_none().0);
        }
    }

    #[doc(alias = "meta_compositor_window_opacity_changed")]
    pub fn window_opacity_changed(&self, window: &Window) {
        unsafe {
            ffi::meta_compositor_window_opacity_changed(self.to_glib_none().0, window.to_glib_none().0);
        }
    }

    #[doc(alias = "meta_compositor_window_shape_changed")]
    pub fn window_shape_changed(&self, window: &Window) {
        unsafe {
            ffi::meta_compositor_window_shape_changed(self.to_glib_none().0, window.to_glib_none().0);
        }
    }

    //pub fn backend(&self) -> /*Ignored*/Option<Backend> {
    //    unsafe {
    //        let mut value = glib::Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        glib::gobject_ffi::g_object_get_property(self.as_ptr() as *mut glib::gobject_ffi::GObject, b"backend\0".as_ptr() as *const _, value.to_glib_none_mut().0);
    //        value.get().expect("Return Value for property `backend` getter")
    //    }
    //}

    pub fn display(&self) -> Option<Display> {
        unsafe {
            let mut value = glib::Value::from_type(<Display as StaticType>::static_type());
            glib::gobject_ffi::g_object_get_property(self.as_ptr() as *mut glib::gobject_ffi::GObject, b"display\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `display` getter")
        }
    }
}

impl fmt::Display for Compositor {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Compositor")
    }
}
