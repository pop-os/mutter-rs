// Generated by gir (https://github.com/gtk-rs/gir @ 5bbf6cb)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 8e47c67)
// from mutter-gir-files
// DO NOT EDIT

use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "MetaMonitorManager")]
    pub struct MonitorManager(Object<ffi::MetaMonitorManager, ffi::MetaMonitorManagerClass>);

    match fn {
        type_ => || ffi::meta_monitor_manager_get_type(),
    }
}

impl MonitorManager {
    #[doc(alias = "meta_monitor_manager_can_switch_config")]
    pub fn can_switch_config(&self) -> bool {
        unsafe {
            from_glib(ffi::meta_monitor_manager_can_switch_config(self.to_glib_none().0))
        }
    }

    /// Returns whether the built-in display (i.e. a laptop panel) is turned on.
    #[doc(alias = "meta_monitor_manager_get_is_builtin_display_on")]
    #[doc(alias = "get_is_builtin_display_on")]
    pub fn is_builtin_display_on(&self) -> bool {
        unsafe {
            from_glib(ffi::meta_monitor_manager_get_is_builtin_display_on(self.to_glib_none().0))
        }
    }

    /// ## `connector`
    /// A valid connector name
    ///
    /// # Returns
    ///
    /// The monitor index or -1 if `id` isn't valid or the connector
    /// isn't associated with a logical monitor.
    #[doc(alias = "meta_monitor_manager_get_monitor_for_connector")]
    #[doc(alias = "get_monitor_for_connector")]
    pub fn monitor_for_connector(&self, connector: &str) -> i32 {
        unsafe {
            ffi::meta_monitor_manager_get_monitor_for_connector(self.to_glib_none().0, connector.to_glib_none().0)
        }
    }

    #[doc(alias = "meta_monitor_manager_get_panel_orientation_managed")]
    #[doc(alias = "get_panel_orientation_managed")]
    pub fn is_panel_orientation_managed(&self) -> bool {
        unsafe {
            from_glib(ffi::meta_monitor_manager_get_panel_orientation_managed(self.to_glib_none().0))
        }
    }

    //#[doc(alias = "meta_monitor_manager_get_switch_config")]
    //#[doc(alias = "get_switch_config")]
    //pub fn switch_config(&self) -> /*Ignored*/MonitorSwitchConfigType {
    //    unsafe { TODO: call ffi:meta_monitor_manager_get_switch_config() }
    //}

    //#[doc(alias = "meta_monitor_manager_switch_config")]
    //pub fn switch_config(&self, config_type: /*Ignored*/MonitorSwitchConfigType) {
    //    unsafe { TODO: call ffi:meta_monitor_manager_switch_config() }
    //}

    //pub fn backend(&self) -> /*Ignored*/Option<Backend> {
    //    unsafe {
    //        let mut value = glib::Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        glib::gobject_ffi::g_object_get_property(self.as_ptr() as *mut glib::gobject_ffi::GObject, b"backend\0".as_ptr() as *const _, value.to_glib_none_mut().0);
    //        value.get().expect("Return Value for property `backend` getter")
    //    }
    //}

    /// Accessor for the singleton MetaMonitorManager.
    ///
    /// # Returns
    ///
    /// The only [`MonitorManager`][crate::MonitorManager] there is.
    #[doc(alias = "meta_monitor_manager_get")]
    pub fn get() -> Option<MonitorManager> {
        unsafe {
            from_glib_none(ffi::meta_monitor_manager_get())
        }
    }

    #[doc(alias = "meta_monitor_manager_get_display_configuration_timeout")]
    #[doc(alias = "get_display_configuration_timeout")]
    pub fn display_configuration_timeout() -> i32 {
        unsafe {
            ffi::meta_monitor_manager_get_display_configuration_timeout()
        }
    }

    #[doc(alias = "confirm-display-change")]
    pub fn connect_confirm_display_change<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn confirm_display_change_trampoline<F: Fn(&MonitorManager) + 'static>(this: *mut ffi::MetaMonitorManager, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"confirm-display-change\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(confirm_display_change_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "monitors-changed")]
    pub fn connect_monitors_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn monitors_changed_trampoline<F: Fn(&MonitorManager) + 'static>(this: *mut ffi::MetaMonitorManager, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"monitors-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(monitors_changed_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "monitors-changed-internal")]
    pub fn connect_monitors_changed_internal<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn monitors_changed_internal_trampoline<F: Fn(&MonitorManager) + 'static>(this: *mut ffi::MetaMonitorManager, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"monitors-changed-internal\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(monitors_changed_internal_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "power-save-mode-changed")]
    pub fn connect_power_save_mode_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn power_save_mode_changed_trampoline<F: Fn(&MonitorManager) + 'static>(this: *mut ffi::MetaMonitorManager, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"power-save-mode-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(power_save_mode_changed_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "panel-orientation-managed")]
    pub fn connect_panel_orientation_managed_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_panel_orientation_managed_trampoline<F: Fn(&MonitorManager) + 'static>(this: *mut ffi::MetaMonitorManager, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::panel-orientation-managed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_panel_orientation_managed_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for MonitorManager {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("MonitorManager")
    }
}
