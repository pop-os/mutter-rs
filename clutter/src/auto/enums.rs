// Generated by gir (https://github.com/gtk-rs/gir @ 5bbf6cb)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 8e47c67)
// from mutter-gir-files
// DO NOT EDIT

#[cfg(any(feature = "v1_0", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_0")))]
use glib::translate::*;
#[cfg(any(feature = "v1_0", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_0")))]
use glib::value::FromValue;
#[cfg(any(feature = "v1_0", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_0")))]
use glib::value::ToValue;
#[cfg(any(feature = "v1_0", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_0")))]
use glib::StaticType;
#[cfg(any(feature = "v1_0", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_0")))]
use glib::Type;
#[cfg(any(feature = "v1_0", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_0")))]
use std::fmt;

/// Controls how a [`Actor`][crate::Actor] should align itself inside the extra space
/// assigned to it during the allocation.
///
/// Alignment only matters if the allocated space given to an actor is
/// bigger than its natural size; for example, when the `property::Actor::x-expand`
/// or the `property::Actor::y-expand` properties of [`Actor`][crate::Actor] are set to [`true`].
#[cfg(any(feature = "v1_10", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "ClutterActorAlign")]
pub enum ActorAlign {
    #[doc(alias = "CLUTTER_ACTOR_ALIGN_FILL")]
    Fill,
    #[doc(alias = "CLUTTER_ACTOR_ALIGN_START")]
    Start,
    #[doc(alias = "CLUTTER_ACTOR_ALIGN_CENTER")]
    Center,
    #[doc(alias = "CLUTTER_ACTOR_ALIGN_END")]
    End,
#[doc(hidden)]
    __Unknown(i32),
}

#[cfg(any(feature = "v1_10", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
impl fmt::Display for ActorAlign {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "ActorAlign::{}", match *self {
            Self::Fill => "Fill",
            Self::Start => "Start",
            Self::Center => "Center",
            Self::End => "End",
            _ => "Unknown",
        })
    }
}

#[cfg(any(feature = "v1_10", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
#[doc(hidden)]
impl IntoGlib for ActorAlign {
    type GlibType = ffi::ClutterActorAlign;

    fn into_glib(self) -> ffi::ClutterActorAlign {
        match self {
            Self::Fill => ffi::CLUTTER_ACTOR_ALIGN_FILL,
            Self::Start => ffi::CLUTTER_ACTOR_ALIGN_START,
            Self::Center => ffi::CLUTTER_ACTOR_ALIGN_CENTER,
            Self::End => ffi::CLUTTER_ACTOR_ALIGN_END,
            Self::__Unknown(value) => value,
}
    }
}

#[cfg(any(feature = "v1_10", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
#[doc(hidden)]
impl FromGlib<ffi::ClutterActorAlign> for ActorAlign {
    unsafe fn from_glib(value: ffi::ClutterActorAlign) -> Self {
        match value {
            ffi::CLUTTER_ACTOR_ALIGN_FILL => Self::Fill,
            ffi::CLUTTER_ACTOR_ALIGN_START => Self::Start,
            ffi::CLUTTER_ACTOR_ALIGN_CENTER => Self::Center,
            ffi::CLUTTER_ACTOR_ALIGN_END => Self::End,
            value => Self::__Unknown(value),
}
    }
}

#[cfg(any(feature = "v1_10", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
impl StaticType for ActorAlign {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::clutter_actor_align_get_type()) }
    }
}

#[cfg(any(feature = "v1_10", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
impl glib::value::ValueType for ActorAlign {
    type Type = Self;
}

#[cfg(any(feature = "v1_10", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
unsafe impl<'a> FromValue<'a> for ActorAlign {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

#[cfg(any(feature = "v1_10", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
impl ToValue for ActorAlign {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

/// The animation modes used by [`Animatable`][crate::Animatable]. This
/// enumeration can be expanded in later versions of Clutter.
///
/// <figure id="easing-modes">
///  `<title>`Easing modes provided by Clutter`</title>`
///  <graphic fileref="easing-modes.png" format="PNG"/>
/// `</figure>`
///
/// Every global alpha function registered using `clutter_alpha_register_func()`
/// or `clutter_alpha_register_closure()` will have a logical id greater than
/// [`AnimationLast`][Self::AnimationLast].
#[cfg(any(feature = "v1_0", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_0")))]
#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "ClutterAnimationMode")]
pub enum AnimationMode {
    #[doc(alias = "CLUTTER_CUSTOM_MODE")]
    CustomMode,
    #[doc(alias = "CLUTTER_LINEAR")]
    Linear,
    #[doc(alias = "CLUTTER_EASE_IN_QUAD")]
    EaseInQuad,
    #[doc(alias = "CLUTTER_EASE_OUT_QUAD")]
    EaseOutQuad,
    #[doc(alias = "CLUTTER_EASE_IN_OUT_QUAD")]
    EaseInOutQuad,
    #[doc(alias = "CLUTTER_EASE_IN_CUBIC")]
    EaseInCubic,
    #[doc(alias = "CLUTTER_EASE_OUT_CUBIC")]
    EaseOutCubic,
    #[doc(alias = "CLUTTER_EASE_IN_OUT_CUBIC")]
    EaseInOutCubic,
    #[doc(alias = "CLUTTER_EASE_IN_QUART")]
    EaseInQuart,
    #[doc(alias = "CLUTTER_EASE_OUT_QUART")]
    EaseOutQuart,
    #[doc(alias = "CLUTTER_EASE_IN_OUT_QUART")]
    EaseInOutQuart,
    #[doc(alias = "CLUTTER_EASE_IN_QUINT")]
    EaseInQuint,
    #[doc(alias = "CLUTTER_EASE_OUT_QUINT")]
    EaseOutQuint,
    #[doc(alias = "CLUTTER_EASE_IN_OUT_QUINT")]
    EaseInOutQuint,
    #[doc(alias = "CLUTTER_EASE_IN_SINE")]
    EaseInSine,
    #[doc(alias = "CLUTTER_EASE_OUT_SINE")]
    EaseOutSine,
    #[doc(alias = "CLUTTER_EASE_IN_OUT_SINE")]
    EaseInOutSine,
    #[doc(alias = "CLUTTER_EASE_IN_EXPO")]
    EaseInExpo,
    #[doc(alias = "CLUTTER_EASE_OUT_EXPO")]
    EaseOutExpo,
    #[doc(alias = "CLUTTER_EASE_IN_OUT_EXPO")]
    EaseInOutExpo,
    #[doc(alias = "CLUTTER_EASE_IN_CIRC")]
    EaseInCirc,
    #[doc(alias = "CLUTTER_EASE_OUT_CIRC")]
    EaseOutCirc,
    #[doc(alias = "CLUTTER_EASE_IN_OUT_CIRC")]
    EaseInOutCirc,
    #[doc(alias = "CLUTTER_EASE_IN_ELASTIC")]
    EaseInElastic,
    #[doc(alias = "CLUTTER_EASE_OUT_ELASTIC")]
    EaseOutElastic,
    #[doc(alias = "CLUTTER_EASE_IN_OUT_ELASTIC")]
    EaseInOutElastic,
    #[doc(alias = "CLUTTER_EASE_IN_BACK")]
    EaseInBack,
    #[doc(alias = "CLUTTER_EASE_OUT_BACK")]
    EaseOutBack,
    #[doc(alias = "CLUTTER_EASE_IN_OUT_BACK")]
    EaseInOutBack,
    #[doc(alias = "CLUTTER_EASE_IN_BOUNCE")]
    EaseInBounce,
    #[doc(alias = "CLUTTER_EASE_OUT_BOUNCE")]
    EaseOutBounce,
    #[doc(alias = "CLUTTER_EASE_IN_OUT_BOUNCE")]
    EaseInOutBounce,
    #[doc(alias = "CLUTTER_STEPS")]
    Steps,
    #[doc(alias = "CLUTTER_STEP_START")]
    StepStart,
    #[doc(alias = "CLUTTER_STEP_END")]
    StepEnd,
    #[doc(alias = "CLUTTER_CUBIC_BEZIER")]
    CubicBezier,
    #[doc(alias = "CLUTTER_EASE")]
    Ease,
    #[doc(alias = "CLUTTER_EASE_IN")]
    EaseIn,
    #[doc(alias = "CLUTTER_EASE_OUT")]
    EaseOut,
    #[doc(alias = "CLUTTER_EASE_IN_OUT")]
    EaseInOut,
    #[doc(alias = "CLUTTER_ANIMATION_LAST")]
    AnimationLast,
#[doc(hidden)]
    __Unknown(i32),
}

#[cfg(any(feature = "v1_0", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_0")))]
impl fmt::Display for AnimationMode {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "AnimationMode::{}", match *self {
            Self::CustomMode => "CustomMode",
            Self::Linear => "Linear",
            Self::EaseInQuad => "EaseInQuad",
            Self::EaseOutQuad => "EaseOutQuad",
            Self::EaseInOutQuad => "EaseInOutQuad",
            Self::EaseInCubic => "EaseInCubic",
            Self::EaseOutCubic => "EaseOutCubic",
            Self::EaseInOutCubic => "EaseInOutCubic",
            Self::EaseInQuart => "EaseInQuart",
            Self::EaseOutQuart => "EaseOutQuart",
            Self::EaseInOutQuart => "EaseInOutQuart",
            Self::EaseInQuint => "EaseInQuint",
            Self::EaseOutQuint => "EaseOutQuint",
            Self::EaseInOutQuint => "EaseInOutQuint",
            Self::EaseInSine => "EaseInSine",
            Self::EaseOutSine => "EaseOutSine",
            Self::EaseInOutSine => "EaseInOutSine",
            Self::EaseInExpo => "EaseInExpo",
            Self::EaseOutExpo => "EaseOutExpo",
            Self::EaseInOutExpo => "EaseInOutExpo",
            Self::EaseInCirc => "EaseInCirc",
            Self::EaseOutCirc => "EaseOutCirc",
            Self::EaseInOutCirc => "EaseInOutCirc",
            Self::EaseInElastic => "EaseInElastic",
            Self::EaseOutElastic => "EaseOutElastic",
            Self::EaseInOutElastic => "EaseInOutElastic",
            Self::EaseInBack => "EaseInBack",
            Self::EaseOutBack => "EaseOutBack",
            Self::EaseInOutBack => "EaseInOutBack",
            Self::EaseInBounce => "EaseInBounce",
            Self::EaseOutBounce => "EaseOutBounce",
            Self::EaseInOutBounce => "EaseInOutBounce",
            Self::Steps => "Steps",
            Self::StepStart => "StepStart",
            Self::StepEnd => "StepEnd",
            Self::CubicBezier => "CubicBezier",
            Self::Ease => "Ease",
            Self::EaseIn => "EaseIn",
            Self::EaseOut => "EaseOut",
            Self::EaseInOut => "EaseInOut",
            Self::AnimationLast => "AnimationLast",
            _ => "Unknown",
        })
    }
}

#[cfg(any(feature = "v1_0", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_0")))]
#[doc(hidden)]
impl IntoGlib for AnimationMode {
    type GlibType = ffi::ClutterAnimationMode;

    fn into_glib(self) -> ffi::ClutterAnimationMode {
        match self {
            Self::CustomMode => ffi::CLUTTER_CUSTOM_MODE,
            Self::Linear => ffi::CLUTTER_LINEAR,
            Self::EaseInQuad => ffi::CLUTTER_EASE_IN_QUAD,
            Self::EaseOutQuad => ffi::CLUTTER_EASE_OUT_QUAD,
            Self::EaseInOutQuad => ffi::CLUTTER_EASE_IN_OUT_QUAD,
            Self::EaseInCubic => ffi::CLUTTER_EASE_IN_CUBIC,
            Self::EaseOutCubic => ffi::CLUTTER_EASE_OUT_CUBIC,
            Self::EaseInOutCubic => ffi::CLUTTER_EASE_IN_OUT_CUBIC,
            Self::EaseInQuart => ffi::CLUTTER_EASE_IN_QUART,
            Self::EaseOutQuart => ffi::CLUTTER_EASE_OUT_QUART,
            Self::EaseInOutQuart => ffi::CLUTTER_EASE_IN_OUT_QUART,
            Self::EaseInQuint => ffi::CLUTTER_EASE_IN_QUINT,
            Self::EaseOutQuint => ffi::CLUTTER_EASE_OUT_QUINT,
            Self::EaseInOutQuint => ffi::CLUTTER_EASE_IN_OUT_QUINT,
            Self::EaseInSine => ffi::CLUTTER_EASE_IN_SINE,
            Self::EaseOutSine => ffi::CLUTTER_EASE_OUT_SINE,
            Self::EaseInOutSine => ffi::CLUTTER_EASE_IN_OUT_SINE,
            Self::EaseInExpo => ffi::CLUTTER_EASE_IN_EXPO,
            Self::EaseOutExpo => ffi::CLUTTER_EASE_OUT_EXPO,
            Self::EaseInOutExpo => ffi::CLUTTER_EASE_IN_OUT_EXPO,
            Self::EaseInCirc => ffi::CLUTTER_EASE_IN_CIRC,
            Self::EaseOutCirc => ffi::CLUTTER_EASE_OUT_CIRC,
            Self::EaseInOutCirc => ffi::CLUTTER_EASE_IN_OUT_CIRC,
            Self::EaseInElastic => ffi::CLUTTER_EASE_IN_ELASTIC,
            Self::EaseOutElastic => ffi::CLUTTER_EASE_OUT_ELASTIC,
            Self::EaseInOutElastic => ffi::CLUTTER_EASE_IN_OUT_ELASTIC,
            Self::EaseInBack => ffi::CLUTTER_EASE_IN_BACK,
            Self::EaseOutBack => ffi::CLUTTER_EASE_OUT_BACK,
            Self::EaseInOutBack => ffi::CLUTTER_EASE_IN_OUT_BACK,
            Self::EaseInBounce => ffi::CLUTTER_EASE_IN_BOUNCE,
            Self::EaseOutBounce => ffi::CLUTTER_EASE_OUT_BOUNCE,
            Self::EaseInOutBounce => ffi::CLUTTER_EASE_IN_OUT_BOUNCE,
            Self::Steps => ffi::CLUTTER_STEPS,
            Self::StepStart => ffi::CLUTTER_STEP_START,
            Self::StepEnd => ffi::CLUTTER_STEP_END,
            Self::CubicBezier => ffi::CLUTTER_CUBIC_BEZIER,
            Self::Ease => ffi::CLUTTER_EASE,
            Self::EaseIn => ffi::CLUTTER_EASE_IN,
            Self::EaseOut => ffi::CLUTTER_EASE_OUT,
            Self::EaseInOut => ffi::CLUTTER_EASE_IN_OUT,
            Self::AnimationLast => ffi::CLUTTER_ANIMATION_LAST,
            Self::__Unknown(value) => value,
}
    }
}

#[cfg(any(feature = "v1_0", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_0")))]
#[doc(hidden)]
impl FromGlib<ffi::ClutterAnimationMode> for AnimationMode {
    unsafe fn from_glib(value: ffi::ClutterAnimationMode) -> Self {
        match value {
            ffi::CLUTTER_CUSTOM_MODE => Self::CustomMode,
            ffi::CLUTTER_LINEAR => Self::Linear,
            ffi::CLUTTER_EASE_IN_QUAD => Self::EaseInQuad,
            ffi::CLUTTER_EASE_OUT_QUAD => Self::EaseOutQuad,
            ffi::CLUTTER_EASE_IN_OUT_QUAD => Self::EaseInOutQuad,
            ffi::CLUTTER_EASE_IN_CUBIC => Self::EaseInCubic,
            ffi::CLUTTER_EASE_OUT_CUBIC => Self::EaseOutCubic,
            ffi::CLUTTER_EASE_IN_OUT_CUBIC => Self::EaseInOutCubic,
            ffi::CLUTTER_EASE_IN_QUART => Self::EaseInQuart,
            ffi::CLUTTER_EASE_OUT_QUART => Self::EaseOutQuart,
            ffi::CLUTTER_EASE_IN_OUT_QUART => Self::EaseInOutQuart,
            ffi::CLUTTER_EASE_IN_QUINT => Self::EaseInQuint,
            ffi::CLUTTER_EASE_OUT_QUINT => Self::EaseOutQuint,
            ffi::CLUTTER_EASE_IN_OUT_QUINT => Self::EaseInOutQuint,
            ffi::CLUTTER_EASE_IN_SINE => Self::EaseInSine,
            ffi::CLUTTER_EASE_OUT_SINE => Self::EaseOutSine,
            ffi::CLUTTER_EASE_IN_OUT_SINE => Self::EaseInOutSine,
            ffi::CLUTTER_EASE_IN_EXPO => Self::EaseInExpo,
            ffi::CLUTTER_EASE_OUT_EXPO => Self::EaseOutExpo,
            ffi::CLUTTER_EASE_IN_OUT_EXPO => Self::EaseInOutExpo,
            ffi::CLUTTER_EASE_IN_CIRC => Self::EaseInCirc,
            ffi::CLUTTER_EASE_OUT_CIRC => Self::EaseOutCirc,
            ffi::CLUTTER_EASE_IN_OUT_CIRC => Self::EaseInOutCirc,
            ffi::CLUTTER_EASE_IN_ELASTIC => Self::EaseInElastic,
            ffi::CLUTTER_EASE_OUT_ELASTIC => Self::EaseOutElastic,
            ffi::CLUTTER_EASE_IN_OUT_ELASTIC => Self::EaseInOutElastic,
            ffi::CLUTTER_EASE_IN_BACK => Self::EaseInBack,
            ffi::CLUTTER_EASE_OUT_BACK => Self::EaseOutBack,
            ffi::CLUTTER_EASE_IN_OUT_BACK => Self::EaseInOutBack,
            ffi::CLUTTER_EASE_IN_BOUNCE => Self::EaseInBounce,
            ffi::CLUTTER_EASE_OUT_BOUNCE => Self::EaseOutBounce,
            ffi::CLUTTER_EASE_IN_OUT_BOUNCE => Self::EaseInOutBounce,
            ffi::CLUTTER_STEPS => Self::Steps,
            ffi::CLUTTER_STEP_START => Self::StepStart,
            ffi::CLUTTER_STEP_END => Self::StepEnd,
            ffi::CLUTTER_CUBIC_BEZIER => Self::CubicBezier,
            ffi::CLUTTER_EASE => Self::Ease,
            ffi::CLUTTER_EASE_IN => Self::EaseIn,
            ffi::CLUTTER_EASE_OUT => Self::EaseOut,
            ffi::CLUTTER_EASE_IN_OUT => Self::EaseInOut,
            ffi::CLUTTER_ANIMATION_LAST => Self::AnimationLast,
            value => Self::__Unknown(value),
}
    }
}

#[cfg(any(feature = "v1_0", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_0")))]
impl StaticType for AnimationMode {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::clutter_animation_mode_get_type()) }
    }
}

#[cfg(any(feature = "v1_0", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_0")))]
impl glib::value::ValueType for AnimationMode {
    type Type = Self;
}

#[cfg(any(feature = "v1_0", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_0")))]
unsafe impl<'a> FromValue<'a> for AnimationMode {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

#[cfg(any(feature = "v1_0", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_0")))]
impl ToValue for AnimationMode {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

/// Named colors, for accessing global colors defined by Clutter
#[cfg(any(feature = "v1_6", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "ClutterStaticColor")]
pub enum StaticColor {
    #[doc(alias = "CLUTTER_COLOR_WHITE")]
    White,
    #[doc(alias = "CLUTTER_COLOR_BLACK")]
    Black,
    #[doc(alias = "CLUTTER_COLOR_RED")]
    Red,
    #[doc(alias = "CLUTTER_COLOR_DARK_RED")]
    DarkRed,
    #[doc(alias = "CLUTTER_COLOR_GREEN")]
    Green,
    #[doc(alias = "CLUTTER_COLOR_DARK_GREEN")]
    DarkGreen,
    #[doc(alias = "CLUTTER_COLOR_BLUE")]
    Blue,
    #[doc(alias = "CLUTTER_COLOR_DARK_BLUE")]
    DarkBlue,
    #[doc(alias = "CLUTTER_COLOR_CYAN")]
    Cyan,
    #[doc(alias = "CLUTTER_COLOR_DARK_CYAN")]
    DarkCyan,
    #[doc(alias = "CLUTTER_COLOR_MAGENTA")]
    Magenta,
    #[doc(alias = "CLUTTER_COLOR_DARK_MAGENTA")]
    DarkMagenta,
    #[doc(alias = "CLUTTER_COLOR_YELLOW")]
    Yellow,
    #[doc(alias = "CLUTTER_COLOR_DARK_YELLOW")]
    DarkYellow,
    #[doc(alias = "CLUTTER_COLOR_GRAY")]
    Gray,
    #[doc(alias = "CLUTTER_COLOR_DARK_GRAY")]
    DarkGray,
    #[doc(alias = "CLUTTER_COLOR_LIGHT_GRAY")]
    LightGray,
    #[doc(alias = "CLUTTER_COLOR_BUTTER")]
    Butter,
    #[doc(alias = "CLUTTER_COLOR_BUTTER_LIGHT")]
    ButterLight,
    #[doc(alias = "CLUTTER_COLOR_BUTTER_DARK")]
    ButterDark,
    #[doc(alias = "CLUTTER_COLOR_ORANGE")]
    Orange,
    #[doc(alias = "CLUTTER_COLOR_ORANGE_LIGHT")]
    OrangeLight,
    #[doc(alias = "CLUTTER_COLOR_ORANGE_DARK")]
    OrangeDark,
    #[doc(alias = "CLUTTER_COLOR_CHOCOLATE")]
    Chocolate,
    #[doc(alias = "CLUTTER_COLOR_CHOCOLATE_LIGHT")]
    ChocolateLight,
    #[doc(alias = "CLUTTER_COLOR_CHOCOLATE_DARK")]
    ChocolateDark,
    #[doc(alias = "CLUTTER_COLOR_CHAMELEON")]
    Chameleon,
    #[doc(alias = "CLUTTER_COLOR_CHAMELEON_LIGHT")]
    ChameleonLight,
    #[doc(alias = "CLUTTER_COLOR_CHAMELEON_DARK")]
    ChameleonDark,
    #[doc(alias = "CLUTTER_COLOR_SKY_BLUE")]
    SkyBlue,
    #[doc(alias = "CLUTTER_COLOR_SKY_BLUE_LIGHT")]
    SkyBlueLight,
    #[doc(alias = "CLUTTER_COLOR_SKY_BLUE_DARK")]
    SkyBlueDark,
    #[doc(alias = "CLUTTER_COLOR_PLUM")]
    Plum,
    #[doc(alias = "CLUTTER_COLOR_PLUM_LIGHT")]
    PlumLight,
    #[doc(alias = "CLUTTER_COLOR_PLUM_DARK")]
    PlumDark,
    #[doc(alias = "CLUTTER_COLOR_SCARLET_RED")]
    ScarletRed,
    #[doc(alias = "CLUTTER_COLOR_SCARLET_RED_LIGHT")]
    ScarletRedLight,
    #[doc(alias = "CLUTTER_COLOR_SCARLET_RED_DARK")]
    ScarletRedDark,
    #[doc(alias = "CLUTTER_COLOR_ALUMINIUM_1")]
    Aluminium1,
    #[doc(alias = "CLUTTER_COLOR_ALUMINIUM_2")]
    Aluminium2,
    #[doc(alias = "CLUTTER_COLOR_ALUMINIUM_3")]
    Aluminium3,
    #[doc(alias = "CLUTTER_COLOR_ALUMINIUM_4")]
    Aluminium4,
    #[doc(alias = "CLUTTER_COLOR_ALUMINIUM_5")]
    Aluminium5,
    #[doc(alias = "CLUTTER_COLOR_ALUMINIUM_6")]
    Aluminium6,
    #[doc(alias = "CLUTTER_COLOR_TRANSPARENT")]
    Transparent,
#[doc(hidden)]
    __Unknown(i32),
}

#[cfg(any(feature = "v1_6", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
impl fmt::Display for StaticColor {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "StaticColor::{}", match *self {
            Self::White => "White",
            Self::Black => "Black",
            Self::Red => "Red",
            Self::DarkRed => "DarkRed",
            Self::Green => "Green",
            Self::DarkGreen => "DarkGreen",
            Self::Blue => "Blue",
            Self::DarkBlue => "DarkBlue",
            Self::Cyan => "Cyan",
            Self::DarkCyan => "DarkCyan",
            Self::Magenta => "Magenta",
            Self::DarkMagenta => "DarkMagenta",
            Self::Yellow => "Yellow",
            Self::DarkYellow => "DarkYellow",
            Self::Gray => "Gray",
            Self::DarkGray => "DarkGray",
            Self::LightGray => "LightGray",
            Self::Butter => "Butter",
            Self::ButterLight => "ButterLight",
            Self::ButterDark => "ButterDark",
            Self::Orange => "Orange",
            Self::OrangeLight => "OrangeLight",
            Self::OrangeDark => "OrangeDark",
            Self::Chocolate => "Chocolate",
            Self::ChocolateLight => "ChocolateLight",
            Self::ChocolateDark => "ChocolateDark",
            Self::Chameleon => "Chameleon",
            Self::ChameleonLight => "ChameleonLight",
            Self::ChameleonDark => "ChameleonDark",
            Self::SkyBlue => "SkyBlue",
            Self::SkyBlueLight => "SkyBlueLight",
            Self::SkyBlueDark => "SkyBlueDark",
            Self::Plum => "Plum",
            Self::PlumLight => "PlumLight",
            Self::PlumDark => "PlumDark",
            Self::ScarletRed => "ScarletRed",
            Self::ScarletRedLight => "ScarletRedLight",
            Self::ScarletRedDark => "ScarletRedDark",
            Self::Aluminium1 => "Aluminium1",
            Self::Aluminium2 => "Aluminium2",
            Self::Aluminium3 => "Aluminium3",
            Self::Aluminium4 => "Aluminium4",
            Self::Aluminium5 => "Aluminium5",
            Self::Aluminium6 => "Aluminium6",
            Self::Transparent => "Transparent",
            _ => "Unknown",
        })
    }
}

#[cfg(any(feature = "v1_6", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
#[doc(hidden)]
impl IntoGlib for StaticColor {
    type GlibType = ffi::ClutterStaticColor;

    fn into_glib(self) -> ffi::ClutterStaticColor {
        match self {
            Self::White => ffi::CLUTTER_COLOR_WHITE,
            Self::Black => ffi::CLUTTER_COLOR_BLACK,
            Self::Red => ffi::CLUTTER_COLOR_RED,
            Self::DarkRed => ffi::CLUTTER_COLOR_DARK_RED,
            Self::Green => ffi::CLUTTER_COLOR_GREEN,
            Self::DarkGreen => ffi::CLUTTER_COLOR_DARK_GREEN,
            Self::Blue => ffi::CLUTTER_COLOR_BLUE,
            Self::DarkBlue => ffi::CLUTTER_COLOR_DARK_BLUE,
            Self::Cyan => ffi::CLUTTER_COLOR_CYAN,
            Self::DarkCyan => ffi::CLUTTER_COLOR_DARK_CYAN,
            Self::Magenta => ffi::CLUTTER_COLOR_MAGENTA,
            Self::DarkMagenta => ffi::CLUTTER_COLOR_DARK_MAGENTA,
            Self::Yellow => ffi::CLUTTER_COLOR_YELLOW,
            Self::DarkYellow => ffi::CLUTTER_COLOR_DARK_YELLOW,
            Self::Gray => ffi::CLUTTER_COLOR_GRAY,
            Self::DarkGray => ffi::CLUTTER_COLOR_DARK_GRAY,
            Self::LightGray => ffi::CLUTTER_COLOR_LIGHT_GRAY,
            Self::Butter => ffi::CLUTTER_COLOR_BUTTER,
            Self::ButterLight => ffi::CLUTTER_COLOR_BUTTER_LIGHT,
            Self::ButterDark => ffi::CLUTTER_COLOR_BUTTER_DARK,
            Self::Orange => ffi::CLUTTER_COLOR_ORANGE,
            Self::OrangeLight => ffi::CLUTTER_COLOR_ORANGE_LIGHT,
            Self::OrangeDark => ffi::CLUTTER_COLOR_ORANGE_DARK,
            Self::Chocolate => ffi::CLUTTER_COLOR_CHOCOLATE,
            Self::ChocolateLight => ffi::CLUTTER_COLOR_CHOCOLATE_LIGHT,
            Self::ChocolateDark => ffi::CLUTTER_COLOR_CHOCOLATE_DARK,
            Self::Chameleon => ffi::CLUTTER_COLOR_CHAMELEON,
            Self::ChameleonLight => ffi::CLUTTER_COLOR_CHAMELEON_LIGHT,
            Self::ChameleonDark => ffi::CLUTTER_COLOR_CHAMELEON_DARK,
            Self::SkyBlue => ffi::CLUTTER_COLOR_SKY_BLUE,
            Self::SkyBlueLight => ffi::CLUTTER_COLOR_SKY_BLUE_LIGHT,
            Self::SkyBlueDark => ffi::CLUTTER_COLOR_SKY_BLUE_DARK,
            Self::Plum => ffi::CLUTTER_COLOR_PLUM,
            Self::PlumLight => ffi::CLUTTER_COLOR_PLUM_LIGHT,
            Self::PlumDark => ffi::CLUTTER_COLOR_PLUM_DARK,
            Self::ScarletRed => ffi::CLUTTER_COLOR_SCARLET_RED,
            Self::ScarletRedLight => ffi::CLUTTER_COLOR_SCARLET_RED_LIGHT,
            Self::ScarletRedDark => ffi::CLUTTER_COLOR_SCARLET_RED_DARK,
            Self::Aluminium1 => ffi::CLUTTER_COLOR_ALUMINIUM_1,
            Self::Aluminium2 => ffi::CLUTTER_COLOR_ALUMINIUM_2,
            Self::Aluminium3 => ffi::CLUTTER_COLOR_ALUMINIUM_3,
            Self::Aluminium4 => ffi::CLUTTER_COLOR_ALUMINIUM_4,
            Self::Aluminium5 => ffi::CLUTTER_COLOR_ALUMINIUM_5,
            Self::Aluminium6 => ffi::CLUTTER_COLOR_ALUMINIUM_6,
            Self::Transparent => ffi::CLUTTER_COLOR_TRANSPARENT,
            Self::__Unknown(value) => value,
}
    }
}

#[cfg(any(feature = "v1_6", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
#[doc(hidden)]
impl FromGlib<ffi::ClutterStaticColor> for StaticColor {
    unsafe fn from_glib(value: ffi::ClutterStaticColor) -> Self {
        match value {
            ffi::CLUTTER_COLOR_WHITE => Self::White,
            ffi::CLUTTER_COLOR_BLACK => Self::Black,
            ffi::CLUTTER_COLOR_RED => Self::Red,
            ffi::CLUTTER_COLOR_DARK_RED => Self::DarkRed,
            ffi::CLUTTER_COLOR_GREEN => Self::Green,
            ffi::CLUTTER_COLOR_DARK_GREEN => Self::DarkGreen,
            ffi::CLUTTER_COLOR_BLUE => Self::Blue,
            ffi::CLUTTER_COLOR_DARK_BLUE => Self::DarkBlue,
            ffi::CLUTTER_COLOR_CYAN => Self::Cyan,
            ffi::CLUTTER_COLOR_DARK_CYAN => Self::DarkCyan,
            ffi::CLUTTER_COLOR_MAGENTA => Self::Magenta,
            ffi::CLUTTER_COLOR_DARK_MAGENTA => Self::DarkMagenta,
            ffi::CLUTTER_COLOR_YELLOW => Self::Yellow,
            ffi::CLUTTER_COLOR_DARK_YELLOW => Self::DarkYellow,
            ffi::CLUTTER_COLOR_GRAY => Self::Gray,
            ffi::CLUTTER_COLOR_DARK_GRAY => Self::DarkGray,
            ffi::CLUTTER_COLOR_LIGHT_GRAY => Self::LightGray,
            ffi::CLUTTER_COLOR_BUTTER => Self::Butter,
            ffi::CLUTTER_COLOR_BUTTER_LIGHT => Self::ButterLight,
            ffi::CLUTTER_COLOR_BUTTER_DARK => Self::ButterDark,
            ffi::CLUTTER_COLOR_ORANGE => Self::Orange,
            ffi::CLUTTER_COLOR_ORANGE_LIGHT => Self::OrangeLight,
            ffi::CLUTTER_COLOR_ORANGE_DARK => Self::OrangeDark,
            ffi::CLUTTER_COLOR_CHOCOLATE => Self::Chocolate,
            ffi::CLUTTER_COLOR_CHOCOLATE_LIGHT => Self::ChocolateLight,
            ffi::CLUTTER_COLOR_CHOCOLATE_DARK => Self::ChocolateDark,
            ffi::CLUTTER_COLOR_CHAMELEON => Self::Chameleon,
            ffi::CLUTTER_COLOR_CHAMELEON_LIGHT => Self::ChameleonLight,
            ffi::CLUTTER_COLOR_CHAMELEON_DARK => Self::ChameleonDark,
            ffi::CLUTTER_COLOR_SKY_BLUE => Self::SkyBlue,
            ffi::CLUTTER_COLOR_SKY_BLUE_LIGHT => Self::SkyBlueLight,
            ffi::CLUTTER_COLOR_SKY_BLUE_DARK => Self::SkyBlueDark,
            ffi::CLUTTER_COLOR_PLUM => Self::Plum,
            ffi::CLUTTER_COLOR_PLUM_LIGHT => Self::PlumLight,
            ffi::CLUTTER_COLOR_PLUM_DARK => Self::PlumDark,
            ffi::CLUTTER_COLOR_SCARLET_RED => Self::ScarletRed,
            ffi::CLUTTER_COLOR_SCARLET_RED_LIGHT => Self::ScarletRedLight,
            ffi::CLUTTER_COLOR_SCARLET_RED_DARK => Self::ScarletRedDark,
            ffi::CLUTTER_COLOR_ALUMINIUM_1 => Self::Aluminium1,
            ffi::CLUTTER_COLOR_ALUMINIUM_2 => Self::Aluminium2,
            ffi::CLUTTER_COLOR_ALUMINIUM_3 => Self::Aluminium3,
            ffi::CLUTTER_COLOR_ALUMINIUM_4 => Self::Aluminium4,
            ffi::CLUTTER_COLOR_ALUMINIUM_5 => Self::Aluminium5,
            ffi::CLUTTER_COLOR_ALUMINIUM_6 => Self::Aluminium6,
            ffi::CLUTTER_COLOR_TRANSPARENT => Self::Transparent,
            value => Self::__Unknown(value),
}
    }
}

#[cfg(any(feature = "v1_6", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
impl StaticType for StaticColor {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::clutter_static_color_get_type()) }
    }
}

#[cfg(any(feature = "v1_6", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
impl glib::value::ValueType for StaticColor {
    type Type = Self;
}

#[cfg(any(feature = "v1_6", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
unsafe impl<'a> FromValue<'a> for StaticColor {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

#[cfg(any(feature = "v1_6", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
impl ToValue for StaticColor {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

