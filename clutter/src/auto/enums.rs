// Generated by gir (https://github.com/gtk-rs/gir @ 5bbf6cb)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 8e47c67)
// from mutter-gir-files
// DO NOT EDIT

#[cfg(any(feature = "v1_6", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
use glib::translate::*;
#[cfg(any(feature = "v1_6", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
use glib::value::FromValue;
#[cfg(any(feature = "v1_6", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
use glib::value::ToValue;
#[cfg(any(feature = "v1_6", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
use glib::StaticType;
#[cfg(any(feature = "v1_6", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
use glib::Type;
#[cfg(any(feature = "v1_6", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
use std::fmt;

/// Named colors, for accessing global colors defined by Clutter
#[cfg(any(feature = "v1_6", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "ClutterStaticColor")]
pub enum StaticColor {
    #[doc(alias = "CLUTTER_COLOR_WHITE")]
    White,
    #[doc(alias = "CLUTTER_COLOR_BLACK")]
    Black,
    #[doc(alias = "CLUTTER_COLOR_RED")]
    Red,
    #[doc(alias = "CLUTTER_COLOR_DARK_RED")]
    DarkRed,
    #[doc(alias = "CLUTTER_COLOR_GREEN")]
    Green,
    #[doc(alias = "CLUTTER_COLOR_DARK_GREEN")]
    DarkGreen,
    #[doc(alias = "CLUTTER_COLOR_BLUE")]
    Blue,
    #[doc(alias = "CLUTTER_COLOR_DARK_BLUE")]
    DarkBlue,
    #[doc(alias = "CLUTTER_COLOR_CYAN")]
    Cyan,
    #[doc(alias = "CLUTTER_COLOR_DARK_CYAN")]
    DarkCyan,
    #[doc(alias = "CLUTTER_COLOR_MAGENTA")]
    Magenta,
    #[doc(alias = "CLUTTER_COLOR_DARK_MAGENTA")]
    DarkMagenta,
    #[doc(alias = "CLUTTER_COLOR_YELLOW")]
    Yellow,
    #[doc(alias = "CLUTTER_COLOR_DARK_YELLOW")]
    DarkYellow,
    #[doc(alias = "CLUTTER_COLOR_GRAY")]
    Gray,
    #[doc(alias = "CLUTTER_COLOR_DARK_GRAY")]
    DarkGray,
    #[doc(alias = "CLUTTER_COLOR_LIGHT_GRAY")]
    LightGray,
    #[doc(alias = "CLUTTER_COLOR_BUTTER")]
    Butter,
    #[doc(alias = "CLUTTER_COLOR_BUTTER_LIGHT")]
    ButterLight,
    #[doc(alias = "CLUTTER_COLOR_BUTTER_DARK")]
    ButterDark,
    #[doc(alias = "CLUTTER_COLOR_ORANGE")]
    Orange,
    #[doc(alias = "CLUTTER_COLOR_ORANGE_LIGHT")]
    OrangeLight,
    #[doc(alias = "CLUTTER_COLOR_ORANGE_DARK")]
    OrangeDark,
    #[doc(alias = "CLUTTER_COLOR_CHOCOLATE")]
    Chocolate,
    #[doc(alias = "CLUTTER_COLOR_CHOCOLATE_LIGHT")]
    ChocolateLight,
    #[doc(alias = "CLUTTER_COLOR_CHOCOLATE_DARK")]
    ChocolateDark,
    #[doc(alias = "CLUTTER_COLOR_CHAMELEON")]
    Chameleon,
    #[doc(alias = "CLUTTER_COLOR_CHAMELEON_LIGHT")]
    ChameleonLight,
    #[doc(alias = "CLUTTER_COLOR_CHAMELEON_DARK")]
    ChameleonDark,
    #[doc(alias = "CLUTTER_COLOR_SKY_BLUE")]
    SkyBlue,
    #[doc(alias = "CLUTTER_COLOR_SKY_BLUE_LIGHT")]
    SkyBlueLight,
    #[doc(alias = "CLUTTER_COLOR_SKY_BLUE_DARK")]
    SkyBlueDark,
    #[doc(alias = "CLUTTER_COLOR_PLUM")]
    Plum,
    #[doc(alias = "CLUTTER_COLOR_PLUM_LIGHT")]
    PlumLight,
    #[doc(alias = "CLUTTER_COLOR_PLUM_DARK")]
    PlumDark,
    #[doc(alias = "CLUTTER_COLOR_SCARLET_RED")]
    ScarletRed,
    #[doc(alias = "CLUTTER_COLOR_SCARLET_RED_LIGHT")]
    ScarletRedLight,
    #[doc(alias = "CLUTTER_COLOR_SCARLET_RED_DARK")]
    ScarletRedDark,
    #[doc(alias = "CLUTTER_COLOR_ALUMINIUM_1")]
    Aluminium1,
    #[doc(alias = "CLUTTER_COLOR_ALUMINIUM_2")]
    Aluminium2,
    #[doc(alias = "CLUTTER_COLOR_ALUMINIUM_3")]
    Aluminium3,
    #[doc(alias = "CLUTTER_COLOR_ALUMINIUM_4")]
    Aluminium4,
    #[doc(alias = "CLUTTER_COLOR_ALUMINIUM_5")]
    Aluminium5,
    #[doc(alias = "CLUTTER_COLOR_ALUMINIUM_6")]
    Aluminium6,
    #[doc(alias = "CLUTTER_COLOR_TRANSPARENT")]
    Transparent,
#[doc(hidden)]
    __Unknown(i32),
}

#[cfg(any(feature = "v1_6", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
impl fmt::Display for StaticColor {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "StaticColor::{}", match *self {
            Self::White => "White",
            Self::Black => "Black",
            Self::Red => "Red",
            Self::DarkRed => "DarkRed",
            Self::Green => "Green",
            Self::DarkGreen => "DarkGreen",
            Self::Blue => "Blue",
            Self::DarkBlue => "DarkBlue",
            Self::Cyan => "Cyan",
            Self::DarkCyan => "DarkCyan",
            Self::Magenta => "Magenta",
            Self::DarkMagenta => "DarkMagenta",
            Self::Yellow => "Yellow",
            Self::DarkYellow => "DarkYellow",
            Self::Gray => "Gray",
            Self::DarkGray => "DarkGray",
            Self::LightGray => "LightGray",
            Self::Butter => "Butter",
            Self::ButterLight => "ButterLight",
            Self::ButterDark => "ButterDark",
            Self::Orange => "Orange",
            Self::OrangeLight => "OrangeLight",
            Self::OrangeDark => "OrangeDark",
            Self::Chocolate => "Chocolate",
            Self::ChocolateLight => "ChocolateLight",
            Self::ChocolateDark => "ChocolateDark",
            Self::Chameleon => "Chameleon",
            Self::ChameleonLight => "ChameleonLight",
            Self::ChameleonDark => "ChameleonDark",
            Self::SkyBlue => "SkyBlue",
            Self::SkyBlueLight => "SkyBlueLight",
            Self::SkyBlueDark => "SkyBlueDark",
            Self::Plum => "Plum",
            Self::PlumLight => "PlumLight",
            Self::PlumDark => "PlumDark",
            Self::ScarletRed => "ScarletRed",
            Self::ScarletRedLight => "ScarletRedLight",
            Self::ScarletRedDark => "ScarletRedDark",
            Self::Aluminium1 => "Aluminium1",
            Self::Aluminium2 => "Aluminium2",
            Self::Aluminium3 => "Aluminium3",
            Self::Aluminium4 => "Aluminium4",
            Self::Aluminium5 => "Aluminium5",
            Self::Aluminium6 => "Aluminium6",
            Self::Transparent => "Transparent",
            _ => "Unknown",
        })
    }
}

#[cfg(any(feature = "v1_6", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
#[doc(hidden)]
impl IntoGlib for StaticColor {
    type GlibType = ffi::ClutterStaticColor;

    fn into_glib(self) -> ffi::ClutterStaticColor {
        match self {
            Self::White => ffi::CLUTTER_COLOR_WHITE,
            Self::Black => ffi::CLUTTER_COLOR_BLACK,
            Self::Red => ffi::CLUTTER_COLOR_RED,
            Self::DarkRed => ffi::CLUTTER_COLOR_DARK_RED,
            Self::Green => ffi::CLUTTER_COLOR_GREEN,
            Self::DarkGreen => ffi::CLUTTER_COLOR_DARK_GREEN,
            Self::Blue => ffi::CLUTTER_COLOR_BLUE,
            Self::DarkBlue => ffi::CLUTTER_COLOR_DARK_BLUE,
            Self::Cyan => ffi::CLUTTER_COLOR_CYAN,
            Self::DarkCyan => ffi::CLUTTER_COLOR_DARK_CYAN,
            Self::Magenta => ffi::CLUTTER_COLOR_MAGENTA,
            Self::DarkMagenta => ffi::CLUTTER_COLOR_DARK_MAGENTA,
            Self::Yellow => ffi::CLUTTER_COLOR_YELLOW,
            Self::DarkYellow => ffi::CLUTTER_COLOR_DARK_YELLOW,
            Self::Gray => ffi::CLUTTER_COLOR_GRAY,
            Self::DarkGray => ffi::CLUTTER_COLOR_DARK_GRAY,
            Self::LightGray => ffi::CLUTTER_COLOR_LIGHT_GRAY,
            Self::Butter => ffi::CLUTTER_COLOR_BUTTER,
            Self::ButterLight => ffi::CLUTTER_COLOR_BUTTER_LIGHT,
            Self::ButterDark => ffi::CLUTTER_COLOR_BUTTER_DARK,
            Self::Orange => ffi::CLUTTER_COLOR_ORANGE,
            Self::OrangeLight => ffi::CLUTTER_COLOR_ORANGE_LIGHT,
            Self::OrangeDark => ffi::CLUTTER_COLOR_ORANGE_DARK,
            Self::Chocolate => ffi::CLUTTER_COLOR_CHOCOLATE,
            Self::ChocolateLight => ffi::CLUTTER_COLOR_CHOCOLATE_LIGHT,
            Self::ChocolateDark => ffi::CLUTTER_COLOR_CHOCOLATE_DARK,
            Self::Chameleon => ffi::CLUTTER_COLOR_CHAMELEON,
            Self::ChameleonLight => ffi::CLUTTER_COLOR_CHAMELEON_LIGHT,
            Self::ChameleonDark => ffi::CLUTTER_COLOR_CHAMELEON_DARK,
            Self::SkyBlue => ffi::CLUTTER_COLOR_SKY_BLUE,
            Self::SkyBlueLight => ffi::CLUTTER_COLOR_SKY_BLUE_LIGHT,
            Self::SkyBlueDark => ffi::CLUTTER_COLOR_SKY_BLUE_DARK,
            Self::Plum => ffi::CLUTTER_COLOR_PLUM,
            Self::PlumLight => ffi::CLUTTER_COLOR_PLUM_LIGHT,
            Self::PlumDark => ffi::CLUTTER_COLOR_PLUM_DARK,
            Self::ScarletRed => ffi::CLUTTER_COLOR_SCARLET_RED,
            Self::ScarletRedLight => ffi::CLUTTER_COLOR_SCARLET_RED_LIGHT,
            Self::ScarletRedDark => ffi::CLUTTER_COLOR_SCARLET_RED_DARK,
            Self::Aluminium1 => ffi::CLUTTER_COLOR_ALUMINIUM_1,
            Self::Aluminium2 => ffi::CLUTTER_COLOR_ALUMINIUM_2,
            Self::Aluminium3 => ffi::CLUTTER_COLOR_ALUMINIUM_3,
            Self::Aluminium4 => ffi::CLUTTER_COLOR_ALUMINIUM_4,
            Self::Aluminium5 => ffi::CLUTTER_COLOR_ALUMINIUM_5,
            Self::Aluminium6 => ffi::CLUTTER_COLOR_ALUMINIUM_6,
            Self::Transparent => ffi::CLUTTER_COLOR_TRANSPARENT,
            Self::__Unknown(value) => value,
}
    }
}

#[cfg(any(feature = "v1_6", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
#[doc(hidden)]
impl FromGlib<ffi::ClutterStaticColor> for StaticColor {
    unsafe fn from_glib(value: ffi::ClutterStaticColor) -> Self {
        match value {
            ffi::CLUTTER_COLOR_WHITE => Self::White,
            ffi::CLUTTER_COLOR_BLACK => Self::Black,
            ffi::CLUTTER_COLOR_RED => Self::Red,
            ffi::CLUTTER_COLOR_DARK_RED => Self::DarkRed,
            ffi::CLUTTER_COLOR_GREEN => Self::Green,
            ffi::CLUTTER_COLOR_DARK_GREEN => Self::DarkGreen,
            ffi::CLUTTER_COLOR_BLUE => Self::Blue,
            ffi::CLUTTER_COLOR_DARK_BLUE => Self::DarkBlue,
            ffi::CLUTTER_COLOR_CYAN => Self::Cyan,
            ffi::CLUTTER_COLOR_DARK_CYAN => Self::DarkCyan,
            ffi::CLUTTER_COLOR_MAGENTA => Self::Magenta,
            ffi::CLUTTER_COLOR_DARK_MAGENTA => Self::DarkMagenta,
            ffi::CLUTTER_COLOR_YELLOW => Self::Yellow,
            ffi::CLUTTER_COLOR_DARK_YELLOW => Self::DarkYellow,
            ffi::CLUTTER_COLOR_GRAY => Self::Gray,
            ffi::CLUTTER_COLOR_DARK_GRAY => Self::DarkGray,
            ffi::CLUTTER_COLOR_LIGHT_GRAY => Self::LightGray,
            ffi::CLUTTER_COLOR_BUTTER => Self::Butter,
            ffi::CLUTTER_COLOR_BUTTER_LIGHT => Self::ButterLight,
            ffi::CLUTTER_COLOR_BUTTER_DARK => Self::ButterDark,
            ffi::CLUTTER_COLOR_ORANGE => Self::Orange,
            ffi::CLUTTER_COLOR_ORANGE_LIGHT => Self::OrangeLight,
            ffi::CLUTTER_COLOR_ORANGE_DARK => Self::OrangeDark,
            ffi::CLUTTER_COLOR_CHOCOLATE => Self::Chocolate,
            ffi::CLUTTER_COLOR_CHOCOLATE_LIGHT => Self::ChocolateLight,
            ffi::CLUTTER_COLOR_CHOCOLATE_DARK => Self::ChocolateDark,
            ffi::CLUTTER_COLOR_CHAMELEON => Self::Chameleon,
            ffi::CLUTTER_COLOR_CHAMELEON_LIGHT => Self::ChameleonLight,
            ffi::CLUTTER_COLOR_CHAMELEON_DARK => Self::ChameleonDark,
            ffi::CLUTTER_COLOR_SKY_BLUE => Self::SkyBlue,
            ffi::CLUTTER_COLOR_SKY_BLUE_LIGHT => Self::SkyBlueLight,
            ffi::CLUTTER_COLOR_SKY_BLUE_DARK => Self::SkyBlueDark,
            ffi::CLUTTER_COLOR_PLUM => Self::Plum,
            ffi::CLUTTER_COLOR_PLUM_LIGHT => Self::PlumLight,
            ffi::CLUTTER_COLOR_PLUM_DARK => Self::PlumDark,
            ffi::CLUTTER_COLOR_SCARLET_RED => Self::ScarletRed,
            ffi::CLUTTER_COLOR_SCARLET_RED_LIGHT => Self::ScarletRedLight,
            ffi::CLUTTER_COLOR_SCARLET_RED_DARK => Self::ScarletRedDark,
            ffi::CLUTTER_COLOR_ALUMINIUM_1 => Self::Aluminium1,
            ffi::CLUTTER_COLOR_ALUMINIUM_2 => Self::Aluminium2,
            ffi::CLUTTER_COLOR_ALUMINIUM_3 => Self::Aluminium3,
            ffi::CLUTTER_COLOR_ALUMINIUM_4 => Self::Aluminium4,
            ffi::CLUTTER_COLOR_ALUMINIUM_5 => Self::Aluminium5,
            ffi::CLUTTER_COLOR_ALUMINIUM_6 => Self::Aluminium6,
            ffi::CLUTTER_COLOR_TRANSPARENT => Self::Transparent,
            value => Self::__Unknown(value),
}
    }
}

#[cfg(any(feature = "v1_6", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
impl StaticType for StaticColor {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::clutter_static_color_get_type()) }
    }
}

#[cfg(any(feature = "v1_6", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
impl glib::value::ValueType for StaticColor {
    type Type = Self;
}

#[cfg(any(feature = "v1_6", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
unsafe impl<'a> FromValue<'a> for StaticColor {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_enum(value.to_glib_none().0))
    }
}

#[cfg(any(feature = "v1_6", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
impl ToValue for StaticColor {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_enum(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

