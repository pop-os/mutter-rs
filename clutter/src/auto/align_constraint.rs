// Generated by gir (https://github.com/gtk-rs/gir @ 45cd7bc)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 8e47c67)
// from mutter-gir-files
// DO NOT EDIT

use crate::Actor;
use crate::ActorMeta;
use crate::AlignAxis;
use crate::Constraint;
use glib::object::Cast;
use glib::object::IsA;
use glib::object::ObjectType as ObjectType_;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "ClutterAlignConstraint")]
    pub struct AlignConstraint(Object<ffi::ClutterAlignConstraint, ffi::ClutterAlignConstraintClass>) @extends Constraint, ActorMeta;

    match fn {
        type_ => || ffi::clutter_align_constraint_get_type(),
    }
}

impl AlignConstraint {
    /// Creates a new constraint, aligning a [`Actor`][crate::Actor]'s position with
    /// regards of the size of the actor to `source`, with the given
    /// alignment `factor`
    /// ## `source`
    /// the [`Actor`][crate::Actor] to use as the source of the
    ///  alignment, or [`None`]
    /// ## `axis`
    /// the axis to be used to compute the alignment
    /// ## `factor`
    /// the alignment factor, between 0.0 and 1.0
    ///
    /// # Returns
    ///
    /// the newly created [`AlignConstraint`][crate::AlignConstraint]
    #[doc(alias = "clutter_align_constraint_new")]
    pub fn new<P: IsA<Actor>>(source: Option<&P>, axis: AlignAxis, factor: f32) -> AlignConstraint {
        unsafe {
            Constraint::from_glib_none(ffi::clutter_align_constraint_new(source.map(|p| p.as_ref()).to_glib_none().0, axis.into_glib(), factor)).unsafe_cast()
        }
    }

    /// Retrieves the value set using [`set_align_axis()`][Self::set_align_axis()]
    ///
    /// # Returns
    ///
    /// the alignment axis
    #[doc(alias = "clutter_align_constraint_get_align_axis")]
    #[doc(alias = "get_align_axis")]
    pub fn align_axis(&self) -> AlignAxis {
        unsafe {
            from_glib(ffi::clutter_align_constraint_get_align_axis(self.to_glib_none().0))
        }
    }

    /// Retrieves the factor set using [`set_factor()`][Self::set_factor()]
    ///
    /// # Returns
    ///
    /// the alignment factor
    #[doc(alias = "clutter_align_constraint_get_factor")]
    #[doc(alias = "get_factor")]
    pub fn factor(&self) -> f32 {
        unsafe {
            ffi::clutter_align_constraint_get_factor(self.to_glib_none().0)
        }
    }

    //#[doc(alias = "clutter_align_constraint_get_pivot_point")]
    //#[doc(alias = "get_pivot_point")]
    //pub fn pivot_point(&self, pivot_point: /*Ignored*/graphene::Point) {
    //    unsafe { TODO: call ffi:clutter_align_constraint_get_pivot_point() }
    //}

    /// Retrieves the source of the alignment
    ///
    /// # Returns
    ///
    /// the [`Actor`][crate::Actor] used as the source
    ///  of the alignment
    #[doc(alias = "clutter_align_constraint_get_source")]
    #[doc(alias = "get_source")]
    pub fn source(&self) -> Option<Actor> {
        unsafe {
            from_glib_none(ffi::clutter_align_constraint_get_source(self.to_glib_none().0))
        }
    }

    /// Sets the axis to which the alignment refers to
    /// ## `axis`
    /// the axis to which the alignment refers to
    #[doc(alias = "clutter_align_constraint_set_align_axis")]
    pub fn set_align_axis(&self, axis: AlignAxis) {
        unsafe {
            ffi::clutter_align_constraint_set_align_axis(self.to_glib_none().0, axis.into_glib());
        }
    }

    /// Sets the alignment factor of the constraint
    ///
    /// The factor depends on the `property::AlignConstraint::align-axis` property
    /// and it is a value between 0.0 (meaning left, when
    /// `property::AlignConstraint::align-axis` is set to [`AlignAxis::XAxis`][crate::AlignAxis::XAxis]; or
    /// meaning top, when `property::AlignConstraint::align-axis` is set to
    /// [`AlignAxis::YAxis`][crate::AlignAxis::YAxis]) and 1.0 (meaning right, when
    /// `property::AlignConstraint::align-axis` is set to [`AlignAxis::XAxis`][crate::AlignAxis::XAxis]; or
    /// meaning bottom, when `property::AlignConstraint::align-axis` is set to
    /// [`AlignAxis::YAxis`][crate::AlignAxis::YAxis]). A value of 0.5 aligns in the middle in either
    /// cases
    /// ## `factor`
    /// the alignment factor, between 0.0 and 1.0
    #[doc(alias = "clutter_align_constraint_set_factor")]
    pub fn set_factor(&self, factor: f32) {
        unsafe {
            ffi::clutter_align_constraint_set_factor(self.to_glib_none().0, factor);
        }
    }

    //#[doc(alias = "clutter_align_constraint_set_pivot_point")]
    //pub fn set_pivot_point(&self, pivot_point: /*Ignored*/&graphene::Point) {
    //    unsafe { TODO: call ffi:clutter_align_constraint_set_pivot_point() }
    //}

    /// Sets the source of the alignment constraint
    /// ## `source`
    /// a [`Actor`][crate::Actor], or [`None`] to unset the source
    #[doc(alias = "clutter_align_constraint_set_source")]
    pub fn set_source<P: IsA<Actor>>(&self, source: Option<&P>) {
        unsafe {
            ffi::clutter_align_constraint_set_source(self.to_glib_none().0, source.map(|p| p.as_ref()).to_glib_none().0);
        }
    }

    //#[doc(alias = "pivot-point")]
    //pub fn get_property_pivot_point(&self) -> /*Ignored*/Option<graphene::Point> {
    //    unsafe {
    //        let mut value = glib::Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        glib::gobject_ffi::g_object_get_property(self.as_ptr() as *mut glib::gobject_ffi::GObject, b"pivot-point\0".as_ptr() as *const _, value.to_glib_none_mut().0);
    //        value.get().expect("Return Value for property `pivot-point` getter")
    //    }
    //}

    //#[doc(alias = "pivot-point")]
    //pub fn set_property_pivot_point(&self, pivot_point: /*Ignored*/Option<&graphene::Point>) {
    //    unsafe {
    //        glib::gobject_ffi::g_object_set_property(self.as_ptr() as *mut glib::gobject_ffi::GObject, b"pivot-point\0".as_ptr() as *const _, pivot_point.to_value().to_glib_none().0);
    //    }
    //}

    #[cfg(any(feature = "v1_4", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_4")))]
    #[doc(alias = "align-axis")]
    pub fn connect_align_axis_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_align_axis_trampoline<F: Fn(&AlignConstraint) + 'static>(this: *mut ffi::ClutterAlignConstraint, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::align-axis\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_align_axis_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v1_4", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_4")))]
    #[doc(alias = "factor")]
    pub fn connect_factor_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_factor_trampoline<F: Fn(&AlignConstraint) + 'static>(this: *mut ffi::ClutterAlignConstraint, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::factor\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_factor_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "pivot-point")]
    pub fn connect_pivot_point_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_pivot_point_trampoline<F: Fn(&AlignConstraint) + 'static>(this: *mut ffi::ClutterAlignConstraint, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::pivot-point\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_pivot_point_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v1_4", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_4")))]
    #[doc(alias = "source")]
    pub fn connect_source_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_source_trampoline<F: Fn(&AlignConstraint) + 'static>(this: *mut ffi::ClutterAlignConstraint, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::source\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_source_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for AlignConstraint {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("AlignConstraint")
    }
}
