// Generated by gir (https://github.com/gtk-rs/gir @ 5bbf6cb)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 8e47c67)
// from mutter-gir-files
// DO NOT EDIT

use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "ClutterScriptable")]
    pub struct Scriptable(Interface<ffi::ClutterScriptable, ffi::ClutterScriptableIface>);

    match fn {
        type_ => || ffi::clutter_scriptable_get_type(),
    }
}

pub const NONE_SCRIPTABLE: Option<&Scriptable> = None;

/// Trait containing all [`struct@Scriptable`] methods.
///
/// # Implementors
///
/// [`Actor`][struct@crate::Actor], [`Scriptable`][struct@crate::Scriptable], [`Stage`][struct@crate::Stage], [`Text`][struct@crate::Text]
pub trait ScriptableExt: 'static {
    /// Retrieves the id of `self` set using [`set_id()`][Self::set_id()].
    ///
    /// # Returns
    ///
    /// the id of the object. The returned string is owned by
    ///  the scriptable object and should never be modified of freed
    #[doc(alias = "clutter_scriptable_get_id")]
    #[doc(alias = "get_id")]
    fn id(&self) -> Option<glib::GString>;

    //#[doc(alias = "clutter_scriptable_parse_custom_node")]
    //fn parse_custom_node(&self, script: /*Ignored*/&Script, value: /*Ignored*/&mut glib::Value, name: &str, node: /*Ignored*/&json::Node) -> bool;

    //#[doc(alias = "clutter_scriptable_set_custom_property")]
    //fn set_custom_property(&self, script: /*Ignored*/&Script, name: &str, value: /*Ignored*/&glib::Value);

    /// Sets `id_` as the unique Clutter script it for this instance of
    /// `ClutterScriptableIface`.
    ///
    /// This name can be used by user interface designer applications to
    /// define a unique name for an object constructable using the UI
    /// definition language parsed by `ClutterScript`.
    /// ## `id_`
    /// the `ClutterScript` id of the object
    #[doc(alias = "clutter_scriptable_set_id")]
    fn set_id(&self, id_: &str);
}

impl<O: IsA<Scriptable>> ScriptableExt for O {
    fn id(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::clutter_scriptable_get_id(self.as_ref().to_glib_none().0))
        }
    }

    //fn parse_custom_node(&self, script: /*Ignored*/&Script, value: /*Ignored*/&mut glib::Value, name: &str, node: /*Ignored*/&json::Node) -> bool {
    //    unsafe { TODO: call ffi:clutter_scriptable_parse_custom_node() }
    //}

    //fn set_custom_property(&self, script: /*Ignored*/&Script, name: &str, value: /*Ignored*/&glib::Value) {
    //    unsafe { TODO: call ffi:clutter_scriptable_set_custom_property() }
    //}

    fn set_id(&self, id_: &str) {
        unsafe {
            ffi::clutter_scriptable_set_id(self.as_ref().to_glib_none().0, id_.to_glib_none().0);
        }
    }
}

impl fmt::Display for Scriptable {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Scriptable")
    }
}
