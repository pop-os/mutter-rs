// Generated by gir (https://github.com/gtk-rs/gir @ 45cd7bc)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 8e47c67)
// from mutter-gir-files
// DO NOT EDIT

use crate::Actor;
use crate::Animatable;
use crate::Container;
use crate::Scriptable;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "ClutterClone")]
    pub struct Clone(Object<ffi::ClutterClone, ffi::ClutterCloneClass>) @extends Actor, @implements Animatable, Container, Scriptable;

    match fn {
        type_ => || ffi::clutter_clone_get_type(),
    }
}

impl Clone {
    /// Creates a new [`Actor`][crate::Actor] which clones `source`/
    /// ## `source`
    /// a [`Actor`][crate::Actor], or [`None`]
    ///
    /// # Returns
    ///
    /// the newly created [`Clone`][crate::Clone]
    #[doc(alias = "clutter_clone_new")]
    pub fn new<P: IsA<Actor>>(source: &P) -> Clone {
        unsafe {
            Actor::from_glib_none(ffi::clutter_clone_new(source.as_ref().to_glib_none().0)).unsafe_cast()
        }
    }
}

pub const NONE_CLONE: Option<&Clone> = None;

/// Trait containing all [`struct@Clone`] methods.
///
/// # Implementors
///
/// [`Clone`][struct@crate::Clone]
pub trait CloneExt: 'static {
    /// Retrieves the source [`Actor`][crate::Actor] being cloned by `self`.
    ///
    /// # Returns
    ///
    /// the actor source for the clone
    #[doc(alias = "clutter_clone_get_source")]
    #[doc(alias = "get_source")]
    fn source(&self) -> Option<Actor>;

    /// Sets `source` as the source actor to be cloned by `self`.
    /// ## `source`
    /// a [`Actor`][crate::Actor], or [`None`]
    #[doc(alias = "clutter_clone_set_source")]
    fn set_source<P: IsA<Actor>>(&self, source: Option<&P>);

    #[cfg(any(feature = "v1_0", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_0")))]
    #[doc(alias = "source")]
    fn connect_source_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Clone>> CloneExt for O {
    fn source(&self) -> Option<Actor> {
        unsafe {
            from_glib_none(ffi::clutter_clone_get_source(self.as_ref().to_glib_none().0))
        }
    }

    fn set_source<P: IsA<Actor>>(&self, source: Option<&P>) {
        unsafe {
            ffi::clutter_clone_set_source(self.as_ref().to_glib_none().0, source.map(|p| p.as_ref()).to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v1_0", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_0")))]
    fn connect_source_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_source_trampoline<P: IsA<Clone>, F: Fn(&P) + 'static>(this: *mut ffi::ClutterClone, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Clone::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::source\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_source_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Clone {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Clone")
    }
}
