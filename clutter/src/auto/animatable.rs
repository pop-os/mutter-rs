// Generated by gir (https://github.com/gtk-rs/gir @ 45cd7bc)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 8e47c67)
// from mutter-gir-files
// DO NOT EDIT

use crate::Actor;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "ClutterAnimatable")]
    pub struct Animatable(Interface<ffi::ClutterAnimatable, ffi::ClutterAnimatableInterface>);

    match fn {
        type_ => || ffi::clutter_animatable_get_type(),
    }
}

pub const NONE_ANIMATABLE: Option<&Animatable> = None;

/// Trait containing all [`struct@Animatable`] methods.
///
/// # Implementors
///
/// [`Actor`][struct@crate::Actor], [`Animatable`][struct@crate::Animatable], [`Stage`][struct@crate::Stage], [`Text`][struct@crate::Text]
pub trait AnimatableExt: 'static {
    //#[cfg(any(feature = "v1_4", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_4")))]
    //#[doc(alias = "clutter_animatable_find_property")]
    //fn find_property(&self, property_name: &str) -> /*Ignored*/Option<glib::ParamSpec>;

    /// Get animated actor.
    ///
    /// # Returns
    ///
    /// a [`Actor`][crate::Actor]
    #[doc(alias = "clutter_animatable_get_actor")]
    #[doc(alias = "get_actor")]
    fn actor(&self) -> Option<Actor>;

    //#[cfg(any(feature = "v1_4", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_4")))]
    //#[doc(alias = "clutter_animatable_get_initial_state")]
    //#[doc(alias = "get_initial_state")]
    //fn initial_state(&self, property_name: &str, value: /*Ignored*/&mut glib::Value);

    //#[cfg(any(feature = "v1_8", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_8")))]
    //#[doc(alias = "clutter_animatable_interpolate_value")]
    //fn interpolate_value(&self, property_name: &str, interval: /*Ignored*/&Interval, progress: f64, value: /*Ignored*/glib::Value) -> bool;

    //#[cfg(any(feature = "v1_4", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_4")))]
    //#[doc(alias = "clutter_animatable_set_final_state")]
    //fn set_final_state(&self, property_name: &str, value: /*Ignored*/&glib::Value);
}

impl<O: IsA<Animatable>> AnimatableExt for O {
    //#[cfg(any(feature = "v1_4", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_4")))]
    //fn find_property(&self, property_name: &str) -> /*Ignored*/Option<glib::ParamSpec> {
    //    unsafe { TODO: call ffi:clutter_animatable_find_property() }
    //}

    fn actor(&self) -> Option<Actor> {
        unsafe {
            from_glib_none(ffi::clutter_animatable_get_actor(self.as_ref().to_glib_none().0))
        }
    }

    //#[cfg(any(feature = "v1_4", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_4")))]
    //fn initial_state(&self, property_name: &str, value: /*Ignored*/&mut glib::Value) {
    //    unsafe { TODO: call ffi:clutter_animatable_get_initial_state() }
    //}

    //#[cfg(any(feature = "v1_8", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_8")))]
    //fn interpolate_value(&self, property_name: &str, interval: /*Ignored*/&Interval, progress: f64, value: /*Ignored*/glib::Value) -> bool {
    //    unsafe { TODO: call ffi:clutter_animatable_interpolate_value() }
    //}

    //#[cfg(any(feature = "v1_4", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_4")))]
    //fn set_final_state(&self, property_name: &str, value: /*Ignored*/&glib::Value) {
    //    unsafe { TODO: call ffi:clutter_animatable_set_final_state() }
    //}
}

impl fmt::Display for Animatable {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Animatable")
    }
}
