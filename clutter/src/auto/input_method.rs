// Generated by gir (https://github.com/gtk-rs/gir @ b193568)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 8e47c67)
// from mutter-gir-files
// DO NOT EDIT

use crate::InputFocus;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::ToValue;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "ClutterInputMethod")]
    pub struct InputMethod(Object<ffi::ClutterInputMethod, ffi::ClutterInputMethodClass>);

    match fn {
        type_ => || ffi::clutter_input_method_get_type(),
    }
}

pub const NONE_INPUT_METHOD: Option<&InputMethod> = None;

/// Trait containing all [`struct@InputMethod`] methods.
///
/// # Implementors
///
/// [`InputMethod`][struct@crate::InputMethod]
pub trait InputMethodExt: 'static {
    #[doc(alias = "clutter_input_method_commit")]
    fn commit(&self, text: &str);

    #[doc(alias = "clutter_input_method_delete_surrounding")]
    fn delete_surrounding(&self, offset: i32, len: u32);

    #[doc(alias = "clutter_input_method_focus_in")]
    fn focus_in<P: IsA<InputFocus>>(&self, focus: &P);

    #[doc(alias = "clutter_input_method_focus_out")]
    fn focus_out(&self);

    #[doc(alias = "clutter_input_method_forward_key")]
    fn forward_key(&self, keyval: u32, keycode: u32, state: u32, time_: u64, press: bool);

    //#[doc(alias = "clutter_input_method_notify_key_event")]
    //fn notify_key_event(&self, event: /*Ignored*/&Event, filtered: bool);

    #[doc(alias = "clutter_input_method_request_surrounding")]
    fn request_surrounding(&self);

    //#[doc(alias = "clutter_input_method_set_input_panel_state")]
    //fn set_input_panel_state(&self, state: /*Ignored*/InputPanelState);

    /// Sets the preedit text on the current input focus.
    /// ## `preedit`
    /// the preedit text, or [`None`]
    /// ## `cursor`
    /// the cursor
    #[doc(alias = "clutter_input_method_set_preedit_text")]
    fn set_preedit_text(&self, preedit: Option<&str>, cursor: u32);

    #[doc(alias = "can-show-preedit")]
    fn can_show_preedit(&self) -> bool;

    #[doc(alias = "can-show-preedit")]
    fn set_can_show_preedit(&self, can_show_preedit: bool);

    //#[doc(alias = "content-hints")]
    //fn content_hints(&self) -> /*Ignored*/InputContentHintFlags;

    //#[doc(alias = "content-hints")]
    //fn set_content_hints(&self, content_hints: /*Ignored*/InputContentHintFlags);

    //#[doc(alias = "content-purpose")]
    //fn content_purpose(&self) -> /*Ignored*/InputContentPurpose;

    //#[doc(alias = "content-purpose")]
    //fn set_content_purpose(&self, content_purpose: /*Ignored*/InputContentPurpose);

    #[doc(alias = "commit")]
    fn connect_commit<F: Fn(&Self, &str) + 'static>(&self, f: F) -> SignalHandlerId;

    //#[doc(alias = "cursor-location-changed")]
    //fn connect_cursor_location_changed<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "delete-surrounding")]
    fn connect_delete_surrounding<F: Fn(&Self, i32, u32) + 'static>(&self, f: F) -> SignalHandlerId;

    //#[doc(alias = "input-panel-state")]
    //fn connect_input_panel_state<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "request-surrounding")]
    fn connect_request_surrounding<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "can-show-preedit")]
    fn connect_can_show_preedit_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "content-hints")]
    fn connect_content_hints_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "content-purpose")]
    fn connect_content_purpose_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<InputMethod>> InputMethodExt for O {
    fn commit(&self, text: &str) {
        unsafe {
            ffi::clutter_input_method_commit(self.as_ref().to_glib_none().0, text.to_glib_none().0);
        }
    }

    fn delete_surrounding(&self, offset: i32, len: u32) {
        unsafe {
            ffi::clutter_input_method_delete_surrounding(self.as_ref().to_glib_none().0, offset, len);
        }
    }

    fn focus_in<P: IsA<InputFocus>>(&self, focus: &P) {
        unsafe {
            ffi::clutter_input_method_focus_in(self.as_ref().to_glib_none().0, focus.as_ref().to_glib_none().0);
        }
    }

    fn focus_out(&self) {
        unsafe {
            ffi::clutter_input_method_focus_out(self.as_ref().to_glib_none().0);
        }
    }

    fn forward_key(&self, keyval: u32, keycode: u32, state: u32, time_: u64, press: bool) {
        unsafe {
            ffi::clutter_input_method_forward_key(self.as_ref().to_glib_none().0, keyval, keycode, state, time_, press.into_glib());
        }
    }

    //fn notify_key_event(&self, event: /*Ignored*/&Event, filtered: bool) {
    //    unsafe { TODO: call ffi:clutter_input_method_notify_key_event() }
    //}

    fn request_surrounding(&self) {
        unsafe {
            ffi::clutter_input_method_request_surrounding(self.as_ref().to_glib_none().0);
        }
    }

    //fn set_input_panel_state(&self, state: /*Ignored*/InputPanelState) {
    //    unsafe { TODO: call ffi:clutter_input_method_set_input_panel_state() }
    //}

    fn set_preedit_text(&self, preedit: Option<&str>, cursor: u32) {
        unsafe {
            ffi::clutter_input_method_set_preedit_text(self.as_ref().to_glib_none().0, preedit.to_glib_none().0, cursor);
        }
    }

    fn can_show_preedit(&self) -> bool {
        unsafe {
            let mut value = glib::Value::from_type(<bool as StaticType>::static_type());
            glib::gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"can-show-preedit\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `can-show-preedit` getter")
        }
    }

    fn set_can_show_preedit(&self, can_show_preedit: bool) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"can-show-preedit\0".as_ptr() as *const _, can_show_preedit.to_value().to_glib_none().0);
        }
    }

    //fn content_hints(&self) -> /*Ignored*/InputContentHintFlags {
    //    unsafe {
    //        let mut value = glib::Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        glib::gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"content-hints\0".as_ptr() as *const _, value.to_glib_none_mut().0);
    //        value.get().expect("Return Value for property `content-hints` getter")
    //    }
    //}

    //fn set_content_hints(&self, content_hints: /*Ignored*/InputContentHintFlags) {
    //    unsafe {
    //        glib::gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"content-hints\0".as_ptr() as *const _, content_hints.to_value().to_glib_none().0);
    //    }
    //}

    //fn content_purpose(&self) -> /*Ignored*/InputContentPurpose {
    //    unsafe {
    //        let mut value = glib::Value::from_type(</*Unknown type*/ as StaticType>::static_type());
    //        glib::gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"content-purpose\0".as_ptr() as *const _, value.to_glib_none_mut().0);
    //        value.get().expect("Return Value for property `content-purpose` getter")
    //    }
    //}

    //fn set_content_purpose(&self, content_purpose: /*Ignored*/InputContentPurpose) {
    //    unsafe {
    //        glib::gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"content-purpose\0".as_ptr() as *const _, content_purpose.to_value().to_glib_none().0);
    //    }
    //}

    fn connect_commit<F: Fn(&Self, &str) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn commit_trampoline<P: IsA<InputMethod>, F: Fn(&P, &str) + 'static>(this: *mut ffi::ClutterInputMethod, object: *mut libc::c_char, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(InputMethod::from_glib_borrow(this).unsafe_cast_ref(), &glib::GString::from_glib_borrow(object))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"commit\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(commit_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    //fn connect_cursor_location_changed<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored object: Graphene.Rect
    //}

    fn connect_delete_surrounding<F: Fn(&Self, i32, u32) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn delete_surrounding_trampoline<P: IsA<InputMethod>, F: Fn(&P, i32, u32) + 'static>(this: *mut ffi::ClutterInputMethod, object: libc::c_int, p0: libc::c_uint, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(InputMethod::from_glib_borrow(this).unsafe_cast_ref(), object, p0)
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"delete-surrounding\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(delete_surrounding_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    //fn connect_input_panel_state<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored object: Clutter.InputPanelState
    //}

    fn connect_request_surrounding<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn request_surrounding_trampoline<P: IsA<InputMethod>, F: Fn(&P) + 'static>(this: *mut ffi::ClutterInputMethod, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(InputMethod::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"request-surrounding\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(request_surrounding_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_can_show_preedit_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_can_show_preedit_trampoline<P: IsA<InputMethod>, F: Fn(&P) + 'static>(this: *mut ffi::ClutterInputMethod, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(InputMethod::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::can-show-preedit\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_can_show_preedit_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_content_hints_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_content_hints_trampoline<P: IsA<InputMethod>, F: Fn(&P) + 'static>(this: *mut ffi::ClutterInputMethod, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(InputMethod::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::content-hints\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_content_hints_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_content_purpose_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_content_purpose_trampoline<P: IsA<InputMethod>, F: Fn(&P) + 'static>(this: *mut ffi::ClutterInputMethod, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(InputMethod::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::content-purpose\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_content_purpose_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for InputMethod {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("InputMethod")
    }
}
