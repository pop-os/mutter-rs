// Generated by gir (https://github.com/gtk-rs/gir @ 5bbf6cb)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 8e47c67)
// from mutter-gir-files
// DO NOT EDIT

use bitflags::bitflags;
use glib::translate::*;
use glib::value::FromValue;
use glib::value::ToValue;
use glib::StaticType;
use glib::Type;
use std::fmt;

bitflags! {
    #[doc(alias = "ClutterActorFlags")]
    pub struct ActorFlags: u32 {
        #[doc(alias = "CLUTTER_ACTOR_MAPPED")]
        const MAPPED = ffi::CLUTTER_ACTOR_MAPPED as u32;
        #[doc(alias = "CLUTTER_ACTOR_REALIZED")]
        const REALIZED = ffi::CLUTTER_ACTOR_REALIZED as u32;
        #[doc(alias = "CLUTTER_ACTOR_REACTIVE")]
        const REACTIVE = ffi::CLUTTER_ACTOR_REACTIVE as u32;
        #[doc(alias = "CLUTTER_ACTOR_VISIBLE")]
        const VISIBLE = ffi::CLUTTER_ACTOR_VISIBLE as u32;
        #[doc(alias = "CLUTTER_ACTOR_NO_LAYOUT")]
        const NO_LAYOUT = ffi::CLUTTER_ACTOR_NO_LAYOUT as u32;
    }
}

impl fmt::Display for ActorFlags {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        <Self as fmt::Debug>::fmt(self, f)
    }
}

#[doc(hidden)]
impl IntoGlib for ActorFlags {
    type GlibType = ffi::ClutterActorFlags;

    fn into_glib(self) -> ffi::ClutterActorFlags {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::ClutterActorFlags> for ActorFlags {
    unsafe fn from_glib(value: ffi::ClutterActorFlags) -> Self {
        Self::from_bits_truncate(value)
    }
}

impl StaticType for ActorFlags {
    fn static_type() -> Type {
        unsafe { from_glib(ffi::clutter_actor_flags_get_type()) }
    }
}

impl glib::value::ValueType for ActorFlags {
    type Type = Self;
}

unsafe impl<'a> FromValue<'a> for ActorFlags {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    unsafe fn from_value(value: &'a glib::Value) -> Self {
        from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0))
    }
}

impl ToValue for ActorFlags {
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

