// Generated by gir (https://github.com/gtk-rs/gir @ 5bbf6cb)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 8e47c67)
// from mutter-gir-files
// DO NOT EDIT

use crate::InputMethod;
use glib::object::IsA;
#[cfg(any(feature = "v1_0", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_0")))]
use glib::object::ObjectType as ObjectType_;
#[cfg(any(feature = "v1_0", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_0")))]
use glib::signal::connect_raw;
#[cfg(any(feature = "v1_0", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_0")))]
use glib::signal::SignalHandlerId;
use glib::translate::*;
#[cfg(any(feature = "v1_0", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_0")))]
use std::boxed::Box as Box_;
use std::fmt;
#[cfg(any(feature = "v1_0", feature = "dox"))]
#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_0")))]
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "ClutterBackend")]
    pub struct Backend(Object<ffi::ClutterBackend, ffi::ClutterBackendClass>);

    match fn {
        type_ => || ffi::clutter_backend_get_type(),
    }
}

impl Backend {
    //#[cfg(any(feature = "v1_8", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_8")))]
    //#[doc(alias = "clutter_backend_get_cogl_context")]
    //#[doc(alias = "get_cogl_context")]
    //pub fn cogl_context(&self) -> /*Ignored*/Option<cogl::Context> {
    //    unsafe { TODO: call ffi:clutter_backend_get_cogl_context() }
    //}

    //#[doc(alias = "clutter_backend_get_default_seat")]
    //#[doc(alias = "get_default_seat")]
    //pub fn default_seat(&self) -> /*Ignored*/Option<Seat> {
    //    unsafe { TODO: call ffi:clutter_backend_get_default_seat() }
    //}

    //#[cfg(any(feature = "v0_8", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v0_8")))]
    //#[doc(alias = "clutter_backend_get_font_options")]
    //#[doc(alias = "get_font_options")]
    //pub fn font_options(&self) -> /*Ignored*/Option<cairo::FontOptions> {
    //    unsafe { TODO: call ffi:clutter_backend_get_font_options() }
    //}

    /// Returns the input method used by Clutter
    ///
    /// # Returns
    ///
    /// the input method
    #[doc(alias = "clutter_backend_get_input_method")]
    #[doc(alias = "get_input_method")]
    pub fn input_method(&self) -> Option<InputMethod> {
        unsafe {
            from_glib_none(ffi::clutter_backend_get_input_method(self.to_glib_none().0))
        }
    }

    /// Gets the resolution for font handling on the screen.
    ///
    /// The resolution is a scale factor between points specified in a
    /// `PangoFontDescription` and cairo units. The default value is 96.0,
    /// meaning that a 10 point font will be 13 units
    /// high (10 * 96. / 72. = 13.3).
    ///
    /// Clutter will set the resolution using the current backend when
    /// initializing; the resolution is also stored in the
    /// `ClutterSettings:font-dpi` property.
    ///
    /// # Returns
    ///
    /// the current resolution, or -1 if no resolution
    ///  has been set.
    #[doc(alias = "clutter_backend_get_resolution")]
    #[doc(alias = "get_resolution")]
    pub fn resolution(&self) -> f64 {
        unsafe {
            ffi::clutter_backend_get_resolution(self.to_glib_none().0)
        }
    }

    //#[cfg(any(feature = "v0_8", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v0_8")))]
    //#[doc(alias = "clutter_backend_set_font_options")]
    //pub fn set_font_options(&self, options: /*Ignored*/&cairo::FontOptions) {
    //    unsafe { TODO: call ffi:clutter_backend_set_font_options() }
    //}

    /// Sets the input method to be used by Clutter
    /// ## `method`
    /// the input method
    #[doc(alias = "clutter_backend_set_input_method")]
    pub fn set_input_method<P: IsA<InputMethod>>(&self, method: &P) {
        unsafe {
            ffi::clutter_backend_set_input_method(self.to_glib_none().0, method.as_ref().to_glib_none().0);
        }
    }

    /// The ::font-changed signal is emitted each time the font options
    /// have been changed through `ClutterSettings`.
    #[cfg(any(feature = "v1_0", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_0")))]
    #[doc(alias = "font-changed")]
    pub fn connect_font_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn font_changed_trampoline<F: Fn(&Backend) + 'static>(this: *mut ffi::ClutterBackend, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"font-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(font_changed_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    /// The ::resolution-changed signal is emitted each time the font
    /// resolutions has been changed through `ClutterSettings`.
    #[cfg(any(feature = "v1_0", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_0")))]
    #[doc(alias = "resolution-changed")]
    pub fn connect_resolution_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn resolution_changed_trampoline<F: Fn(&Backend) + 'static>(this: *mut ffi::ClutterBackend, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"resolution-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(resolution_changed_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    /// The ::settings-changed signal is emitted each time the `ClutterSettings`
    /// properties have been changed.
    #[cfg(any(feature = "v1_4", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_4")))]
    #[doc(alias = "settings-changed")]
    pub fn connect_settings_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn settings_changed_trampoline<F: Fn(&Backend) + 'static>(this: *mut ffi::ClutterBackend, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"settings-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(settings_changed_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Backend {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Backend")
    }
}
