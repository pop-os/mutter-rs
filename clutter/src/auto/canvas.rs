// Generated by gir (https://github.com/gtk-rs/gir @ 45cd7bc)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 8e47c67)
// from mutter-gir-files
// DO NOT EDIT

use crate::Content;
use glib::object::Cast;
use glib::object::IsA;
use glib::signal::connect_raw;
use glib::signal::SignalHandlerId;
use glib::translate::*;
use glib::StaticType;
use glib::ToValue;
use std::boxed::Box as Box_;
use std::fmt;
use std::mem::transmute;

glib::wrapper! {
    #[doc(alias = "ClutterCanvas")]
    pub struct Canvas(Object<ffi::ClutterCanvas, ffi::ClutterCanvasClass>) @implements Content;

    match fn {
        type_ => || ffi::clutter_canvas_get_type(),
    }
}

impl Canvas {
    /// Creates a new instance of [`Canvas`][crate::Canvas].
    ///
    /// You should call [`CanvasExt::set_size()`][crate::prelude::CanvasExt::set_size()] to set the size of the canvas.
    ///
    /// You should call [`ContentExt::invalidate()`][crate::prelude::ContentExt::invalidate()] every time you wish to
    /// draw the contents of the canvas.
    ///
    /// # Returns
    ///
    /// The newly allocated instance of
    ///  [`Canvas`][crate::Canvas]. Use `g_object_unref()` when done.
    #[doc(alias = "clutter_canvas_new")]
    pub fn new() -> Option<Content> {
        unsafe {
            from_glib_full(ffi::clutter_canvas_new())
        }
    }
}

pub const NONE_CANVAS: Option<&Canvas> = None;

/// Trait containing all [`struct@Canvas`] methods.
///
/// # Implementors
///
/// [`Canvas`][struct@crate::Canvas]
pub trait CanvasExt: 'static {
    /// Gets the scale factor of the `self`.
    ///
    /// # Returns
    ///
    /// the current `self` scale factor or -1 if invalid
    #[doc(alias = "clutter_canvas_get_scale_factor")]
    #[doc(alias = "get_scale_factor")]
    fn scale_factor(&self) -> f32;

    /// Sets the scaling factor of the `self`, and invalidates the content.
    ///
    /// This function will cause the `self` to be invalidated only
    /// if the scale factor of the canvas surface has changed.
    /// ## `scale`
    /// the integer scaling factor of the canvas
    #[doc(alias = "clutter_canvas_set_scale_factor")]
    fn set_scale_factor(&self, scale: f32);

    /// Sets the size of the `self`, and invalidates the content.
    ///
    /// This function will cause the `self` to be invalidated only
    /// if the size of the canvas surface has changed.
    ///
    /// If you want to invalidate the contents of the `self` when setting
    /// the size, you can use the return value of the function to conditionally
    /// call [`ContentExt::invalidate()`][crate::prelude::ContentExt::invalidate()]:
    ///
    ///
    /// ```text
    ///   if (!clutter_canvas_set_size (canvas, width, height))
    ///     clutter_content_invalidate (CLUTTER_CONTENT (canvas));
    /// ```
    /// ## `width`
    /// the width of the canvas, in pixels
    /// ## `height`
    /// the height of the canvas, in pixels
    ///
    /// # Returns
    ///
    /// this function returns [`true`] if the size change
    ///  caused a content invalidation, and [`false`] otherwise
    #[doc(alias = "clutter_canvas_set_size")]
    fn set_size(&self, width: i32, height: i32) -> bool;

    /// The height of the canvas.
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    fn height(&self) -> i32;

    /// The height of the canvas.
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    fn set_height(&self, height: i32);

    /// The height of the canvas.
    #[doc(alias = "scale-factor")]
    fn get_property_scale_factor(&self) -> f32;

    /// The height of the canvas.
    #[doc(alias = "scale-factor")]
    fn set_property_scale_factor(&self, scale_factor: f32);

    /// The width of the canvas.
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    fn width(&self) -> i32;

    /// The width of the canvas.
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    fn set_width(&self, width: i32);

    /// The `signal::Canvas::draw` signal is emitted each time a canvas is
    /// invalidated.
    ///
    /// It is safe to connect multiple handlers to this signal: each
    /// handler invocation will be automatically protected by `cairo_save()`
    /// and `cairo_restore()` pairs.
    /// ## `cr`
    /// the Cairo context used to draw
    /// ## `width`
    /// the width of the `canvas`
    /// ## `height`
    /// the height of the `canvas`
    ///
    /// # Returns
    ///
    /// [`true`] if the signal emission should stop, and
    ///  [`false`] otherwise
    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    #[doc(alias = "draw")]
    fn connect_draw<F: Fn(&Self, &cairo::Context, i32, i32) -> bool + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    #[doc(alias = "height")]
    fn connect_height_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[doc(alias = "scale-factor")]
    fn connect_scale_factor_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    #[doc(alias = "width")]
    fn connect_width_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId;
}

impl<O: IsA<Canvas>> CanvasExt for O {
    fn scale_factor(&self) -> f32 {
        unsafe {
            ffi::clutter_canvas_get_scale_factor(self.as_ref().to_glib_none().0)
        }
    }

    fn set_scale_factor(&self, scale: f32) {
        unsafe {
            ffi::clutter_canvas_set_scale_factor(self.as_ref().to_glib_none().0, scale);
        }
    }

    fn set_size(&self, width: i32, height: i32) -> bool {
        unsafe {
            from_glib(ffi::clutter_canvas_set_size(self.as_ref().to_glib_none().0, width, height))
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    fn height(&self) -> i32 {
        unsafe {
            let mut value = glib::Value::from_type(<i32 as StaticType>::static_type());
            glib::gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"height\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `height` getter")
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    fn set_height(&self, height: i32) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"height\0".as_ptr() as *const _, height.to_value().to_glib_none().0);
        }
    }

    fn get_property_scale_factor(&self) -> f32 {
        unsafe {
            let mut value = glib::Value::from_type(<f32 as StaticType>::static_type());
            glib::gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"scale-factor\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `scale-factor` getter")
        }
    }

    fn set_property_scale_factor(&self, scale_factor: f32) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"scale-factor\0".as_ptr() as *const _, scale_factor.to_value().to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    fn width(&self) -> i32 {
        unsafe {
            let mut value = glib::Value::from_type(<i32 as StaticType>::static_type());
            glib::gobject_ffi::g_object_get_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"width\0".as_ptr() as *const _, value.to_glib_none_mut().0);
            value.get().expect("Return Value for property `width` getter")
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    fn set_width(&self, width: i32) {
        unsafe {
            glib::gobject_ffi::g_object_set_property(self.to_glib_none().0 as *mut glib::gobject_ffi::GObject, b"width\0".as_ptr() as *const _, width.to_value().to_glib_none().0);
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    fn connect_draw<F: Fn(&Self, &cairo::Context, i32, i32) -> bool + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn draw_trampoline<P: IsA<Canvas>, F: Fn(&P, &cairo::Context, i32, i32) -> bool + 'static>(this: *mut ffi::ClutterCanvas, cr: *mut cairo::ffi::cairo_t, width: libc::c_int, height: libc::c_int, f: glib::ffi::gpointer) -> glib::ffi::gboolean {
            let f: &F = &*(f as *const F);
            f(Canvas::from_glib_borrow(this).unsafe_cast_ref(), &from_glib_borrow(cr), width, height).into_glib()
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"draw\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(draw_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    fn connect_height_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_height_trampoline<P: IsA<Canvas>, F: Fn(&P) + 'static>(this: *mut ffi::ClutterCanvas, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Canvas::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::height\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_height_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    fn connect_scale_factor_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_scale_factor_trampoline<P: IsA<Canvas>, F: Fn(&P) + 'static>(this: *mut ffi::ClutterCanvas, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Canvas::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::scale-factor\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_scale_factor_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }

    #[cfg(any(feature = "v1_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_10")))]
    fn connect_width_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_width_trampoline<P: IsA<Canvas>, F: Fn(&P) + 'static>(this: *mut ffi::ClutterCanvas, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Canvas::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::width\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(notify_width_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl fmt::Display for Canvas {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Canvas")
    }
}
