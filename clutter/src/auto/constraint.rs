// Generated by gir (https://github.com/gtk-rs/gir @ 45cd7bc)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 8e47c67)
// from mutter-gir-files
// DO NOT EDIT

use crate::Actor;
use crate::ActorMeta;
use crate::Orientation;
use glib::object::IsA;
use glib::translate::*;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "ClutterConstraint")]
    pub struct Constraint(Object<ffi::ClutterConstraint, ffi::ClutterConstraintClass>) @extends ActorMeta;

    match fn {
        type_ => || ffi::clutter_constraint_get_type(),
    }
}

pub const NONE_CONSTRAINT: Option<&Constraint> = None;

/// Trait containing all [`struct@Constraint`] methods.
///
/// # Implementors
///
/// [`Constraint`][struct@crate::Constraint]
pub trait ConstraintExt: 'static {
    /// Asks the `self` to update the size request of a [`Actor`][crate::Actor].
    /// ## `actor`
    /// a [`Actor`][crate::Actor]
    /// ## `direction`
    /// a [`Orientation`][crate::Orientation]
    /// ## `for_size`
    /// the size in the opposite direction
    /// ## `minimum_size`
    /// the minimum size to modify
    /// ## `natural_size`
    /// the natural size to modify
    #[doc(alias = "clutter_constraint_update_preferred_size")]
    fn update_preferred_size<P: IsA<Actor>>(&self, actor: &P, direction: Orientation, for_size: f32, minimum_size: &mut f32, natural_size: &mut f32);
}

impl<O: IsA<Constraint>> ConstraintExt for O {
    fn update_preferred_size<P: IsA<Actor>>(&self, actor: &P, direction: Orientation, for_size: f32, minimum_size: &mut f32, natural_size: &mut f32) {
        unsafe {
            ffi::clutter_constraint_update_preferred_size(self.as_ref().to_glib_none().0, actor.as_ref().to_glib_none().0, direction.into_glib(), for_size, minimum_size, natural_size);
        }
    }
}

impl fmt::Display for Constraint {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Constraint")
    }
}
