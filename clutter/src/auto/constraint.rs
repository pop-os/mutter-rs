// Generated by gir (https://github.com/gtk-rs/gir @ b193568)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 8e47c67)
// from mutter-gir-files
// DO NOT EDIT

use crate::ActorMeta;
use glib::object::IsA;
use std::fmt;

glib::wrapper! {
    #[doc(alias = "ClutterConstraint")]
    pub struct Constraint(Object<ffi::ClutterConstraint, ffi::ClutterConstraintClass>) @extends ActorMeta;

    match fn {
        type_ => || ffi::clutter_constraint_get_type(),
    }
}

pub const NONE_CONSTRAINT: Option<&Constraint> = None;

/// Trait containing all [`struct@Constraint`] methods.
///
/// # Implementors
///
/// [`Constraint`][struct@crate::Constraint]
pub trait ConstraintExt: 'static {
    //#[cfg(any(feature = "v1_12", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_12")))]
    //#[doc(alias = "clutter_constraint_update_preferred_size")]
    //fn update_preferred_size<P: IsA<Actor>>(&self, actor: &P, direction: /*Ignored*/Orientation, for_size: f32, minimum_size: &mut f32, natural_size: &mut f32);
}

impl<O: IsA<Constraint>> ConstraintExt for O {
    //#[cfg(any(feature = "v1_12", feature = "dox"))]
    //#[cfg_attr(feature = "dox", doc(cfg(feature = "v1_12")))]
    //fn update_preferred_size<P: IsA<Actor>>(&self, actor: &P, direction: /*Ignored*/Orientation, for_size: f32, minimum_size: &mut f32, natural_size: &mut f32) {
    //    unsafe { TODO: call ffi:clutter_constraint_update_preferred_size() }
    //}
}

impl fmt::Display for Constraint {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Constraint")
    }
}
