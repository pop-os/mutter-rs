// Generated by gir (https://github.com/gtk-rs/gir @ 5bbf6cb)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 8e47c67)
// from mutter-gir-files
// DO NOT EDIT

use cogl_sys::*;
use std::mem::{align_of, size_of};
use std::env;
use std::error::Error;
use std::ffi::OsString;
use std::path::Path;
use std::process::Command;
use std::str;
use tempfile::Builder;

static PACKAGES: &[&str] = &["mutter-cogl-8"];

#[derive(Clone, Debug)]
struct Compiler {
    pub args: Vec<String>,
}

impl Compiler {
    pub fn new() -> Result<Self, Box<dyn Error>> {
        let mut args = get_var("CC", "cc")?;
        args.push("-Wno-deprecated-declarations".to_owned());
        // For _Generic
        args.push("-std=c11".to_owned());
        // For %z support in printf when using MinGW.
        args.push("-D__USE_MINGW_ANSI_STDIO".to_owned());
        args.extend(get_var("CFLAGS", "")?);
        args.extend(get_var("CPPFLAGS", "")?);
        args.extend(pkg_config_cflags(PACKAGES)?);
        Ok(Self { args })
    }

    pub fn compile(&self, src: &Path, out: &Path) -> Result<(), Box<dyn Error>> {
        let mut cmd = self.to_command();
        cmd.arg(src);
        cmd.arg("-o");
        cmd.arg(out);
        let status = cmd.spawn()?.wait()?;
        if !status.success() {
            return Err(format!("compilation command {:?} failed, {}", &cmd, status).into());
        }
        Ok(())
    }

    fn to_command(&self) -> Command {
        let mut cmd = Command::new(&self.args[0]);
        cmd.args(&self.args[1..]);
        cmd
    }
}

fn get_var(name: &str, default: &str) -> Result<Vec<String>, Box<dyn Error>> {
    match env::var(name) {
        Ok(value) => Ok(shell_words::split(&value)?),
        Err(env::VarError::NotPresent) => Ok(shell_words::split(default)?),
        Err(err) => Err(format!("{} {}", name, err).into()),
    }
}

fn pkg_config_cflags(packages: &[&str]) -> Result<Vec<String>, Box<dyn Error>> {
    if packages.is_empty() {
        return Ok(Vec::new());
    }
    let pkg_config = env::var_os("PKG_CONFIG")
        .unwrap_or_else(|| OsString::from("pkg-config"));
    let mut cmd = Command::new(pkg_config);
    cmd.arg("--cflags");
    cmd.args(packages);
    let out = cmd.output()?;
    if !out.status.success() {
        return Err(format!("command {:?} returned {}",
                           &cmd, out.status).into());
    }
    let stdout = str::from_utf8(&out.stdout)?;
    Ok(shell_words::split(stdout.trim())?)
}


#[derive(Copy, Clone, Debug, Eq, PartialEq)]
struct Layout {
    size: usize,
    alignment: usize,
}

#[derive(Copy, Clone, Debug, Default, Eq, PartialEq)]
struct Results {
    /// Number of successfully completed tests.
    passed: usize,
    /// Total number of failed tests (including those that failed to compile).
    failed: usize,
}

impl Results {
    fn record_passed(&mut self) {
        self.passed += 1;
    }
    fn record_failed(&mut self) {
        self.failed += 1;
    }
    fn summary(&self) -> String {
        format!("{} passed; {} failed", self.passed, self.failed)
    }
    fn expect_total_success(&self) {
        if self.failed == 0 {
            println!("OK: {}", self.summary());
        } else {
            panic!("FAILED: {}", self.summary());
        };
    }
}

#[test]
fn cross_validate_constants_with_c() {
    let mut c_constants: Vec<(String, String)> = Vec::new();

    for l in get_c_output("constant").unwrap().lines() {
        let mut words = l.trim().split(';');
        let name = words.next().expect("Failed to parse name").to_owned();
        let value = words
            .next()
            .and_then(|s| s.parse().ok())
            .expect("Failed to parse value");
        c_constants.push((name, value));
    }

    let mut results = Results::default();

    for ((rust_name, rust_value), (c_name, c_value)) in
        RUST_CONSTANTS.iter().zip(c_constants.iter())
    {
        if rust_name != c_name {
            results.record_failed();
            eprintln!("Name mismatch:\nRust: {:?}\nC:    {:?}", rust_name, c_name,);
            continue;
        }

        if rust_value != c_value {
            results.record_failed();
            eprintln!(
                "Constant value mismatch for {}\nRust: {:?}\nC:    {:?}",
                rust_name, rust_value, &c_value
            );
            continue;
        }

        results.record_passed();
    }

    results.expect_total_success();
}

#[test]
fn cross_validate_layout_with_c() {
    let mut c_layouts = Vec::new();

    for l in get_c_output("layout").unwrap().lines() {
        let mut words = l.trim().split(';');
        let name = words.next().expect("Failed to parse name").to_owned();
        let size = words
            .next()
            .and_then(|s| s.parse().ok())
            .expect("Failed to parse size");
        let alignment = words
            .next()
            .and_then(|s| s.parse().ok())
            .expect("Failed to parse alignment");
        c_layouts.push((name, Layout { size, alignment }));
    }

    let mut results = Results::default();

    for ((rust_name, rust_layout), (c_name, c_layout)) in
        RUST_LAYOUTS.iter().zip(c_layouts.iter())
    {
        if rust_name != c_name {
            results.record_failed();
            eprintln!("Name mismatch:\nRust: {:?}\nC:    {:?}", rust_name, c_name,);
            continue;
        }

        if rust_layout != c_layout {
            results.record_failed();
            eprintln!(
                "Layout mismatch for {}\nRust: {:?}\nC:    {:?}",
                rust_name, rust_layout, &c_layout
            );
            continue;
        }

        results.record_passed();
    }

    results.expect_total_success();
}

fn get_c_output(name: &str) -> Result<String, Box<dyn Error>> {
    let tmpdir = Builder::new().prefix("abi").tempdir()?;
    let exe = tmpdir.path().join(name);
    let c_file = Path::new("tests").join(name).with_extension("c");

    let cc = Compiler::new().expect("configured compiler");
    cc.compile(&c_file, &exe)?;

    let mut abi_cmd = Command::new(exe);
    let output = abi_cmd.output()?;
    if !output.status.success() {
        return Err(format!("command {:?} failed, {:?}", &abi_cmd, &output).into());
    }

    Ok(String::from_utf8(output.stdout)?)
}

const RUST_LAYOUTS: &[(&str, Layout)] = &[
    ("CoglAngle", Layout {size: size_of::<CoglAngle>(), alignment: align_of::<CoglAngle>()}),
    ("CoglAttributeType", Layout {size: size_of::<CoglAttributeType>(), alignment: align_of::<CoglAttributeType>()}),
    ("CoglBitmapError", Layout {size: size_of::<CoglBitmapError>(), alignment: align_of::<CoglBitmapError>()}),
    ("CoglBlendStringError", Layout {size: size_of::<CoglBlendStringError>(), alignment: align_of::<CoglBlendStringError>()}),
    ("CoglBufferBit", Layout {size: size_of::<CoglBufferBit>(), alignment: align_of::<CoglBufferBit>()}),
    ("CoglBufferTarget", Layout {size: size_of::<CoglBufferTarget>(), alignment: align_of::<CoglBufferTarget>()}),
    ("CoglColor", Layout {size: size_of::<CoglColor>(), alignment: align_of::<CoglColor>()}),
    ("CoglDebugObjectTypeInfo", Layout {size: size_of::<CoglDebugObjectTypeInfo>(), alignment: align_of::<CoglDebugObjectTypeInfo>()}),
    ("CoglDepthTestFunction", Layout {size: size_of::<CoglDepthTestFunction>(), alignment: align_of::<CoglDepthTestFunction>()}),
    ("CoglEglImageFlags", Layout {size: size_of::<CoglEglImageFlags>(), alignment: align_of::<CoglEglImageFlags>()}),
    ("CoglFeatureID", Layout {size: size_of::<CoglFeatureID>(), alignment: align_of::<CoglFeatureID>()}),
    ("CoglFilterReturn", Layout {size: size_of::<CoglFilterReturn>(), alignment: align_of::<CoglFilterReturn>()}),
    ("CoglFrameEvent", Layout {size: size_of::<CoglFrameEvent>(), alignment: align_of::<CoglFrameEvent>()}),
    ("CoglFramebuffer", Layout {size: size_of::<CoglFramebuffer>(), alignment: align_of::<CoglFramebuffer>()}),
    ("CoglFramebufferClass", Layout {size: size_of::<CoglFramebufferClass>(), alignment: align_of::<CoglFramebufferClass>()}),
    ("CoglFramebufferError", Layout {size: size_of::<CoglFramebufferError>(), alignment: align_of::<CoglFramebufferError>()}),
    ("CoglGraphicsResetStatus", Layout {size: size_of::<CoglGraphicsResetStatus>(), alignment: align_of::<CoglGraphicsResetStatus>()}),
    ("CoglHandle", Layout {size: size_of::<CoglHandle>(), alignment: align_of::<CoglHandle>()}),
    ("CoglIndicesType", Layout {size: size_of::<CoglIndicesType>(), alignment: align_of::<CoglIndicesType>()}),
    ("CoglMaterialAlphaFunc", Layout {size: size_of::<CoglMaterialAlphaFunc>(), alignment: align_of::<CoglMaterialAlphaFunc>()}),
    ("CoglMaterialFilter", Layout {size: size_of::<CoglMaterialFilter>(), alignment: align_of::<CoglMaterialFilter>()}),
    ("CoglMaterialWrapMode", Layout {size: size_of::<CoglMaterialWrapMode>(), alignment: align_of::<CoglMaterialWrapMode>()}),
    ("CoglOffscreenClass", Layout {size: size_of::<CoglOffscreenClass>(), alignment: align_of::<CoglOffscreenClass>()}),
    ("CoglOnscreen", Layout {size: size_of::<CoglOnscreen>(), alignment: align_of::<CoglOnscreen>()}),
    ("CoglOnscreenClass", Layout {size: size_of::<CoglOnscreenClass>(), alignment: align_of::<CoglOnscreenClass>()}),
    ("CoglOnscreenDirtyInfo", Layout {size: size_of::<CoglOnscreenDirtyInfo>(), alignment: align_of::<CoglOnscreenDirtyInfo>()}),
    ("CoglPipelineAlphaFunc", Layout {size: size_of::<CoglPipelineAlphaFunc>(), alignment: align_of::<CoglPipelineAlphaFunc>()}),
    ("CoglPipelineCullFaceMode", Layout {size: size_of::<CoglPipelineCullFaceMode>(), alignment: align_of::<CoglPipelineCullFaceMode>()}),
    ("CoglPipelineFilter", Layout {size: size_of::<CoglPipelineFilter>(), alignment: align_of::<CoglPipelineFilter>()}),
    ("CoglPipelineKey", Layout {size: size_of::<CoglPipelineKey>(), alignment: align_of::<CoglPipelineKey>()}),
    ("CoglPipelineWrapMode", Layout {size: size_of::<CoglPipelineWrapMode>(), alignment: align_of::<CoglPipelineWrapMode>()}),
    ("CoglPixelFormat", Layout {size: size_of::<CoglPixelFormat>(), alignment: align_of::<CoglPixelFormat>()}),
    ("CoglReadPixelsFlags", Layout {size: size_of::<CoglReadPixelsFlags>(), alignment: align_of::<CoglReadPixelsFlags>()}),
    ("CoglRendererError", Layout {size: size_of::<CoglRendererError>(), alignment: align_of::<CoglRendererError>()}),
    ("CoglScanoutError", Layout {size: size_of::<CoglScanoutError>(), alignment: align_of::<CoglScanoutError>()}),
    ("CoglShaderType", Layout {size: size_of::<CoglShaderType>(), alignment: align_of::<CoglShaderType>()}),
    ("CoglStereoMode", Layout {size: size_of::<CoglStereoMode>(), alignment: align_of::<CoglStereoMode>()}),
    ("CoglSystemError", Layout {size: size_of::<CoglSystemError>(), alignment: align_of::<CoglSystemError>()}),
    ("CoglTextureComponents", Layout {size: size_of::<CoglTextureComponents>(), alignment: align_of::<CoglTextureComponents>()}),
    ("CoglTextureError", Layout {size: size_of::<CoglTextureError>(), alignment: align_of::<CoglTextureError>()}),
    ("CoglTextureFlags", Layout {size: size_of::<CoglTextureFlags>(), alignment: align_of::<CoglTextureFlags>()}),
    ("CoglTextureVertex", Layout {size: size_of::<CoglTextureVertex>(), alignment: align_of::<CoglTextureVertex>()}),
    ("CoglTraceHead", Layout {size: size_of::<CoglTraceHead>(), alignment: align_of::<CoglTraceHead>()}),
    ("CoglUserDataDestroyCallback", Layout {size: size_of::<CoglUserDataDestroyCallback>(), alignment: align_of::<CoglUserDataDestroyCallback>()}),
    ("CoglUserDataKey", Layout {size: size_of::<CoglUserDataKey>(), alignment: align_of::<CoglUserDataKey>()}),
    ("CoglVerticesMode", Layout {size: size_of::<CoglVerticesMode>(), alignment: align_of::<CoglVerticesMode>()}),
    ("CoglWinding", Layout {size: size_of::<CoglWinding>(), alignment: align_of::<CoglWinding>()}),
    ("CoglWinsysFeature", Layout {size: size_of::<CoglWinsysFeature>(), alignment: align_of::<CoglWinsysFeature>()}),
];

const RUST_CONSTANTS: &[(&str, &str)] = &[
    ("COGL_AFIRST_BIT", "64"),
    ("(gint) COGL_ATTRIBUTE_TYPE_BYTE", "5120"),
    ("(gint) COGL_ATTRIBUTE_TYPE_FLOAT", "5126"),
    ("(gint) COGL_ATTRIBUTE_TYPE_SHORT", "5122"),
    ("(gint) COGL_ATTRIBUTE_TYPE_UNSIGNED_BYTE", "5121"),
    ("(gint) COGL_ATTRIBUTE_TYPE_UNSIGNED_SHORT", "5123"),
    ("COGL_A_BIT", "16"),
    ("COGL_BGR_BIT", "32"),
    ("(gint) COGL_BITMAP_ERROR_CORRUPT_IMAGE", "2"),
    ("(gint) COGL_BITMAP_ERROR_FAILED", "0"),
    ("(gint) COGL_BITMAP_ERROR_UNKNOWN_TYPE", "1"),
    ("(gint) COGL_BLEND_STRING_ERROR_ARGUMENT_PARSE_ERROR", "1"),
    ("(gint) COGL_BLEND_STRING_ERROR_GPU_UNSUPPORTED_ERROR", "3"),
    ("(gint) COGL_BLEND_STRING_ERROR_INVALID_ERROR", "2"),
    ("(gint) COGL_BLEND_STRING_ERROR_PARSE_ERROR", "0"),
    ("(guint) COGL_BUFFER_BIT_COLOR", "1"),
    ("(guint) COGL_BUFFER_BIT_DEPTH", "2"),
    ("(guint) COGL_BUFFER_BIT_STENCIL", "4"),
    ("COGL_DEPTH_BIT", "256"),
    ("(gint) COGL_DEPTH_TEST_FUNCTION_ALWAYS", "519"),
    ("(gint) COGL_DEPTH_TEST_FUNCTION_EQUAL", "514"),
    ("(gint) COGL_DEPTH_TEST_FUNCTION_GEQUAL", "518"),
    ("(gint) COGL_DEPTH_TEST_FUNCTION_GREATER", "516"),
    ("(gint) COGL_DEPTH_TEST_FUNCTION_LEQUAL", "515"),
    ("(gint) COGL_DEPTH_TEST_FUNCTION_LESS", "513"),
    ("(gint) COGL_DEPTH_TEST_FUNCTION_NEVER", "512"),
    ("(gint) COGL_DEPTH_TEST_FUNCTION_NOTEQUAL", "517"),
    ("(guint) COGL_EGL_IMAGE_FLAG_NONE", "0"),
    ("(guint) COGL_EGL_IMAGE_FLAG_NO_GET_DATA", "1"),
    ("(gint) COGL_FEATURE_ID_BLIT_FRAMEBUFFER", "7"),
    ("(gint) COGL_FEATURE_ID_BUFFER_AGE", "5"),
    ("(gint) COGL_FEATURE_ID_FENCE", "3"),
    ("(gint) COGL_FEATURE_ID_MAP_BUFFER_FOR_READ", "1"),
    ("(gint) COGL_FEATURE_ID_MAP_BUFFER_FOR_WRITE", "2"),
    ("(gint) COGL_FEATURE_ID_TEXTURE_EGL_IMAGE_EXTERNAL", "6"),
    ("(gint) COGL_FEATURE_ID_TEXTURE_RG", "4"),
    ("(gint) COGL_FEATURE_ID_UNSIGNED_INT_INDICES", "0"),
    ("(gint) COGL_FILTER_CONTINUE", "0"),
    ("(gint) COGL_FILTER_REMOVE", "1"),
    ("(gint) COGL_FRAMEBUFFER_ERROR_ALLOCATE", "0"),
    ("(gint) COGL_FRAME_EVENT_COMPLETE", "2"),
    ("(gint) COGL_FRAME_EVENT_SYNC", "1"),
    ("(gint) COGL_GRAPHICS_RESET_STATUS_GUILTY_CONTEXT_RESET", "1"),
    ("(gint) COGL_GRAPHICS_RESET_STATUS_INNOCENT_CONTEXT_RESET", "2"),
    ("(gint) COGL_GRAPHICS_RESET_STATUS_NO_ERROR", "0"),
    ("(gint) COGL_GRAPHICS_RESET_STATUS_PURGED_CONTEXT_RESET", "4"),
    ("(gint) COGL_GRAPHICS_RESET_STATUS_UNKNOWN_CONTEXT_RESET", "3"),
    ("(gint) COGL_INDICES_TYPE_UNSIGNED_BYTE", "0"),
    ("(gint) COGL_INDICES_TYPE_UNSIGNED_INT", "2"),
    ("(gint) COGL_INDICES_TYPE_UNSIGNED_SHORT", "1"),
    ("(gint) COGL_MATERIAL_ALPHA_FUNC_ALWAYS", "519"),
    ("(gint) COGL_MATERIAL_ALPHA_FUNC_EQUAL", "514"),
    ("(gint) COGL_MATERIAL_ALPHA_FUNC_GEQUAL", "518"),
    ("(gint) COGL_MATERIAL_ALPHA_FUNC_GREATER", "516"),
    ("(gint) COGL_MATERIAL_ALPHA_FUNC_LEQUAL", "515"),
    ("(gint) COGL_MATERIAL_ALPHA_FUNC_LESS", "513"),
    ("(gint) COGL_MATERIAL_ALPHA_FUNC_NEVER", "512"),
    ("(gint) COGL_MATERIAL_ALPHA_FUNC_NOTEQUAL", "517"),
    ("(gint) COGL_MATERIAL_FILTER_LINEAR", "9729"),
    ("(gint) COGL_MATERIAL_FILTER_LINEAR_MIPMAP_LINEAR", "9987"),
    ("(gint) COGL_MATERIAL_FILTER_LINEAR_MIPMAP_NEAREST", "9985"),
    ("(gint) COGL_MATERIAL_FILTER_NEAREST", "9728"),
    ("(gint) COGL_MATERIAL_FILTER_NEAREST_MIPMAP_LINEAR", "9986"),
    ("(gint) COGL_MATERIAL_FILTER_NEAREST_MIPMAP_NEAREST", "9984"),
    ("(gint) COGL_MATERIAL_WRAP_MODE_AUTOMATIC", "519"),
    ("(gint) COGL_MATERIAL_WRAP_MODE_CLAMP_TO_EDGE", "33071"),
    ("(gint) COGL_MATERIAL_WRAP_MODE_REPEAT", "10497"),
    ("(guint) COGL_OFFSCREEN_BUFFER", "4"),
    ("(gint) COGL_PIPELINE_ALPHA_FUNC_ALWAYS", "519"),
    ("(gint) COGL_PIPELINE_ALPHA_FUNC_EQUAL", "514"),
    ("(gint) COGL_PIPELINE_ALPHA_FUNC_GEQUAL", "518"),
    ("(gint) COGL_PIPELINE_ALPHA_FUNC_GREATER", "516"),
    ("(gint) COGL_PIPELINE_ALPHA_FUNC_LEQUAL", "515"),
    ("(gint) COGL_PIPELINE_ALPHA_FUNC_LESS", "513"),
    ("(gint) COGL_PIPELINE_ALPHA_FUNC_NEVER", "512"),
    ("(gint) COGL_PIPELINE_ALPHA_FUNC_NOTEQUAL", "517"),
    ("(gint) COGL_PIPELINE_CULL_FACE_MODE_BACK", "2"),
    ("(gint) COGL_PIPELINE_CULL_FACE_MODE_BOTH", "3"),
    ("(gint) COGL_PIPELINE_CULL_FACE_MODE_FRONT", "1"),
    ("(gint) COGL_PIPELINE_CULL_FACE_MODE_NONE", "0"),
    ("(gint) COGL_PIPELINE_FILTER_LINEAR", "9729"),
    ("(gint) COGL_PIPELINE_FILTER_LINEAR_MIPMAP_LINEAR", "9987"),
    ("(gint) COGL_PIPELINE_FILTER_LINEAR_MIPMAP_NEAREST", "9985"),
    ("(gint) COGL_PIPELINE_FILTER_NEAREST", "9728"),
    ("(gint) COGL_PIPELINE_FILTER_NEAREST_MIPMAP_LINEAR", "9986"),
    ("(gint) COGL_PIPELINE_FILTER_NEAREST_MIPMAP_NEAREST", "9984"),
    ("(gint) COGL_PIPELINE_WRAP_MODE_AUTOMATIC", "519"),
    ("(gint) COGL_PIPELINE_WRAP_MODE_CLAMP_TO_EDGE", "33071"),
    ("(gint) COGL_PIPELINE_WRAP_MODE_MIRRORED_REPEAT", "33648"),
    ("(gint) COGL_PIPELINE_WRAP_MODE_REPEAT", "10497"),
    ("(guint) COGL_PIXEL_FORMAT_ABGR_2101010", "125"),
    ("(guint) COGL_PIXEL_FORMAT_ABGR_2101010_PRE", "253"),
    ("(guint) COGL_PIXEL_FORMAT_ABGR_8888", "115"),
    ("(guint) COGL_PIXEL_FORMAT_ABGR_8888_PRE", "243"),
    ("(guint) COGL_PIXEL_FORMAT_ABGR_FP_16161616", "123"),
    ("(guint) COGL_PIXEL_FORMAT_ABGR_FP_16161616_PRE", "251"),
    ("(guint) COGL_PIXEL_FORMAT_ANY", "0"),
    ("(guint) COGL_PIXEL_FORMAT_ARGB_2101010", "93"),
    ("(guint) COGL_PIXEL_FORMAT_ARGB_2101010_PRE", "221"),
    ("(guint) COGL_PIXEL_FORMAT_ARGB_8888", "83"),
    ("(guint) COGL_PIXEL_FORMAT_ARGB_8888_PRE", "211"),
    ("(guint) COGL_PIXEL_FORMAT_ARGB_FP_16161616", "91"),
    ("(guint) COGL_PIXEL_FORMAT_ARGB_FP_16161616_PRE", "219"),
    ("(guint) COGL_PIXEL_FORMAT_A_8", "17"),
    ("(guint) COGL_PIXEL_FORMAT_BGRA_1010102", "61"),
    ("(guint) COGL_PIXEL_FORMAT_BGRA_1010102_PRE", "189"),
    ("(guint) COGL_PIXEL_FORMAT_BGRA_8888", "51"),
    ("(guint) COGL_PIXEL_FORMAT_BGRA_8888_PRE", "179"),
    ("(guint) COGL_PIXEL_FORMAT_BGRA_FP_16161616", "59"),
    ("(guint) COGL_PIXEL_FORMAT_BGRA_FP_16161616_PRE", "187"),
    ("(guint) COGL_PIXEL_FORMAT_BGR_888", "34"),
    ("(guint) COGL_PIXEL_FORMAT_DEPTH_16", "265"),
    ("(guint) COGL_PIXEL_FORMAT_DEPTH_24_STENCIL_8", "771"),
    ("(guint) COGL_PIXEL_FORMAT_DEPTH_32", "259"),
    ("(guint) COGL_PIXEL_FORMAT_G_8", "8"),
    ("COGL_PIXEL_FORMAT_MAX_PLANES", "4"),
    ("(guint) COGL_PIXEL_FORMAT_RGBA_1010102", "29"),
    ("(guint) COGL_PIXEL_FORMAT_RGBA_1010102_PRE", "157"),
    ("(guint) COGL_PIXEL_FORMAT_RGBA_4444", "21"),
    ("(guint) COGL_PIXEL_FORMAT_RGBA_4444_PRE", "149"),
    ("(guint) COGL_PIXEL_FORMAT_RGBA_5551", "22"),
    ("(guint) COGL_PIXEL_FORMAT_RGBA_5551_PRE", "150"),
    ("(guint) COGL_PIXEL_FORMAT_RGBA_8888", "19"),
    ("(guint) COGL_PIXEL_FORMAT_RGBA_8888_PRE", "147"),
    ("(guint) COGL_PIXEL_FORMAT_RGBA_FP_16161616", "27"),
    ("(guint) COGL_PIXEL_FORMAT_RGBA_FP_16161616_PRE", "155"),
    ("(guint) COGL_PIXEL_FORMAT_RGB_565", "4"),
    ("(guint) COGL_PIXEL_FORMAT_RGB_888", "2"),
    ("(guint) COGL_PIXEL_FORMAT_RG_88", "9"),
    ("(guint) COGL_PIXEL_FORMAT_YUV", "7"),
    ("COGL_PREMULT_BIT", "128"),
    ("(guint) COGL_READ_PIXELS_COLOR_BUFFER", "1"),
    ("(gint) COGL_RENDERER_ERROR_BAD_CONSTRAINT", "1"),
    ("(gint) COGL_RENDERER_ERROR_XLIB_DISPLAY_OPEN", "0"),
    ("(gint) COGL_SCANOUT_ERROR_INHIBITED", "0"),
    ("(gint) COGL_SHADER_TYPE_FRAGMENT", "1"),
    ("(gint) COGL_SHADER_TYPE_VERTEX", "0"),
    ("COGL_STENCIL_BIT", "512"),
    ("(gint) COGL_STEREO_BOTH", "0"),
    ("(gint) COGL_STEREO_LEFT", "1"),
    ("(gint) COGL_STEREO_RIGHT", "2"),
    ("(gint) COGL_SYSTEM_ERROR_NO_MEMORY", "1"),
    ("(gint) COGL_SYSTEM_ERROR_UNSUPPORTED", "0"),
    ("(gint) COGL_TEXTURE_COMPONENTS_A", "1"),
    ("(gint) COGL_TEXTURE_COMPONENTS_DEPTH", "5"),
    ("(gint) COGL_TEXTURE_COMPONENTS_RG", "2"),
    ("(gint) COGL_TEXTURE_COMPONENTS_RGB", "3"),
    ("(gint) COGL_TEXTURE_COMPONENTS_RGBA", "4"),
    ("(gint) COGL_TEXTURE_ERROR_BAD_PARAMETER", "2"),
    ("(gint) COGL_TEXTURE_ERROR_FORMAT", "1"),
    ("(gint) COGL_TEXTURE_ERROR_SIZE", "0"),
    ("(gint) COGL_TEXTURE_ERROR_TYPE", "3"),
    ("COGL_TEXTURE_MAX_WASTE", "127"),
    ("(guint) COGL_TEXTURE_NONE", "0"),
    ("(guint) COGL_TEXTURE_NO_ATLAS", "4"),
    ("(guint) COGL_TEXTURE_NO_AUTO_MIPMAP", "1"),
    ("(guint) COGL_TEXTURE_NO_SLICING", "2"),
    ("(gint) COGL_VERTICES_MODE_LINES", "1"),
    ("(gint) COGL_VERTICES_MODE_LINE_LOOP", "2"),
    ("(gint) COGL_VERTICES_MODE_LINE_STRIP", "3"),
    ("(gint) COGL_VERTICES_MODE_POINTS", "0"),
    ("(gint) COGL_VERTICES_MODE_TRIANGLES", "4"),
    ("(gint) COGL_VERTICES_MODE_TRIANGLE_FAN", "6"),
    ("(gint) COGL_VERTICES_MODE_TRIANGLE_STRIP", "5"),
    ("(gint) COGL_WINDING_CLOCKWISE", "0"),
    ("(gint) COGL_WINDING_COUNTER_CLOCKWISE", "1"),
    ("(guint) COGL_WINDOW_BUFFER", "2"),
    ("(gint) COGL_WINSYS_FEATURE_BUFFER_AGE", "8"),
    ("(gint) COGL_WINSYS_FEATURE_MULTIPLE_ONSCREEN", "0"),
    ("(gint) COGL_WINSYS_FEATURE_N_FEATURES", "10"),
    ("(gint) COGL_WINSYS_FEATURE_SWAP_BUFFERS_EVENT", "4"),
    ("(gint) COGL_WINSYS_FEATURE_SWAP_REGION", "5"),
    ("(gint) COGL_WINSYS_FEATURE_SWAP_REGION_SYNCHRONIZED", "7"),
    ("(gint) COGL_WINSYS_FEATURE_SWAP_REGION_THROTTLE", "6"),
    ("(gint) COGL_WINSYS_FEATURE_SYNC_AND_COMPLETE_EVENT", "9"),
    ("(gint) COGL_WINSYS_FEATURE_TEXTURE_FROM_PIXMAP", "3"),
    ("(gint) COGL_WINSYS_FEATURE_VBLANK_COUNTER", "1"),
    ("(gint) COGL_WINSYS_FEATURE_VBLANK_WAIT", "2"),
];


