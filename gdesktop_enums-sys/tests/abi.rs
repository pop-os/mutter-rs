// Generated by gir (https://github.com/gtk-rs/gir @ 5bbf6cb)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 8e47c67)
// from mutter-gir-files
// DO NOT EDIT

use gdesktop_enums_sys::*;
use std::mem::{align_of, size_of};
use std::env;
use std::error::Error;
use std::ffi::OsString;
use std::path::Path;
use std::process::Command;
use std::str;
use tempfile::Builder;

static PACKAGES: &[&str] = &["gsettings-desktop-schemas"];

#[derive(Clone, Debug)]
struct Compiler {
    pub args: Vec<String>,
}

impl Compiler {
    pub fn new() -> Result<Self, Box<dyn Error>> {
        let mut args = get_var("CC", "cc")?;
        args.push("-Wno-deprecated-declarations".to_owned());
        // For _Generic
        args.push("-std=c11".to_owned());
        // For %z support in printf when using MinGW.
        args.push("-D__USE_MINGW_ANSI_STDIO".to_owned());
        args.extend(get_var("CFLAGS", "")?);
        args.extend(get_var("CPPFLAGS", "")?);
        args.extend(pkg_config_cflags(PACKAGES)?);
        Ok(Self { args })
    }

    pub fn compile(&self, src: &Path, out: &Path) -> Result<(), Box<dyn Error>> {
        let mut cmd = self.to_command();
        cmd.arg(src);
        cmd.arg("-o");
        cmd.arg(out);
        let status = cmd.spawn()?.wait()?;
        if !status.success() {
            return Err(format!("compilation command {:?} failed, {}", &cmd, status).into());
        }
        Ok(())
    }

    fn to_command(&self) -> Command {
        let mut cmd = Command::new(&self.args[0]);
        cmd.args(&self.args[1..]);
        cmd
    }
}

fn get_var(name: &str, default: &str) -> Result<Vec<String>, Box<dyn Error>> {
    match env::var(name) {
        Ok(value) => Ok(shell_words::split(&value)?),
        Err(env::VarError::NotPresent) => Ok(shell_words::split(default)?),
        Err(err) => Err(format!("{} {}", name, err).into()),
    }
}

fn pkg_config_cflags(packages: &[&str]) -> Result<Vec<String>, Box<dyn Error>> {
    if packages.is_empty() {
        return Ok(Vec::new());
    }
    let pkg_config = env::var_os("PKG_CONFIG")
        .unwrap_or_else(|| OsString::from("pkg-config"));
    let mut cmd = Command::new(pkg_config);
    cmd.arg("--cflags");
    cmd.args(packages);
    let out = cmd.output()?;
    if !out.status.success() {
        return Err(format!("command {:?} returned {}",
                           &cmd, out.status).into());
    }
    let stdout = str::from_utf8(&out.stdout)?;
    Ok(shell_words::split(stdout.trim())?)
}


#[derive(Copy, Clone, Debug, Eq, PartialEq)]
struct Layout {
    size: usize,
    alignment: usize,
}

#[derive(Copy, Clone, Debug, Default, Eq, PartialEq)]
struct Results {
    /// Number of successfully completed tests.
    passed: usize,
    /// Total number of failed tests (including those that failed to compile).
    failed: usize,
}

impl Results {
    fn record_passed(&mut self) {
        self.passed += 1;
    }
    fn record_failed(&mut self) {
        self.failed += 1;
    }
    fn summary(&self) -> String {
        format!("{} passed; {} failed", self.passed, self.failed)
    }
    fn expect_total_success(&self) {
        if self.failed == 0 {
            println!("OK: {}", self.summary());
        } else {
            panic!("FAILED: {}", self.summary());
        };
    }
}

#[test]
fn cross_validate_constants_with_c() {
    let mut c_constants: Vec<(String, String)> = Vec::new();

    for l in get_c_output("constant").unwrap().lines() {
        let mut words = l.trim().split(';');
        let name = words.next().expect("Failed to parse name").to_owned();
        let value = words
            .next()
            .and_then(|s| s.parse().ok())
            .expect("Failed to parse value");
        c_constants.push((name, value));
    }

    let mut results = Results::default();

    for ((rust_name, rust_value), (c_name, c_value)) in
        RUST_CONSTANTS.iter().zip(c_constants.iter())
    {
        if rust_name != c_name {
            results.record_failed();
            eprintln!("Name mismatch:\nRust: {:?}\nC:    {:?}", rust_name, c_name,);
            continue;
        }

        if rust_value != c_value {
            results.record_failed();
            eprintln!(
                "Constant value mismatch for {}\nRust: {:?}\nC:    {:?}",
                rust_name, rust_value, &c_value
            );
            continue;
        }

        results.record_passed();
    }

    results.expect_total_success();
}

#[test]
fn cross_validate_layout_with_c() {
    let mut c_layouts = Vec::new();

    for l in get_c_output("layout").unwrap().lines() {
        let mut words = l.trim().split(';');
        let name = words.next().expect("Failed to parse name").to_owned();
        let size = words
            .next()
            .and_then(|s| s.parse().ok())
            .expect("Failed to parse size");
        let alignment = words
            .next()
            .and_then(|s| s.parse().ok())
            .expect("Failed to parse alignment");
        c_layouts.push((name, Layout { size, alignment }));
    }

    let mut results = Results::default();

    for ((rust_name, rust_layout), (c_name, c_layout)) in
        RUST_LAYOUTS.iter().zip(c_layouts.iter())
    {
        if rust_name != c_name {
            results.record_failed();
            eprintln!("Name mismatch:\nRust: {:?}\nC:    {:?}", rust_name, c_name,);
            continue;
        }

        if rust_layout != c_layout {
            results.record_failed();
            eprintln!(
                "Layout mismatch for {}\nRust: {:?}\nC:    {:?}",
                rust_name, rust_layout, &c_layout
            );
            continue;
        }

        results.record_passed();
    }

    results.expect_total_success();
}

fn get_c_output(name: &str) -> Result<String, Box<dyn Error>> {
    let tmpdir = Builder::new().prefix("abi").tempdir()?;
    let exe = tmpdir.path().join(name);
    let c_file = Path::new("tests").join(name).with_extension("c");

    let cc = Compiler::new().expect("configured compiler");
    cc.compile(&c_file, &exe)?;

    let mut abi_cmd = Command::new(exe);
    let output = abi_cmd.output()?;
    if !output.status.success() {
        return Err(format!("command {:?} failed, {:?}", &abi_cmd, &output).into());
    }

    Ok(String::from_utf8(output.stdout)?)
}

const RUST_LAYOUTS: &[(&str, Layout)] = &[
    ("GDesktopBackgroundShading", Layout {size: size_of::<GDesktopBackgroundShading>(), alignment: align_of::<GDesktopBackgroundShading>()}),
    ("GDesktopBackgroundStyle", Layout {size: size_of::<GDesktopBackgroundStyle>(), alignment: align_of::<GDesktopBackgroundStyle>()}),
    ("GDesktopClockFormat", Layout {size: size_of::<GDesktopClockFormat>(), alignment: align_of::<GDesktopClockFormat>()}),
    ("GDesktopDeviceSendEvents", Layout {size: size_of::<GDesktopDeviceSendEvents>(), alignment: align_of::<GDesktopDeviceSendEvents>()}),
    ("GDesktopFocusMode", Layout {size: size_of::<GDesktopFocusMode>(), alignment: align_of::<GDesktopFocusMode>()}),
    ("GDesktopFocusNewWindows", Layout {size: size_of::<GDesktopFocusNewWindows>(), alignment: align_of::<GDesktopFocusNewWindows>()}),
    ("GDesktopFontAntialiasingMode", Layout {size: size_of::<GDesktopFontAntialiasingMode>(), alignment: align_of::<GDesktopFontAntialiasingMode>()}),
    ("GDesktopFontHinting", Layout {size: size_of::<GDesktopFontHinting>(), alignment: align_of::<GDesktopFontHinting>()}),
    ("GDesktopFontRgbaOrder", Layout {size: size_of::<GDesktopFontRgbaOrder>(), alignment: align_of::<GDesktopFontRgbaOrder>()}),
    ("GDesktopLocationAccuracyLevel", Layout {size: size_of::<GDesktopLocationAccuracyLevel>(), alignment: align_of::<GDesktopLocationAccuracyLevel>()}),
    ("GDesktopMagnifierCaretTrackingMode", Layout {size: size_of::<GDesktopMagnifierCaretTrackingMode>(), alignment: align_of::<GDesktopMagnifierCaretTrackingMode>()}),
    ("GDesktopMagnifierFocusTrackingMode", Layout {size: size_of::<GDesktopMagnifierFocusTrackingMode>(), alignment: align_of::<GDesktopMagnifierFocusTrackingMode>()}),
    ("GDesktopMagnifierMouseTrackingMode", Layout {size: size_of::<GDesktopMagnifierMouseTrackingMode>(), alignment: align_of::<GDesktopMagnifierMouseTrackingMode>()}),
    ("GDesktopMagnifierScreenPosition", Layout {size: size_of::<GDesktopMagnifierScreenPosition>(), alignment: align_of::<GDesktopMagnifierScreenPosition>()}),
    ("GDesktopMouseDwellDirection", Layout {size: size_of::<GDesktopMouseDwellDirection>(), alignment: align_of::<GDesktopMouseDwellDirection>()}),
    ("GDesktopMouseDwellMode", Layout {size: size_of::<GDesktopMouseDwellMode>(), alignment: align_of::<GDesktopMouseDwellMode>()}),
    ("GDesktopPadButtonAction", Layout {size: size_of::<GDesktopPadButtonAction>(), alignment: align_of::<GDesktopPadButtonAction>()}),
    ("GDesktopPointerAccelProfile", Layout {size: size_of::<GDesktopPointerAccelProfile>(), alignment: align_of::<GDesktopPointerAccelProfile>()}),
    ("GDesktopProxyMode", Layout {size: size_of::<GDesktopProxyMode>(), alignment: align_of::<GDesktopProxyMode>()}),
    ("GDesktopScreensaverMode", Layout {size: size_of::<GDesktopScreensaverMode>(), alignment: align_of::<GDesktopScreensaverMode>()}),
    ("GDesktopStylusButtonAction", Layout {size: size_of::<GDesktopStylusButtonAction>(), alignment: align_of::<GDesktopStylusButtonAction>()}),
    ("GDesktopTabletMapping", Layout {size: size_of::<GDesktopTabletMapping>(), alignment: align_of::<GDesktopTabletMapping>()}),
    ("GDesktopTitlebarAction", Layout {size: size_of::<GDesktopTitlebarAction>(), alignment: align_of::<GDesktopTitlebarAction>()}),
    ("GDesktopToolbarIconSize", Layout {size: size_of::<GDesktopToolbarIconSize>(), alignment: align_of::<GDesktopToolbarIconSize>()}),
    ("GDesktopToolbarStyle", Layout {size: size_of::<GDesktopToolbarStyle>(), alignment: align_of::<GDesktopToolbarStyle>()}),
    ("GDesktopTouchpadClickMethod", Layout {size: size_of::<GDesktopTouchpadClickMethod>(), alignment: align_of::<GDesktopTouchpadClickMethod>()}),
    ("GDesktopTouchpadHandedness", Layout {size: size_of::<GDesktopTouchpadHandedness>(), alignment: align_of::<GDesktopTouchpadHandedness>()}),
    ("GDesktopTouchpadTapButtonMap", Layout {size: size_of::<GDesktopTouchpadTapButtonMap>(), alignment: align_of::<GDesktopTouchpadTapButtonMap>()}),
    ("GDesktopUsbProtection", Layout {size: size_of::<GDesktopUsbProtection>(), alignment: align_of::<GDesktopUsbProtection>()}),
    ("GDesktopVisualBellType", Layout {size: size_of::<GDesktopVisualBellType>(), alignment: align_of::<GDesktopVisualBellType>()}),
];

const RUST_CONSTANTS: &[(&str, &str)] = &[
    ("(gint) G_DESKTOP_BACKGROUND_SHADING_HORIZONTAL", "2"),
    ("(gint) G_DESKTOP_BACKGROUND_SHADING_SOLID", "0"),
    ("(gint) G_DESKTOP_BACKGROUND_SHADING_VERTICAL", "1"),
    ("(gint) G_DESKTOP_BACKGROUND_STYLE_CENTERED", "2"),
    ("(gint) G_DESKTOP_BACKGROUND_STYLE_NONE", "0"),
    ("(gint) G_DESKTOP_BACKGROUND_STYLE_SCALED", "3"),
    ("(gint) G_DESKTOP_BACKGROUND_STYLE_SPANNED", "6"),
    ("(gint) G_DESKTOP_BACKGROUND_STYLE_STRETCHED", "4"),
    ("(gint) G_DESKTOP_BACKGROUND_STYLE_WALLPAPER", "1"),
    ("(gint) G_DESKTOP_BACKGROUND_STYLE_ZOOM", "5"),
    ("(gint) G_DESKTOP_CLOCK_FORMAT_12H", "1"),
    ("(gint) G_DESKTOP_CLOCK_FORMAT_24H", "0"),
    ("(gint) G_DESKTOP_DEVICE_SEND_EVENTS_DISABLED", "1"),
    ("(gint) G_DESKTOP_DEVICE_SEND_EVENTS_DISABLED_ON_EXTERNAL_MOUSE", "2"),
    ("(gint) G_DESKTOP_DEVICE_SEND_EVENTS_ENABLED", "0"),
    ("(gint) G_DESKTOP_FOCUS_MODE_CLICK", "0"),
    ("(gint) G_DESKTOP_FOCUS_MODE_MOUSE", "2"),
    ("(gint) G_DESKTOP_FOCUS_MODE_SLOPPY", "1"),
    ("(gint) G_DESKTOP_FOCUS_NEW_WINDOWS_SMART", "0"),
    ("(gint) G_DESKTOP_FOCUS_NEW_WINDOWS_STRICT", "1"),
    ("(gint) G_DESKTOP_FONT_ANTIALIASING_MODE_GRAYSCALE", "1"),
    ("(gint) G_DESKTOP_FONT_ANTIALIASING_MODE_NONE", "0"),
    ("(gint) G_DESKTOP_FONT_ANTIALIASING_MODE_RGBA", "2"),
    ("(gint) G_DESKTOP_FONT_HINTING_FULL", "3"),
    ("(gint) G_DESKTOP_FONT_HINTING_MEDIUM", "2"),
    ("(gint) G_DESKTOP_FONT_HINTING_NONE", "0"),
    ("(gint) G_DESKTOP_FONT_HINTING_SLIGHT", "1"),
    ("(gint) G_DESKTOP_FONT_RGBA_ORDER_BGR", "2"),
    ("(gint) G_DESKTOP_FONT_RGBA_ORDER_RGB", "1"),
    ("(gint) G_DESKTOP_FONT_RGBA_ORDER_RGBA", "0"),
    ("(gint) G_DESKTOP_FONT_RGBA_ORDER_VBGR", "4"),
    ("(gint) G_DESKTOP_FONT_RGBA_ORDER_VRGB", "3"),
    ("(gint) G_DESKTOP_LOCATION_ACCURACY_LEVEL_CITY", "1"),
    ("(gint) G_DESKTOP_LOCATION_ACCURACY_LEVEL_COUNTRY", "0"),
    ("(gint) G_DESKTOP_LOCATION_ACCURACY_LEVEL_EXACT", "4"),
    ("(gint) G_DESKTOP_LOCATION_ACCURACY_LEVEL_NEIGHBORHOOD", "2"),
    ("(gint) G_DESKTOP_LOCATION_ACCURACY_LEVEL_STREET", "3"),
    ("(gint) G_DESKTOP_MAGNIFIER_CARET_TRACKING_MODE_CENTERED", "1"),
    ("(gint) G_DESKTOP_MAGNIFIER_CARET_TRACKING_MODE_NONE", "0"),
    ("(gint) G_DESKTOP_MAGNIFIER_CARET_TRACKING_MODE_PROPORTIONAL", "2"),
    ("(gint) G_DESKTOP_MAGNIFIER_CARET_TRACKING_MODE_PUSH", "3"),
    ("(gint) G_DESKTOP_MAGNIFIER_FOCUS_TRACKING_MODE_CENTERED", "1"),
    ("(gint) G_DESKTOP_MAGNIFIER_FOCUS_TRACKING_MODE_NONE", "0"),
    ("(gint) G_DESKTOP_MAGNIFIER_FOCUS_TRACKING_MODE_PROPORTIONAL", "2"),
    ("(gint) G_DESKTOP_MAGNIFIER_FOCUS_TRACKING_MODE_PUSH", "3"),
    ("(gint) G_DESKTOP_MAGNIFIER_MOUSE_TRACKING_MODE_CENTERED", "1"),
    ("(gint) G_DESKTOP_MAGNIFIER_MOUSE_TRACKING_MODE_NONE", "0"),
    ("(gint) G_DESKTOP_MAGNIFIER_MOUSE_TRACKING_MODE_PROPORTIONAL", "2"),
    ("(gint) G_DESKTOP_MAGNIFIER_MOUSE_TRACKING_MODE_PUSH", "3"),
    ("(gint) G_DESKTOP_MAGNIFIER_SCREEN_POSITION_BOTTOM_HALF", "3"),
    ("(gint) G_DESKTOP_MAGNIFIER_SCREEN_POSITION_FULL_SCREEN", "1"),
    ("(gint) G_DESKTOP_MAGNIFIER_SCREEN_POSITION_LEFT_HALF", "4"),
    ("(gint) G_DESKTOP_MAGNIFIER_SCREEN_POSITION_NONE", "0"),
    ("(gint) G_DESKTOP_MAGNIFIER_SCREEN_POSITION_RIGHT_HALF", "5"),
    ("(gint) G_DESKTOP_MAGNIFIER_SCREEN_POSITION_TOP_HALF", "2"),
    ("(gint) G_DESKTOP_MOUSE_DWELL_DIRECTION_DOWN", "3"),
    ("(gint) G_DESKTOP_MOUSE_DWELL_DIRECTION_LEFT", "0"),
    ("(gint) G_DESKTOP_MOUSE_DWELL_DIRECTION_RIGHT", "1"),
    ("(gint) G_DESKTOP_MOUSE_DWELL_DIRECTION_UP", "2"),
    ("(gint) G_DESKTOP_MOUSE_DWELL_MODE_GESTURE", "1"),
    ("(gint) G_DESKTOP_MOUSE_DWELL_MODE_WINDOW", "0"),
    ("(gint) G_DESKTOP_PAD_BUTTON_ACTION_HELP", "1"),
    ("(gint) G_DESKTOP_PAD_BUTTON_ACTION_KEYBINDING", "3"),
    ("(gint) G_DESKTOP_PAD_BUTTON_ACTION_NONE", "0"),
    ("(gint) G_DESKTOP_PAD_BUTTON_ACTION_SWITCH_MONITOR", "2"),
    ("(gint) G_DESKTOP_POINTER_ACCEL_PROFILE_ADAPTIVE", "2"),
    ("(gint) G_DESKTOP_POINTER_ACCEL_PROFILE_DEFAULT", "0"),
    ("(gint) G_DESKTOP_POINTER_ACCEL_PROFILE_FLAT", "1"),
    ("(gint) G_DESKTOP_PROXY_MODE_AUTO", "2"),
    ("(gint) G_DESKTOP_PROXY_MODE_MANUAL", "1"),
    ("(gint) G_DESKTOP_PROXY_MODE_NONE", "0"),
    ("(gint) G_DESKTOP_SCREENSAVER_MODE_BLANK_ONLY", "0"),
    ("(gint) G_DESKTOP_SCREENSAVER_MODE_RANDOM", "1"),
    ("(gint) G_DESKTOP_SCREENSAVER_MODE_SINGLE", "2"),
    ("(gint) G_DESKTOP_STYLUS_BUTTON_ACTION_BACK", "3"),
    ("(gint) G_DESKTOP_STYLUS_BUTTON_ACTION_DEFAULT", "0"),
    ("(gint) G_DESKTOP_STYLUS_BUTTON_ACTION_FORWARD", "4"),
    ("(gint) G_DESKTOP_STYLUS_BUTTON_ACTION_MIDDLE", "1"),
    ("(gint) G_DESKTOP_STYLUS_BUTTON_ACTION_RIGHT", "2"),
    ("(gint) G_DESKTOP_TABLET_MAPPING_ABSOLUTE", "0"),
    ("(gint) G_DESKTOP_TABLET_MAPPING_RELATIVE", "1"),
    ("(gint) G_DESKTOP_TITLEBAR_ACTION_LOWER", "6"),
    ("(gint) G_DESKTOP_TITLEBAR_ACTION_MENU", "7"),
    ("(gint) G_DESKTOP_TITLEBAR_ACTION_MINIMIZE", "4"),
    ("(gint) G_DESKTOP_TITLEBAR_ACTION_NONE", "5"),
    ("(gint) G_DESKTOP_TITLEBAR_ACTION_TOGGLE_MAXIMIZE", "1"),
    ("(gint) G_DESKTOP_TITLEBAR_ACTION_TOGGLE_MAXIMIZE_HORIZONTALLY", "2"),
    ("(gint) G_DESKTOP_TITLEBAR_ACTION_TOGGLE_MAXIMIZE_VERTICALLY", "3"),
    ("(gint) G_DESKTOP_TITLEBAR_ACTION_TOGGLE_SHADE", "0"),
    ("(gint) G_DESKTOP_TOOLBAR_ICON_SIZE_LARGE", "1"),
    ("(gint) G_DESKTOP_TOOLBAR_ICON_SIZE_SMALL", "0"),
    ("(gint) G_DESKTOP_TOOLBAR_STYLE_BOTH", "0"),
    ("(gint) G_DESKTOP_TOOLBAR_STYLE_BOTH_HORIZ", "1"),
    ("(gint) G_DESKTOP_TOOLBAR_STYLE_ICONS", "2"),
    ("(gint) G_DESKTOP_TOOLBAR_STYLE_TEXT", "3"),
    ("(gint) G_DESKTOP_TOUCHPAD_BUTTON_TAP_MAP_DEFAULT", "0"),
    ("(gint) G_DESKTOP_TOUCHPAD_BUTTON_TAP_MAP_LMR", "2"),
    ("(gint) G_DESKTOP_TOUCHPAD_BUTTON_TAP_MAP_LRM", "1"),
    ("(gint) G_DESKTOP_TOUCHPAD_CLICK_METHOD_AREAS", "2"),
    ("(gint) G_DESKTOP_TOUCHPAD_CLICK_METHOD_DEFAULT", "0"),
    ("(gint) G_DESKTOP_TOUCHPAD_CLICK_METHOD_FINGERS", "3"),
    ("(gint) G_DESKTOP_TOUCHPAD_CLICK_METHOD_NONE", "1"),
    ("(gint) G_DESKTOP_TOUCHPAD_HANDEDNESS_LEFT", "1"),
    ("(gint) G_DESKTOP_TOUCHPAD_HANDEDNESS_MOUSE", "2"),
    ("(gint) G_DESKTOP_TOUCHPAD_HANDEDNESS_RIGHT", "0"),
    ("(gint) G_DESKTOP_USB_PROTECTION_ALWAYS", "1"),
    ("(gint) G_DESKTOP_USB_PROTECTION_LOCKSCREEN", "0"),
    ("(gint) G_DESKTOP_VISUAL_BELL_FRAME_FLASH", "1"),
    ("(gint) G_DESKTOP_VISUAL_BELL_FULLSCREEN_FLASH", "0"),
];


