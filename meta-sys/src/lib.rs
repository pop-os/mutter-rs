// Generated by gir (https://github.com/gtk-rs/gir @ 5bbf6cb)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 8e47c67)
// from mutter-gir-files
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]
#![allow(clippy::approx_constant, clippy::type_complexity, clippy::unreadable_literal, clippy::upper_case_acronyms)]
#![cfg_attr(feature = "dox", feature(doc_cfg))]

use cairo_sys as cairo;
use clutter_sys as clutter;
use cogl_sys as cogl;
use gdesktop_enums_sys as gdesktop_enums;
use glib_sys as glib;
use gio_sys as gio;
use gobject_sys as gobject;
use graphene_sys as graphene;
use gtk_sys as gtk;
use pango_sys as pango;
use xlib_sys as xlib;

#[allow(unused_imports)]
use libc::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong,
    c_void, size_t, ssize_t, intptr_t, uintptr_t, time_t, FILE};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

// Enums
pub type MetaButtonFunction = c_int;
pub const META_BUTTON_FUNCTION_MENU: MetaButtonFunction = 0;
pub const META_BUTTON_FUNCTION_MINIMIZE: MetaButtonFunction = 1;
pub const META_BUTTON_FUNCTION_MAXIMIZE: MetaButtonFunction = 2;
pub const META_BUTTON_FUNCTION_CLOSE: MetaButtonFunction = 3;
pub const META_BUTTON_FUNCTION_LAST: MetaButtonFunction = 4;

pub type MetaCloseDialogResponse = c_int;
pub const META_CLOSE_DIALOG_RESPONSE_WAIT: MetaCloseDialogResponse = 0;
pub const META_CLOSE_DIALOG_RESPONSE_FORCE_CLOSE: MetaCloseDialogResponse = 1;

pub type MetaCompEffect = c_int;
pub const META_COMP_EFFECT_CREATE: MetaCompEffect = 0;
pub const META_COMP_EFFECT_UNMINIMIZE: MetaCompEffect = 1;
pub const META_COMP_EFFECT_DESTROY: MetaCompEffect = 2;
pub const META_COMP_EFFECT_MINIMIZE: MetaCompEffect = 3;
pub const META_COMP_EFFECT_NONE: MetaCompEffect = 4;

pub type MetaCursor = c_int;
pub const META_CURSOR_NONE: MetaCursor = 0;
pub const META_CURSOR_DEFAULT: MetaCursor = 1;
pub const META_CURSOR_NORTH_RESIZE: MetaCursor = 2;
pub const META_CURSOR_SOUTH_RESIZE: MetaCursor = 3;
pub const META_CURSOR_WEST_RESIZE: MetaCursor = 4;
pub const META_CURSOR_EAST_RESIZE: MetaCursor = 5;
pub const META_CURSOR_SE_RESIZE: MetaCursor = 6;
pub const META_CURSOR_SW_RESIZE: MetaCursor = 7;
pub const META_CURSOR_NE_RESIZE: MetaCursor = 8;
pub const META_CURSOR_NW_RESIZE: MetaCursor = 9;
pub const META_CURSOR_MOVE_OR_RESIZE_WINDOW: MetaCursor = 10;
pub const META_CURSOR_BUSY: MetaCursor = 11;
pub const META_CURSOR_DND_IN_DRAG: MetaCursor = 12;
pub const META_CURSOR_DND_MOVE: MetaCursor = 13;
pub const META_CURSOR_DND_COPY: MetaCursor = 14;
pub const META_CURSOR_DND_UNSUPPORTED_TARGET: MetaCursor = 15;
pub const META_CURSOR_POINTING_HAND: MetaCursor = 16;
pub const META_CURSOR_CROSSHAIR: MetaCursor = 17;
pub const META_CURSOR_IBEAM: MetaCursor = 18;
pub const META_CURSOR_BLANK: MetaCursor = 19;
pub const META_CURSOR_LAST: MetaCursor = 20;

pub type MetaDisplayCorner = c_int;
pub const META_DISPLAY_TOPLEFT: MetaDisplayCorner = 0;
pub const META_DISPLAY_TOPRIGHT: MetaDisplayCorner = 1;
pub const META_DISPLAY_BOTTOMLEFT: MetaDisplayCorner = 2;
pub const META_DISPLAY_BOTTOMRIGHT: MetaDisplayCorner = 3;

pub type MetaDisplayDirection = c_int;
pub const META_DISPLAY_UP: MetaDisplayDirection = 0;
pub const META_DISPLAY_DOWN: MetaDisplayDirection = 1;
pub const META_DISPLAY_LEFT: MetaDisplayDirection = 2;
pub const META_DISPLAY_RIGHT: MetaDisplayDirection = 3;

pub type MetaEdgeType = c_int;
pub const META_EDGE_WINDOW: MetaEdgeType = 0;
pub const META_EDGE_MONITOR: MetaEdgeType = 1;
pub const META_EDGE_SCREEN: MetaEdgeType = 2;

pub type MetaExitCode = c_int;
pub const META_EXIT_SUCCESS: MetaExitCode = 0;
pub const META_EXIT_ERROR: MetaExitCode = 1;

pub type MetaFrameType = c_int;
pub const META_FRAME_TYPE_NORMAL: MetaFrameType = 0;
pub const META_FRAME_TYPE_DIALOG: MetaFrameType = 1;
pub const META_FRAME_TYPE_MODAL_DIALOG: MetaFrameType = 2;
pub const META_FRAME_TYPE_UTILITY: MetaFrameType = 3;
pub const META_FRAME_TYPE_MENU: MetaFrameType = 4;
pub const META_FRAME_TYPE_BORDER: MetaFrameType = 5;
pub const META_FRAME_TYPE_ATTACHED: MetaFrameType = 6;
pub const META_FRAME_TYPE_LAST: MetaFrameType = 7;

pub type MetaGrabOp = c_int;
pub const META_GRAB_OP_NONE: MetaGrabOp = 0;
pub const META_GRAB_OP_WINDOW_BASE: MetaGrabOp = 1;
pub const META_GRAB_OP_COMPOSITOR: MetaGrabOp = 2;
pub const META_GRAB_OP_WAYLAND_POPUP: MetaGrabOp = 3;
pub const META_GRAB_OP_FRAME_BUTTON: MetaGrabOp = 4;
pub const META_GRAB_OP_MOVING: MetaGrabOp = 1;
pub const META_GRAB_OP_RESIZING_NW: MetaGrabOp = 36865;
pub const META_GRAB_OP_RESIZING_N: MetaGrabOp = 32769;
pub const META_GRAB_OP_RESIZING_NE: MetaGrabOp = 40961;
pub const META_GRAB_OP_RESIZING_E: MetaGrabOp = 8193;
pub const META_GRAB_OP_RESIZING_SW: MetaGrabOp = 20481;
pub const META_GRAB_OP_RESIZING_S: MetaGrabOp = 16385;
pub const META_GRAB_OP_RESIZING_SE: MetaGrabOp = 24577;
pub const META_GRAB_OP_RESIZING_W: MetaGrabOp = 4097;
pub const META_GRAB_OP_KEYBOARD_MOVING: MetaGrabOp = 257;
pub const META_GRAB_OP_KEYBOARD_RESIZING_UNKNOWN: MetaGrabOp = 769;
pub const META_GRAB_OP_KEYBOARD_RESIZING_NW: MetaGrabOp = 37121;
pub const META_GRAB_OP_KEYBOARD_RESIZING_N: MetaGrabOp = 33025;
pub const META_GRAB_OP_KEYBOARD_RESIZING_NE: MetaGrabOp = 41217;
pub const META_GRAB_OP_KEYBOARD_RESIZING_E: MetaGrabOp = 8449;
pub const META_GRAB_OP_KEYBOARD_RESIZING_SW: MetaGrabOp = 20737;
pub const META_GRAB_OP_KEYBOARD_RESIZING_S: MetaGrabOp = 16641;
pub const META_GRAB_OP_KEYBOARD_RESIZING_SE: MetaGrabOp = 24833;
pub const META_GRAB_OP_KEYBOARD_RESIZING_W: MetaGrabOp = 4353;

pub type MetaGravity = c_int;
pub const META_GRAVITY_NONE: MetaGravity = 0;
pub const META_GRAVITY_NORTH_WEST: MetaGravity = 1;
pub const META_GRAVITY_NORTH: MetaGravity = 2;
pub const META_GRAVITY_NORTH_EAST: MetaGravity = 3;
pub const META_GRAVITY_WEST: MetaGravity = 4;
pub const META_GRAVITY_CENTER: MetaGravity = 5;
pub const META_GRAVITY_EAST: MetaGravity = 6;
pub const META_GRAVITY_SOUTH_WEST: MetaGravity = 7;
pub const META_GRAVITY_SOUTH: MetaGravity = 8;
pub const META_GRAVITY_SOUTH_EAST: MetaGravity = 9;
pub const META_GRAVITY_STATIC: MetaGravity = 10;

pub type MetaInhibitShortcutsDialogResponse = c_int;
pub const META_INHIBIT_SHORTCUTS_DIALOG_RESPONSE_ALLOW: MetaInhibitShortcutsDialogResponse = 0;
pub const META_INHIBIT_SHORTCUTS_DIALOG_RESPONSE_DENY: MetaInhibitShortcutsDialogResponse = 1;

pub type MetaKeyBindingAction = c_int;
pub const META_KEYBINDING_ACTION_NONE: MetaKeyBindingAction = 0;
pub const META_KEYBINDING_ACTION_WORKSPACE_1: MetaKeyBindingAction = 1;
pub const META_KEYBINDING_ACTION_WORKSPACE_2: MetaKeyBindingAction = 2;
pub const META_KEYBINDING_ACTION_WORKSPACE_3: MetaKeyBindingAction = 3;
pub const META_KEYBINDING_ACTION_WORKSPACE_4: MetaKeyBindingAction = 4;
pub const META_KEYBINDING_ACTION_WORKSPACE_5: MetaKeyBindingAction = 5;
pub const META_KEYBINDING_ACTION_WORKSPACE_6: MetaKeyBindingAction = 6;
pub const META_KEYBINDING_ACTION_WORKSPACE_7: MetaKeyBindingAction = 7;
pub const META_KEYBINDING_ACTION_WORKSPACE_8: MetaKeyBindingAction = 8;
pub const META_KEYBINDING_ACTION_WORKSPACE_9: MetaKeyBindingAction = 9;
pub const META_KEYBINDING_ACTION_WORKSPACE_10: MetaKeyBindingAction = 10;
pub const META_KEYBINDING_ACTION_WORKSPACE_11: MetaKeyBindingAction = 11;
pub const META_KEYBINDING_ACTION_WORKSPACE_12: MetaKeyBindingAction = 12;
pub const META_KEYBINDING_ACTION_WORKSPACE_LEFT: MetaKeyBindingAction = 13;
pub const META_KEYBINDING_ACTION_WORKSPACE_RIGHT: MetaKeyBindingAction = 14;
pub const META_KEYBINDING_ACTION_WORKSPACE_UP: MetaKeyBindingAction = 15;
pub const META_KEYBINDING_ACTION_WORKSPACE_DOWN: MetaKeyBindingAction = 16;
pub const META_KEYBINDING_ACTION_WORKSPACE_LAST: MetaKeyBindingAction = 17;
pub const META_KEYBINDING_ACTION_SWITCH_APPLICATIONS: MetaKeyBindingAction = 18;
pub const META_KEYBINDING_ACTION_SWITCH_APPLICATIONS_BACKWARD: MetaKeyBindingAction = 19;
pub const META_KEYBINDING_ACTION_SWITCH_GROUP: MetaKeyBindingAction = 20;
pub const META_KEYBINDING_ACTION_SWITCH_GROUP_BACKWARD: MetaKeyBindingAction = 21;
pub const META_KEYBINDING_ACTION_SWITCH_WINDOWS: MetaKeyBindingAction = 22;
pub const META_KEYBINDING_ACTION_SWITCH_WINDOWS_BACKWARD: MetaKeyBindingAction = 23;
pub const META_KEYBINDING_ACTION_SWITCH_PANELS: MetaKeyBindingAction = 24;
pub const META_KEYBINDING_ACTION_SWITCH_PANELS_BACKWARD: MetaKeyBindingAction = 25;
pub const META_KEYBINDING_ACTION_CYCLE_GROUP: MetaKeyBindingAction = 26;
pub const META_KEYBINDING_ACTION_CYCLE_GROUP_BACKWARD: MetaKeyBindingAction = 27;
pub const META_KEYBINDING_ACTION_CYCLE_WINDOWS: MetaKeyBindingAction = 28;
pub const META_KEYBINDING_ACTION_CYCLE_WINDOWS_BACKWARD: MetaKeyBindingAction = 29;
pub const META_KEYBINDING_ACTION_CYCLE_PANELS: MetaKeyBindingAction = 30;
pub const META_KEYBINDING_ACTION_CYCLE_PANELS_BACKWARD: MetaKeyBindingAction = 31;
pub const META_KEYBINDING_ACTION_SHOW_DESKTOP: MetaKeyBindingAction = 32;
pub const META_KEYBINDING_ACTION_PANEL_MAIN_MENU: MetaKeyBindingAction = 33;
pub const META_KEYBINDING_ACTION_PANEL_RUN_DIALOG: MetaKeyBindingAction = 34;
pub const META_KEYBINDING_ACTION_TOGGLE_RECORDING: MetaKeyBindingAction = 35;
pub const META_KEYBINDING_ACTION_SET_SPEW_MARK: MetaKeyBindingAction = 36;
pub const META_KEYBINDING_ACTION_ACTIVATE_WINDOW_MENU: MetaKeyBindingAction = 37;
pub const META_KEYBINDING_ACTION_TOGGLE_FULLSCREEN: MetaKeyBindingAction = 38;
pub const META_KEYBINDING_ACTION_TOGGLE_MAXIMIZED: MetaKeyBindingAction = 39;
pub const META_KEYBINDING_ACTION_TOGGLE_TILED_LEFT: MetaKeyBindingAction = 40;
pub const META_KEYBINDING_ACTION_TOGGLE_TILED_RIGHT: MetaKeyBindingAction = 41;
pub const META_KEYBINDING_ACTION_TOGGLE_ABOVE: MetaKeyBindingAction = 42;
pub const META_KEYBINDING_ACTION_MAXIMIZE: MetaKeyBindingAction = 43;
pub const META_KEYBINDING_ACTION_UNMAXIMIZE: MetaKeyBindingAction = 44;
pub const META_KEYBINDING_ACTION_TOGGLE_SHADED: MetaKeyBindingAction = 45;
pub const META_KEYBINDING_ACTION_MINIMIZE: MetaKeyBindingAction = 46;
pub const META_KEYBINDING_ACTION_CLOSE: MetaKeyBindingAction = 47;
pub const META_KEYBINDING_ACTION_BEGIN_MOVE: MetaKeyBindingAction = 48;
pub const META_KEYBINDING_ACTION_BEGIN_RESIZE: MetaKeyBindingAction = 49;
pub const META_KEYBINDING_ACTION_TOGGLE_ON_ALL_WORKSPACES: MetaKeyBindingAction = 50;
pub const META_KEYBINDING_ACTION_MOVE_TO_WORKSPACE_1: MetaKeyBindingAction = 51;
pub const META_KEYBINDING_ACTION_MOVE_TO_WORKSPACE_2: MetaKeyBindingAction = 52;
pub const META_KEYBINDING_ACTION_MOVE_TO_WORKSPACE_3: MetaKeyBindingAction = 53;
pub const META_KEYBINDING_ACTION_MOVE_TO_WORKSPACE_4: MetaKeyBindingAction = 54;
pub const META_KEYBINDING_ACTION_MOVE_TO_WORKSPACE_5: MetaKeyBindingAction = 55;
pub const META_KEYBINDING_ACTION_MOVE_TO_WORKSPACE_6: MetaKeyBindingAction = 56;
pub const META_KEYBINDING_ACTION_MOVE_TO_WORKSPACE_7: MetaKeyBindingAction = 57;
pub const META_KEYBINDING_ACTION_MOVE_TO_WORKSPACE_8: MetaKeyBindingAction = 58;
pub const META_KEYBINDING_ACTION_MOVE_TO_WORKSPACE_9: MetaKeyBindingAction = 59;
pub const META_KEYBINDING_ACTION_MOVE_TO_WORKSPACE_10: MetaKeyBindingAction = 60;
pub const META_KEYBINDING_ACTION_MOVE_TO_WORKSPACE_11: MetaKeyBindingAction = 61;
pub const META_KEYBINDING_ACTION_MOVE_TO_WORKSPACE_12: MetaKeyBindingAction = 62;
pub const META_KEYBINDING_ACTION_MOVE_TO_WORKSPACE_LEFT: MetaKeyBindingAction = 63;
pub const META_KEYBINDING_ACTION_MOVE_TO_WORKSPACE_RIGHT: MetaKeyBindingAction = 64;
pub const META_KEYBINDING_ACTION_MOVE_TO_WORKSPACE_UP: MetaKeyBindingAction = 65;
pub const META_KEYBINDING_ACTION_MOVE_TO_WORKSPACE_DOWN: MetaKeyBindingAction = 66;
pub const META_KEYBINDING_ACTION_MOVE_TO_WORKSPACE_LAST: MetaKeyBindingAction = 67;
pub const META_KEYBINDING_ACTION_MOVE_TO_MONITOR_LEFT: MetaKeyBindingAction = 68;
pub const META_KEYBINDING_ACTION_MOVE_TO_MONITOR_RIGHT: MetaKeyBindingAction = 69;
pub const META_KEYBINDING_ACTION_MOVE_TO_MONITOR_UP: MetaKeyBindingAction = 70;
pub const META_KEYBINDING_ACTION_MOVE_TO_MONITOR_DOWN: MetaKeyBindingAction = 71;
pub const META_KEYBINDING_ACTION_RAISE_OR_LOWER: MetaKeyBindingAction = 72;
pub const META_KEYBINDING_ACTION_RAISE: MetaKeyBindingAction = 73;
pub const META_KEYBINDING_ACTION_LOWER: MetaKeyBindingAction = 74;
pub const META_KEYBINDING_ACTION_MAXIMIZE_VERTICALLY: MetaKeyBindingAction = 75;
pub const META_KEYBINDING_ACTION_MAXIMIZE_HORIZONTALLY: MetaKeyBindingAction = 76;
pub const META_KEYBINDING_ACTION_MOVE_TO_CORNER_NW: MetaKeyBindingAction = 77;
pub const META_KEYBINDING_ACTION_MOVE_TO_CORNER_NE: MetaKeyBindingAction = 78;
pub const META_KEYBINDING_ACTION_MOVE_TO_CORNER_SW: MetaKeyBindingAction = 79;
pub const META_KEYBINDING_ACTION_MOVE_TO_CORNER_SE: MetaKeyBindingAction = 80;
pub const META_KEYBINDING_ACTION_MOVE_TO_SIDE_N: MetaKeyBindingAction = 81;
pub const META_KEYBINDING_ACTION_MOVE_TO_SIDE_S: MetaKeyBindingAction = 82;
pub const META_KEYBINDING_ACTION_MOVE_TO_SIDE_E: MetaKeyBindingAction = 83;
pub const META_KEYBINDING_ACTION_MOVE_TO_SIDE_W: MetaKeyBindingAction = 84;
pub const META_KEYBINDING_ACTION_MOVE_TO_CENTER: MetaKeyBindingAction = 85;
pub const META_KEYBINDING_ACTION_OVERLAY_KEY: MetaKeyBindingAction = 86;
pub const META_KEYBINDING_ACTION_LOCATE_POINTER_KEY: MetaKeyBindingAction = 87;
pub const META_KEYBINDING_ACTION_ISO_NEXT_GROUP: MetaKeyBindingAction = 88;
pub const META_KEYBINDING_ACTION_ALWAYS_ON_TOP: MetaKeyBindingAction = 89;
pub const META_KEYBINDING_ACTION_SWITCH_MONITOR: MetaKeyBindingAction = 90;
pub const META_KEYBINDING_ACTION_ROTATE_MONITOR: MetaKeyBindingAction = 91;
pub const META_KEYBINDING_ACTION_LAST: MetaKeyBindingAction = 92;

pub type MetaLaterType = c_int;
pub const META_LATER_RESIZE: MetaLaterType = 0;
pub const META_LATER_CALC_SHOWING: MetaLaterType = 1;
pub const META_LATER_CHECK_FULLSCREEN: MetaLaterType = 2;
pub const META_LATER_SYNC_STACK: MetaLaterType = 3;
pub const META_LATER_BEFORE_REDRAW: MetaLaterType = 4;
pub const META_LATER_IDLE: MetaLaterType = 5;

pub type MetaLocaleDirection = c_int;
pub const META_LOCALE_DIRECTION_LTR: MetaLocaleDirection = 0;
pub const META_LOCALE_DIRECTION_RTL: MetaLocaleDirection = 1;

pub type MetaMonitorSwitchConfigType = c_int;
pub const META_MONITOR_SWITCH_CONFIG_ALL_MIRROR: MetaMonitorSwitchConfigType = 0;
pub const META_MONITOR_SWITCH_CONFIG_ALL_LINEAR: MetaMonitorSwitchConfigType = 1;
pub const META_MONITOR_SWITCH_CONFIG_EXTERNAL: MetaMonitorSwitchConfigType = 2;
pub const META_MONITOR_SWITCH_CONFIG_BUILTIN: MetaMonitorSwitchConfigType = 3;
pub const META_MONITOR_SWITCH_CONFIG_UNKNOWN: MetaMonitorSwitchConfigType = 4;

pub type MetaMotionDirection = c_int;
pub const META_MOTION_UP: MetaMotionDirection = -1;
pub const META_MOTION_DOWN: MetaMotionDirection = -2;
pub const META_MOTION_LEFT: MetaMotionDirection = -3;
pub const META_MOTION_RIGHT: MetaMotionDirection = -4;
pub const META_MOTION_UP_LEFT: MetaMotionDirection = -5;
pub const META_MOTION_UP_RIGHT: MetaMotionDirection = -6;
pub const META_MOTION_DOWN_LEFT: MetaMotionDirection = -7;
pub const META_MOTION_DOWN_RIGHT: MetaMotionDirection = -8;

pub type MetaPadActionType = c_int;
pub const META_PAD_ACTION_BUTTON: MetaPadActionType = 0;
pub const META_PAD_ACTION_RING: MetaPadActionType = 1;
pub const META_PAD_ACTION_STRIP: MetaPadActionType = 2;

pub type MetaPreference = c_int;
pub const META_PREF_MOUSE_BUTTON_MODS: MetaPreference = 0;
pub const META_PREF_FOCUS_MODE: MetaPreference = 1;
pub const META_PREF_FOCUS_NEW_WINDOWS: MetaPreference = 2;
pub const META_PREF_ATTACH_MODAL_DIALOGS: MetaPreference = 3;
pub const META_PREF_RAISE_ON_CLICK: MetaPreference = 4;
pub const META_PREF_ACTION_DOUBLE_CLICK_TITLEBAR: MetaPreference = 5;
pub const META_PREF_ACTION_MIDDLE_CLICK_TITLEBAR: MetaPreference = 6;
pub const META_PREF_ACTION_RIGHT_CLICK_TITLEBAR: MetaPreference = 7;
pub const META_PREF_AUTO_RAISE: MetaPreference = 8;
pub const META_PREF_AUTO_RAISE_DELAY: MetaPreference = 9;
pub const META_PREF_FOCUS_CHANGE_ON_POINTER_REST: MetaPreference = 10;
pub const META_PREF_TITLEBAR_FONT: MetaPreference = 11;
pub const META_PREF_NUM_WORKSPACES: MetaPreference = 12;
pub const META_PREF_DYNAMIC_WORKSPACES: MetaPreference = 13;
pub const META_PREF_KEYBINDINGS: MetaPreference = 14;
pub const META_PREF_DISABLE_WORKAROUNDS: MetaPreference = 15;
pub const META_PREF_BUTTON_LAYOUT: MetaPreference = 16;
pub const META_PREF_WORKSPACE_NAMES: MetaPreference = 17;
pub const META_PREF_VISUAL_BELL: MetaPreference = 18;
pub const META_PREF_AUDIBLE_BELL: MetaPreference = 19;
pub const META_PREF_VISUAL_BELL_TYPE: MetaPreference = 20;
pub const META_PREF_GNOME_ACCESSIBILITY: MetaPreference = 21;
pub const META_PREF_GNOME_ANIMATIONS: MetaPreference = 22;
pub const META_PREF_CURSOR_THEME: MetaPreference = 23;
pub const META_PREF_CURSOR_SIZE: MetaPreference = 24;
pub const META_PREF_RESIZE_WITH_RIGHT_BUTTON: MetaPreference = 25;
pub const META_PREF_EDGE_TILING: MetaPreference = 26;
pub const META_PREF_FORCE_FULLSCREEN: MetaPreference = 27;
pub const META_PREF_WORKSPACES_ONLY_ON_PRIMARY: MetaPreference = 28;
pub const META_PREF_DRAGGABLE_BORDER_WIDTH: MetaPreference = 29;
pub const META_PREF_AUTO_MAXIMIZE: MetaPreference = 30;
pub const META_PREF_CENTER_NEW_WINDOWS: MetaPreference = 31;
pub const META_PREF_DRAG_THRESHOLD: MetaPreference = 32;
pub const META_PREF_LOCATE_POINTER: MetaPreference = 33;
pub const META_PREF_CHECK_ALIVE_TIMEOUT: MetaPreference = 34;

pub type MetaSelectionType = c_int;
pub const META_SELECTION_PRIMARY: MetaSelectionType = 0;
pub const META_SELECTION_CLIPBOARD: MetaSelectionType = 1;
pub const META_SELECTION_DND: MetaSelectionType = 2;
pub const META_N_SELECTION_TYPES: MetaSelectionType = 3;

pub type MetaShadowMode = c_int;
pub const META_SHADOW_MODE_AUTO: MetaShadowMode = 0;
pub const META_SHADOW_MODE_FORCED_OFF: MetaShadowMode = 1;
pub const META_SHADOW_MODE_FORCED_ON: MetaShadowMode = 2;

pub type MetaSide = c_int;
pub const META_SIDE_LEFT: MetaSide = 1;
pub const META_SIDE_RIGHT: MetaSide = 2;
pub const META_SIDE_TOP: MetaSide = 4;
pub const META_SIDE_BOTTOM: MetaSide = 8;

pub type MetaSizeChange = c_int;
pub const META_SIZE_CHANGE_MAXIMIZE: MetaSizeChange = 0;
pub const META_SIZE_CHANGE_UNMAXIMIZE: MetaSizeChange = 1;
pub const META_SIZE_CHANGE_FULLSCREEN: MetaSizeChange = 2;
pub const META_SIZE_CHANGE_UNFULLSCREEN: MetaSizeChange = 3;

pub type MetaStackLayer = c_int;
pub const META_LAYER_DESKTOP: MetaStackLayer = 0;
pub const META_LAYER_BOTTOM: MetaStackLayer = 1;
pub const META_LAYER_NORMAL: MetaStackLayer = 2;
pub const META_LAYER_TOP: MetaStackLayer = 4;
pub const META_LAYER_DOCK: MetaStackLayer = 4;
pub const META_LAYER_OVERRIDE_REDIRECT: MetaStackLayer = 7;
pub const META_LAYER_LAST: MetaStackLayer = 8;

pub type MetaTabList = c_int;
pub const META_TAB_LIST_NORMAL: MetaTabList = 0;
pub const META_TAB_LIST_DOCKS: MetaTabList = 1;
pub const META_TAB_LIST_GROUP: MetaTabList = 2;
pub const META_TAB_LIST_NORMAL_ALL: MetaTabList = 3;

pub type MetaTabShowType = c_int;
pub const META_TAB_SHOW_ICON: MetaTabShowType = 0;
pub const META_TAB_SHOW_INSTANTLY: MetaTabShowType = 1;

pub type MetaWindowClientType = c_int;
pub const META_WINDOW_CLIENT_TYPE_WAYLAND: MetaWindowClientType = 0;
pub const META_WINDOW_CLIENT_TYPE_X11: MetaWindowClientType = 1;

pub type MetaWindowMenuType = c_int;
pub const META_WINDOW_MENU_WM: MetaWindowMenuType = 0;
pub const META_WINDOW_MENU_APP: MetaWindowMenuType = 1;

pub type MetaWindowType = c_int;
pub const META_WINDOW_NORMAL: MetaWindowType = 0;
pub const META_WINDOW_DESKTOP: MetaWindowType = 1;
pub const META_WINDOW_DOCK: MetaWindowType = 2;
pub const META_WINDOW_DIALOG: MetaWindowType = 3;
pub const META_WINDOW_MODAL_DIALOG: MetaWindowType = 4;
pub const META_WINDOW_TOOLBAR: MetaWindowType = 5;
pub const META_WINDOW_MENU: MetaWindowType = 6;
pub const META_WINDOW_UTILITY: MetaWindowType = 7;
pub const META_WINDOW_SPLASHSCREEN: MetaWindowType = 8;
pub const META_WINDOW_DROPDOWN_MENU: MetaWindowType = 9;
pub const META_WINDOW_POPUP_MENU: MetaWindowType = 10;
pub const META_WINDOW_TOOLTIP: MetaWindowType = 11;
pub const META_WINDOW_NOTIFICATION: MetaWindowType = 12;
pub const META_WINDOW_COMBO: MetaWindowType = 13;
pub const META_WINDOW_DND: MetaWindowType = 14;
pub const META_WINDOW_OVERRIDE_OTHER: MetaWindowType = 15;

// Constants
pub const META_CURRENT_TIME: c_int = 0;
pub const META_DEFAULT_ICON_NAME: *const c_char = b"window\0" as *const u8 as *const c_char;
pub const META_ICON_HEIGHT: c_int = 96;
pub const META_ICON_WIDTH: c_int = 96;
pub const META_MINI_ICON_HEIGHT: c_int = 16;
pub const META_MINI_ICON_WIDTH: c_int = 16;
pub const META_PRIORITY_BEFORE_REDRAW: c_int = 40;
pub const META_PRIORITY_PREFS_NOTIFY: c_int = 10;
pub const META_PRIORITY_REDRAW: c_int = 50;
pub const META_PRIORITY_RESIZE: c_int = 15;
pub const META_VIRTUAL_CORE_KEYBOARD_ID: c_int = 3;
pub const META_VIRTUAL_CORE_POINTER_ID: c_int = 2;

// Flags
pub type MetaBarrierDirection = c_uint;
pub const META_BARRIER_DIRECTION_POSITIVE_X: MetaBarrierDirection = 1;
pub const META_BARRIER_DIRECTION_POSITIVE_Y: MetaBarrierDirection = 2;
pub const META_BARRIER_DIRECTION_NEGATIVE_X: MetaBarrierDirection = 4;
pub const META_BARRIER_DIRECTION_NEGATIVE_Y: MetaBarrierDirection = 8;

pub type MetaDebugPaintFlag = c_uint;
pub const META_DEBUG_PAINT_NONE: MetaDebugPaintFlag = 0;
pub const META_DEBUG_PAINT_OPAQUE_REGION: MetaDebugPaintFlag = 1;

pub type MetaDebugTopic = c_uint;
pub const META_DEBUG_VERBOSE: MetaDebugTopic = 4294967295;
pub const META_DEBUG_FOCUS: MetaDebugTopic = 1;
pub const META_DEBUG_WORKAREA: MetaDebugTopic = 2;
pub const META_DEBUG_STACK: MetaDebugTopic = 4;
pub const META_DEBUG_SM: MetaDebugTopic = 8;
pub const META_DEBUG_EVENTS: MetaDebugTopic = 16;
pub const META_DEBUG_WINDOW_STATE: MetaDebugTopic = 32;
pub const META_DEBUG_WINDOW_OPS: MetaDebugTopic = 64;
pub const META_DEBUG_GEOMETRY: MetaDebugTopic = 128;
pub const META_DEBUG_PLACEMENT: MetaDebugTopic = 256;
pub const META_DEBUG_PING: MetaDebugTopic = 512;
pub const META_DEBUG_KEYBINDINGS: MetaDebugTopic = 1024;
pub const META_DEBUG_SYNC: MetaDebugTopic = 2048;
pub const META_DEBUG_STARTUP: MetaDebugTopic = 4096;
pub const META_DEBUG_PREFS: MetaDebugTopic = 8192;
pub const META_DEBUG_GROUPS: MetaDebugTopic = 16384;
pub const META_DEBUG_RESIZING: MetaDebugTopic = 32768;
pub const META_DEBUG_SHAPES: MetaDebugTopic = 65536;
pub const META_DEBUG_EDGE_RESISTANCE: MetaDebugTopic = 131072;
pub const META_DEBUG_DBUS: MetaDebugTopic = 262144;
pub const META_DEBUG_INPUT: MetaDebugTopic = 524288;
pub const META_DEBUG_WAYLAND: MetaDebugTopic = 1048576;
pub const META_DEBUG_KMS: MetaDebugTopic = 2097152;
pub const META_DEBUG_SCREEN_CAST: MetaDebugTopic = 4194304;
pub const META_DEBUG_REMOTE_DESKTOP: MetaDebugTopic = 8388608;

pub type MetaDirection = c_uint;
pub const META_DIRECTION_LEFT: MetaDirection = 1;
pub const META_DIRECTION_RIGHT: MetaDirection = 2;
pub const META_DIRECTION_TOP: MetaDirection = 4;
pub const META_DIRECTION_BOTTOM: MetaDirection = 8;
pub const META_DIRECTION_UP: MetaDirection = 4;
pub const META_DIRECTION_DOWN: MetaDirection = 8;
pub const META_DIRECTION_HORIZONTAL: MetaDirection = 3;
pub const META_DIRECTION_VERTICAL: MetaDirection = 12;

pub type MetaFrameFlags = c_uint;
pub const META_FRAME_ALLOWS_DELETE: MetaFrameFlags = 1;
pub const META_FRAME_ALLOWS_MENU: MetaFrameFlags = 2;
pub const META_FRAME_ALLOWS_MINIMIZE: MetaFrameFlags = 4;
pub const META_FRAME_ALLOWS_MAXIMIZE: MetaFrameFlags = 8;
pub const META_FRAME_ALLOWS_VERTICAL_RESIZE: MetaFrameFlags = 16;
pub const META_FRAME_ALLOWS_HORIZONTAL_RESIZE: MetaFrameFlags = 32;
pub const META_FRAME_HAS_FOCUS: MetaFrameFlags = 64;
pub const META_FRAME_SHADED: MetaFrameFlags = 128;
pub const META_FRAME_STUCK: MetaFrameFlags = 256;
pub const META_FRAME_MAXIMIZED: MetaFrameFlags = 512;
pub const META_FRAME_ALLOWS_SHADE: MetaFrameFlags = 1024;
pub const META_FRAME_ALLOWS_MOVE: MetaFrameFlags = 2048;
pub const META_FRAME_FULLSCREEN: MetaFrameFlags = 4096;
pub const META_FRAME_ABOVE: MetaFrameFlags = 8192;
pub const META_FRAME_TILED_LEFT: MetaFrameFlags = 16384;
pub const META_FRAME_TILED_RIGHT: MetaFrameFlags = 32768;

pub type MetaKeyBindingFlags = c_uint;
pub const META_KEY_BINDING_NONE: MetaKeyBindingFlags = 0;
pub const META_KEY_BINDING_PER_WINDOW: MetaKeyBindingFlags = 1;
pub const META_KEY_BINDING_BUILTIN: MetaKeyBindingFlags = 2;
pub const META_KEY_BINDING_IS_REVERSED: MetaKeyBindingFlags = 4;
pub const META_KEY_BINDING_NON_MASKABLE: MetaKeyBindingFlags = 8;
pub const META_KEY_BINDING_IGNORE_AUTOREPEAT: MetaKeyBindingFlags = 16;
pub const META_KEY_BINDING_NO_AUTO_GRAB: MetaKeyBindingFlags = 32;

pub type MetaMaximizeFlags = c_uint;
pub const META_MAXIMIZE_HORIZONTAL: MetaMaximizeFlags = 1;
pub const META_MAXIMIZE_VERTICAL: MetaMaximizeFlags = 2;
pub const META_MAXIMIZE_BOTH: MetaMaximizeFlags = 3;

pub type MetaModalOptions = c_uint;
pub const META_MODAL_POINTER_ALREADY_GRABBED: MetaModalOptions = 1;
pub const META_MODAL_KEYBOARD_ALREADY_GRABBED: MetaModalOptions = 2;

pub type MetaVirtualModifier = c_uint;
pub const META_VIRTUAL_SHIFT_MASK: MetaVirtualModifier = 32;
pub const META_VIRTUAL_CONTROL_MASK: MetaVirtualModifier = 64;
pub const META_VIRTUAL_ALT_MASK: MetaVirtualModifier = 128;
pub const META_VIRTUAL_META_MASK: MetaVirtualModifier = 256;
pub const META_VIRTUAL_SUPER_MASK: MetaVirtualModifier = 512;
pub const META_VIRTUAL_HYPER_MASK: MetaVirtualModifier = 1024;
pub const META_VIRTUAL_MOD2_MASK: MetaVirtualModifier = 2048;
pub const META_VIRTUAL_MOD3_MASK: MetaVirtualModifier = 4096;
pub const META_VIRTUAL_MOD4_MASK: MetaVirtualModifier = 8192;
pub const META_VIRTUAL_MOD5_MASK: MetaVirtualModifier = 16384;

// Callbacks
pub type MetaIdleMonitorWatchFunc = Option<unsafe extern "C" fn(*mut MetaIdleMonitor, c_uint, gpointer)>;
pub type MetaKeyHandlerFunc = Option<unsafe extern "C" fn(*mut MetaDisplay, *mut MetaWindow, *mut clutter::ClutterKeyEvent, *mut MetaKeyBinding, gpointer)>;
pub type MetaPrefsChangedFunc = Option<unsafe extern "C" fn(MetaPreference, gpointer)>;
pub type MetaWindowForeachFunc = Option<unsafe extern "C" fn(*mut MetaWindow, *mut c_void) -> gboolean>;

// Records
#[repr(C)]
pub struct _MetaBackendClass(c_void);

pub type MetaBackendClass = *mut _MetaBackendClass;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaBackgroundActorClass {
    pub parent_class: clutter::ClutterActorClass,
}

impl ::std::fmt::Debug for MetaBackgroundActorClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaBackgroundActorClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaBackgroundClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for MetaBackgroundClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaBackgroundClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaBackgroundContentClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for MetaBackgroundContentClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaBackgroundContentClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaBackgroundGroupClass {
    pub parent_class: clutter::ClutterActorClass,
}

impl ::std::fmt::Debug for MetaBackgroundGroupClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaBackgroundGroupClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaBackgroundImageCacheClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for MetaBackgroundImageCacheClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaBackgroundImageCacheClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaBackgroundImageClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for MetaBackgroundImageClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaBackgroundImageClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaBarrierClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for MetaBarrierClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaBarrierClass @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaBarrierEvent {
    pub ref_count: /*volatile*/c_uint,
    pub event_id: c_int,
    pub dt: c_int,
    pub time: u32,
    pub x: c_double,
    pub y: c_double,
    pub dx: c_double,
    pub dy: c_double,
    pub released: gboolean,
    pub grabbed: gboolean,
}

impl ::std::fmt::Debug for MetaBarrierEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaBarrierEvent @ {:p}", self))
         .field("event_id", &self.event_id)
         .field("dt", &self.dt)
         .field("time", &self.time)
         .field("x", &self.x)
         .field("y", &self.y)
         .field("dx", &self.dx)
         .field("dy", &self.dy)
         .field("released", &self.released)
         .field("grabbed", &self.grabbed)
         .finish()
    }
}

#[repr(C)]
pub struct _MetaBarrierPrivate(c_void);

pub type MetaBarrierPrivate = *mut _MetaBarrierPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaButtonLayout {
    pub left_buttons: [MetaButtonFunction; 4],
    pub left_buttons_has_spacer: [gboolean; 4],
    pub right_buttons: [MetaButtonFunction; 4],
    pub right_buttons_has_spacer: [gboolean; 4],
}

impl ::std::fmt::Debug for MetaButtonLayout {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaButtonLayout @ {:p}", self))
         .field("left_buttons", &self.left_buttons)
         .field("left_buttons_has_spacer", &self.left_buttons_has_spacer)
         .field("right_buttons", &self.right_buttons)
         .field("right_buttons_has_spacer", &self.right_buttons_has_spacer)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaCloseDialogInterface {
    pub parent_iface: gobject::GTypeInterface,
    pub show: Option<unsafe extern "C" fn(*mut MetaCloseDialog)>,
    pub hide: Option<unsafe extern "C" fn(*mut MetaCloseDialog)>,
    pub focus: Option<unsafe extern "C" fn(*mut MetaCloseDialog)>,
}

impl ::std::fmt::Debug for MetaCloseDialogInterface {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaCloseDialogInterface @ {:p}", self))
         .field("parent_iface", &self.parent_iface)
         .field("show", &self.show)
         .field("hide", &self.hide)
         .field("focus", &self.focus)
         .finish()
    }
}

#[repr(C)]
pub struct _MetaCompositorClass(c_void);

pub type MetaCompositorClass = *mut _MetaCompositorClass;

#[repr(C)]
pub struct _MetaCursorTrackerClass(c_void);

pub type MetaCursorTrackerClass = *mut _MetaCursorTrackerClass;

#[repr(C)]
pub struct _MetaDisplayClass(c_void);

pub type MetaDisplayClass = *mut _MetaDisplayClass;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaDndClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for MetaDndClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaDndClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaEdge {
    pub rect: MetaRectangle,
    pub side_type: MetaSide,
    pub edge_type: MetaEdgeType,
}

impl ::std::fmt::Debug for MetaEdge {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaEdge @ {:p}", self))
         .field("rect", &self.rect)
         .field("side_type", &self.side_type)
         .field("edge_type", &self.edge_type)
         .finish()
    }
}

#[repr(C)]
pub struct _MetaFrame(c_void);

pub type MetaFrame = *mut _MetaFrame;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaFrameBorders {
    pub visible: gtk::GtkBorder,
    pub invisible: gtk::GtkBorder,
    pub total: gtk::GtkBorder,
}

impl ::std::fmt::Debug for MetaFrameBorders {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaFrameBorders @ {:p}", self))
         .field("visible", &self.visible)
         .field("invisible", &self.invisible)
         .field("total", &self.total)
         .finish()
    }
}

#[repr(C)]
pub struct _MetaGroup(c_void);

pub type MetaGroup = *mut _MetaGroup;

#[repr(C)]
pub struct _MetaIdleMonitorClass(c_void);

pub type MetaIdleMonitorClass = *mut _MetaIdleMonitorClass;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaInhibitShortcutsDialogInterface {
    pub parent_iface: gobject::GTypeInterface,
    pub show: Option<unsafe extern "C" fn(*mut MetaInhibitShortcutsDialog)>,
    pub hide: Option<unsafe extern "C" fn(*mut MetaInhibitShortcutsDialog)>,
}

impl ::std::fmt::Debug for MetaInhibitShortcutsDialogInterface {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaInhibitShortcutsDialogInterface @ {:p}", self))
         .field("parent_iface", &self.parent_iface)
         .field("show", &self.show)
         .field("hide", &self.hide)
         .finish()
    }
}

#[repr(C)]
pub struct MetaKeyBinding(c_void);

impl ::std::fmt::Debug for MetaKeyBinding {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaKeyBinding @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaLaunchContextClass {
    pub parent_class: gio::GAppLaunchContextClass,
}

impl ::std::fmt::Debug for MetaLaunchContextClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaLaunchContextClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
pub struct _MetaMonitorManagerClass(c_void);

pub type MetaMonitorManagerClass = *mut _MetaMonitorManagerClass;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaPluginClass {
    pub parent_class: gobject::GObjectClass,
    pub start: Option<unsafe extern "C" fn(*mut MetaPlugin)>,
    pub minimize: Option<unsafe extern "C" fn(*mut MetaPlugin, *mut MetaWindowActor)>,
    pub unminimize: Option<unsafe extern "C" fn(*mut MetaPlugin, *mut MetaWindowActor)>,
    pub size_changed: Option<unsafe extern "C" fn(*mut MetaPlugin, *mut MetaWindowActor)>,
    pub size_change: Option<unsafe extern "C" fn(*mut MetaPlugin, *mut MetaWindowActor, MetaSizeChange, *mut MetaRectangle, *mut MetaRectangle)>,
    pub map: Option<unsafe extern "C" fn(*mut MetaPlugin, *mut MetaWindowActor)>,
    pub destroy: Option<unsafe extern "C" fn(*mut MetaPlugin, *mut MetaWindowActor)>,
    pub switch_workspace: Option<unsafe extern "C" fn(*mut MetaPlugin, c_int, c_int, MetaMotionDirection)>,
    pub show_tile_preview: Option<unsafe extern "C" fn(*mut MetaPlugin, *mut MetaWindow, *mut MetaRectangle, c_int)>,
    pub hide_tile_preview: Option<unsafe extern "C" fn(*mut MetaPlugin)>,
    pub show_window_menu: Option<unsafe extern "C" fn(*mut MetaPlugin, *mut MetaWindow, MetaWindowMenuType, c_int, c_int)>,
    pub show_window_menu_for_rect: Option<unsafe extern "C" fn(*mut MetaPlugin, *mut MetaWindow, MetaWindowMenuType, *mut MetaRectangle)>,
    pub kill_window_effects: Option<unsafe extern "C" fn(*mut MetaPlugin, *mut MetaWindowActor)>,
    pub kill_switch_workspace: Option<unsafe extern "C" fn(*mut MetaPlugin)>,
    pub xevent_filter: Option<unsafe extern "C" fn(*mut MetaPlugin, *mut xlib::XEvent) -> gboolean>,
    pub keybinding_filter: Option<unsafe extern "C" fn(*mut MetaPlugin, *mut MetaKeyBinding) -> gboolean>,
    pub confirm_display_change: Option<unsafe extern "C" fn(*mut MetaPlugin)>,
    pub plugin_info: Option<unsafe extern "C" fn(*mut MetaPlugin) -> *const MetaPluginInfo>,
    pub create_close_dialog: Option<unsafe extern "C" fn(*mut MetaPlugin, *mut MetaWindow) -> *mut MetaCloseDialog>,
    pub create_inhibit_shortcuts_dialog: Option<unsafe extern "C" fn(*mut MetaPlugin, *mut MetaWindow) -> *mut MetaInhibitShortcutsDialog>,
    pub locate_pointer: Option<unsafe extern "C" fn(*mut MetaPlugin)>,
}

impl ::std::fmt::Debug for MetaPluginClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaPluginClass @ {:p}", self))
         .field("start", &self.start)
         .field("minimize", &self.minimize)
         .field("unminimize", &self.unminimize)
         .field("size_changed", &self.size_changed)
         .field("size_change", &self.size_change)
         .field("map", &self.map)
         .field("destroy", &self.destroy)
         .field("switch_workspace", &self.switch_workspace)
         .field("show_tile_preview", &self.show_tile_preview)
         .field("hide_tile_preview", &self.hide_tile_preview)
         .field("show_window_menu", &self.show_window_menu)
         .field("show_window_menu_for_rect", &self.show_window_menu_for_rect)
         .field("kill_window_effects", &self.kill_window_effects)
         .field("kill_switch_workspace", &self.kill_switch_workspace)
         .field("xevent_filter", &self.xevent_filter)
         .field("keybinding_filter", &self.keybinding_filter)
         .field("confirm_display_change", &self.confirm_display_change)
         .field("plugin_info", &self.plugin_info)
         .field("create_close_dialog", &self.create_close_dialog)
         .field("create_inhibit_shortcuts_dialog", &self.create_inhibit_shortcuts_dialog)
         .field("locate_pointer", &self.locate_pointer)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaPluginInfo {
    pub name: *const c_char,
    pub version: *const c_char,
    pub author: *const c_char,
    pub license: *const c_char,
    pub description: *const c_char,
}

impl ::std::fmt::Debug for MetaPluginInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaPluginInfo @ {:p}", self))
         .field("name", &self.name)
         .field("version", &self.version)
         .field("author", &self.author)
         .field("license", &self.license)
         .field("description", &self.description)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaRectangle {
    pub x: c_int,
    pub y: c_int,
    pub width: c_int,
    pub height: c_int,
}

impl ::std::fmt::Debug for MetaRectangle {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaRectangle @ {:p}", self))
         .field("x", &self.x)
         .field("y", &self.y)
         .field("width", &self.width)
         .field("height", &self.height)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaRemoteAccessControllerClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for MetaRemoteAccessControllerClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaRemoteAccessControllerClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaRemoteAccessHandleClass {
    pub parent_class: gobject::GObjectClass,
    pub stop: Option<unsafe extern "C" fn(*mut MetaRemoteAccessHandle)>,
}

impl ::std::fmt::Debug for MetaRemoteAccessHandleClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaRemoteAccessHandleClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .field("stop", &self.stop)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaSelectionClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for MetaSelectionClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaSelectionClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaSelectionSourceClass {
    pub parent_class: gobject::GObjectClass,
    pub activated: Option<unsafe extern "C" fn(*mut MetaSelectionSource)>,
    pub deactivated: Option<unsafe extern "C" fn(*mut MetaSelectionSource)>,
    pub get_mimetypes: Option<unsafe extern "C" fn(*mut MetaSelectionSource) -> *mut glib::GList>,
    pub read_async: Option<unsafe extern "C" fn(*mut MetaSelectionSource, *const c_char, *mut gio::GCancellable, gio::GAsyncReadyCallback, gpointer)>,
    pub read_finish: Option<unsafe extern "C" fn(*mut MetaSelectionSource, *mut gio::GAsyncResult, *mut *mut glib::GError) -> *mut gio::GInputStream>,
}

impl ::std::fmt::Debug for MetaSelectionSourceClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaSelectionSourceClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .field("activated", &self.activated)
         .field("deactivated", &self.deactivated)
         .field("get_mimetypes", &self.get_mimetypes)
         .field("read_async", &self.read_async)
         .field("read_finish", &self.read_finish)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaSelectionSourceMemoryClass {
    pub parent_class: MetaSelectionSourceClass,
}

impl ::std::fmt::Debug for MetaSelectionSourceMemoryClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaSelectionSourceMemoryClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
pub struct _MetaSettings(c_void);

pub type MetaSettings = *mut _MetaSettings;

#[repr(C)]
pub struct MetaShadow(c_void);

impl ::std::fmt::Debug for MetaShadow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaShadow @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaShadowFactoryClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for MetaShadowFactoryClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaShadowFactoryClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaShadowParams {
    pub radius: c_int,
    pub top_fade: c_int,
    pub x_offset: c_int,
    pub y_offset: c_int,
    pub opacity: u8,
}

impl ::std::fmt::Debug for MetaShadowParams {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaShadowParams @ {:p}", self))
         .field("radius", &self.radius)
         .field("top_fade", &self.top_fade)
         .field("x_offset", &self.x_offset)
         .field("y_offset", &self.y_offset)
         .field("opacity", &self.opacity)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaShapedTextureClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for MetaShapedTextureClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaShapedTextureClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaSoundPlayerClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for MetaSoundPlayerClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaSoundPlayerClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaStageClass {
    pub parent_class: clutter::ClutterStageClass,
}

impl ::std::fmt::Debug for MetaStageClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaStageClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaStartupNotificationClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for MetaStartupNotificationClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaStartupNotificationClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
pub struct _MetaStartupSequenceClass(c_void);

pub type MetaStartupSequenceClass = *mut _MetaStartupSequenceClass;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaStrut {
    pub rect: MetaRectangle,
    pub side: MetaSide,
}

impl ::std::fmt::Debug for MetaStrut {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaStrut @ {:p}", self))
         .field("rect", &self.rect)
         .field("side", &self.side)
         .finish()
    }
}

#[repr(C)]
pub struct _MetaTheme(c_void);

pub type MetaTheme = *mut _MetaTheme;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaWaylandClientClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for MetaWaylandClientClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaWaylandClientClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
pub struct _MetaWindowActorClass(c_void);

pub type MetaWindowActorClass = *mut _MetaWindowActorClass;

#[repr(C)]
pub struct _MetaWindowClass(c_void);

pub type MetaWindowClass = *mut _MetaWindowClass;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaWindowGroupClass {
    pub parent_class: clutter::ClutterActorClass,
}

impl ::std::fmt::Debug for MetaWindowGroupClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaWindowGroupClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
pub struct MetaWindowShape(c_void);

impl ::std::fmt::Debug for MetaWindowShape {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaWindowShape @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct _MetaWorkspaceClass(c_void);

pub type MetaWorkspaceClass = *mut _MetaWorkspaceClass;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaWorkspaceManagerClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for MetaWorkspaceManagerClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaWorkspaceManagerClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaX11DisplayClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for MetaX11DisplayClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaX11DisplayClass @ {:p}", self))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

// Classes
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaBackend {
    pub parent_instance: gobject::GObject,
}

impl ::std::fmt::Debug for MetaBackend {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaBackend @ {:p}", self))
         .field("parent_instance", &self.parent_instance)
         .finish()
    }
}

#[repr(C)]
pub struct MetaBackground(c_void);

impl ::std::fmt::Debug for MetaBackground {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaBackground @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct MetaBackgroundActor(c_void);

impl ::std::fmt::Debug for MetaBackgroundActor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaBackgroundActor @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct MetaBackgroundContent(c_void);

impl ::std::fmt::Debug for MetaBackgroundContent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaBackgroundContent @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaBackgroundGroup {
    pub parent_instance: clutter::ClutterActor,
}

impl ::std::fmt::Debug for MetaBackgroundGroup {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaBackgroundGroup @ {:p}", self))
         .field("parent_instance", &self.parent_instance)
         .finish()
    }
}

#[repr(C)]
pub struct MetaBackgroundImage(c_void);

impl ::std::fmt::Debug for MetaBackgroundImage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaBackgroundImage @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct MetaBackgroundImageCache(c_void);

impl ::std::fmt::Debug for MetaBackgroundImageCache {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaBackgroundImageCache @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaBarrier {
    pub parent: gobject::GObject,
    pub priv_: *mut MetaBarrierPrivate,
}

impl ::std::fmt::Debug for MetaBarrier {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaBarrier @ {:p}", self))
         .field("parent", &self.parent)
         .field("priv_", &self.priv_)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaCompositor {
    pub parent_instance: gobject::GObject,
}

impl ::std::fmt::Debug for MetaCompositor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaCompositor @ {:p}", self))
         .field("parent_instance", &self.parent_instance)
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaCursorTracker {
    pub parent_instance: gobject::GObject,
}

impl ::std::fmt::Debug for MetaCursorTracker {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaCursorTracker @ {:p}", self))
         .field("parent_instance", &self.parent_instance)
         .finish()
    }
}

#[repr(C)]
pub struct MetaDisplay(c_void);

impl ::std::fmt::Debug for MetaDisplay {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaDisplay @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct MetaDnd(c_void);

impl ::std::fmt::Debug for MetaDnd {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaDnd @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct MetaIdleMonitor(c_void);

impl ::std::fmt::Debug for MetaIdleMonitor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaIdleMonitor @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct MetaLaunchContext(c_void);

impl ::std::fmt::Debug for MetaLaunchContext {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaLaunchContext @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct MetaMonitorManager(c_void);

impl ::std::fmt::Debug for MetaMonitorManager {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaMonitorManager @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaPlugin {
    pub parent_instance: gobject::GObject,
}

impl ::std::fmt::Debug for MetaPlugin {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaPlugin @ {:p}", self))
         .field("parent_instance", &self.parent_instance)
         .finish()
    }
}

#[repr(C)]
pub struct MetaRemoteAccessController(c_void);

impl ::std::fmt::Debug for MetaRemoteAccessController {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaRemoteAccessController @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaRemoteAccessHandle {
    pub parent_instance: gobject::GObject,
}

impl ::std::fmt::Debug for MetaRemoteAccessHandle {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaRemoteAccessHandle @ {:p}", self))
         .field("parent_instance", &self.parent_instance)
         .finish()
    }
}

#[repr(C)]
pub struct MetaSelection(c_void);

impl ::std::fmt::Debug for MetaSelection {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaSelection @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaSelectionSource {
    pub parent_instance: gobject::GObject,
}

impl ::std::fmt::Debug for MetaSelectionSource {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaSelectionSource @ {:p}", self))
         .field("parent_instance", &self.parent_instance)
         .finish()
    }
}

#[repr(C)]
pub struct MetaSelectionSourceMemory(c_void);

impl ::std::fmt::Debug for MetaSelectionSourceMemory {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaSelectionSourceMemory @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct MetaShadowFactory(c_void);

impl ::std::fmt::Debug for MetaShadowFactory {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaShadowFactory @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct MetaShapedTexture(c_void);

impl ::std::fmt::Debug for MetaShapedTexture {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaShapedTexture @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct MetaSoundPlayer(c_void);

impl ::std::fmt::Debug for MetaSoundPlayer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaSoundPlayer @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct MetaStage(c_void);

impl ::std::fmt::Debug for MetaStage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaStage @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct MetaStartupNotification(c_void);

impl ::std::fmt::Debug for MetaStartupNotification {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaStartupNotification @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaStartupSequence {
    pub parent_instance: gobject::GObject,
}

impl ::std::fmt::Debug for MetaStartupSequence {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaStartupSequence @ {:p}", self))
         .field("parent_instance", &self.parent_instance)
         .finish()
    }
}

#[repr(C)]
pub struct MetaWaylandClient(c_void);

impl ::std::fmt::Debug for MetaWaylandClient {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaWaylandClient @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct MetaWindow(c_void);

impl ::std::fmt::Debug for MetaWindow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaWindow @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct MetaWindowActor {
    pub parent_instance: clutter::ClutterActor,
}

impl ::std::fmt::Debug for MetaWindowActor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaWindowActor @ {:p}", self))
         .field("parent_instance", &self.parent_instance)
         .finish()
    }
}

#[repr(C)]
pub struct MetaWindowGroup(c_void);

impl ::std::fmt::Debug for MetaWindowGroup {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaWindowGroup @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct MetaWorkspace(c_void);

impl ::std::fmt::Debug for MetaWorkspace {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaWorkspace @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct MetaWorkspaceManager(c_void);

impl ::std::fmt::Debug for MetaWorkspaceManager {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaWorkspaceManager @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct MetaX11Display(c_void);

impl ::std::fmt::Debug for MetaX11Display {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("MetaX11Display @ {:p}", self))
         .finish()
    }
}

// Interfaces
#[repr(C)]
pub struct MetaCloseDialog(c_void);

impl ::std::fmt::Debug for MetaCloseDialog {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "MetaCloseDialog @ {:p}", self)
    }
}

#[repr(C)]
pub struct MetaInhibitShortcutsDialog(c_void);

impl ::std::fmt::Debug for MetaInhibitShortcutsDialog {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "MetaInhibitShortcutsDialog @ {:p}", self)
    }
}


#[link(name = "mutter-8")]
extern "C" {

    //=========================================================================
    // MetaButtonFunction
    //=========================================================================
    pub fn meta_button_function_get_type() -> GType;

    //=========================================================================
    // MetaCloseDialogResponse
    //=========================================================================
    pub fn meta_close_dialog_response_get_type() -> GType;

    //=========================================================================
    // MetaCompEffect
    //=========================================================================
    pub fn meta_comp_effect_get_type() -> GType;

    //=========================================================================
    // MetaCursor
    //=========================================================================
    pub fn meta_cursor_get_type() -> GType;

    //=========================================================================
    // MetaDisplayCorner
    //=========================================================================
    pub fn meta_display_corner_get_type() -> GType;

    //=========================================================================
    // MetaDisplayDirection
    //=========================================================================
    pub fn meta_display_direction_get_type() -> GType;

    //=========================================================================
    // MetaEdgeType
    //=========================================================================
    pub fn meta_edge_type_get_type() -> GType;

    //=========================================================================
    // MetaExitCode
    //=========================================================================
    pub fn meta_exit_code_get_type() -> GType;

    //=========================================================================
    // MetaFrameType
    //=========================================================================
    pub fn meta_frame_type_get_type() -> GType;
    pub fn meta_frame_type_to_string(type_: MetaFrameType) -> *const c_char;

    //=========================================================================
    // MetaGrabOp
    //=========================================================================
    pub fn meta_grab_op_get_type() -> GType;

    //=========================================================================
    // MetaGravity
    //=========================================================================
    pub fn meta_gravity_get_type() -> GType;
    pub fn meta_gravity_to_string(gravity: MetaGravity) -> *const c_char;

    //=========================================================================
    // MetaInhibitShortcutsDialogResponse
    //=========================================================================
    pub fn meta_inhibit_shortcuts_dialog_response_get_type() -> GType;

    //=========================================================================
    // MetaKeyBindingAction
    //=========================================================================
    pub fn meta_key_binding_action_get_type() -> GType;

    //=========================================================================
    // MetaLaterType
    //=========================================================================
    pub fn meta_later_type_get_type() -> GType;

    //=========================================================================
    // MetaLocaleDirection
    //=========================================================================
    pub fn meta_locale_direction_get_type() -> GType;

    //=========================================================================
    // MetaMonitorSwitchConfigType
    //=========================================================================
    pub fn meta_monitor_switch_config_type_get_type() -> GType;

    //=========================================================================
    // MetaMotionDirection
    //=========================================================================
    pub fn meta_motion_direction_get_type() -> GType;

    //=========================================================================
    // MetaPadActionType
    //=========================================================================
    pub fn meta_pad_action_type_get_type() -> GType;

    //=========================================================================
    // MetaPreference
    //=========================================================================
    pub fn meta_preference_get_type() -> GType;
    pub fn meta_preference_to_string(pref: MetaPreference) -> *const c_char;

    //=========================================================================
    // MetaSelectionType
    //=========================================================================
    pub fn meta_selection_type_get_type() -> GType;

    //=========================================================================
    // MetaShadowMode
    //=========================================================================
    pub fn meta_shadow_mode_get_type() -> GType;

    //=========================================================================
    // MetaSide
    //=========================================================================
    pub fn meta_side_get_type() -> GType;

    //=========================================================================
    // MetaSizeChange
    //=========================================================================
    pub fn meta_size_change_get_type() -> GType;

    //=========================================================================
    // MetaStackLayer
    //=========================================================================
    pub fn meta_stack_layer_get_type() -> GType;

    //=========================================================================
    // MetaTabList
    //=========================================================================
    pub fn meta_tab_list_get_type() -> GType;

    //=========================================================================
    // MetaTabShowType
    //=========================================================================
    pub fn meta_tab_show_type_get_type() -> GType;

    //=========================================================================
    // MetaWindowClientType
    //=========================================================================
    pub fn meta_window_client_type_get_type() -> GType;

    //=========================================================================
    // MetaWindowMenuType
    //=========================================================================
    pub fn meta_window_menu_type_get_type() -> GType;

    //=========================================================================
    // MetaWindowType
    //=========================================================================
    pub fn meta_window_type_get_type() -> GType;

    //=========================================================================
    // MetaBarrierDirection
    //=========================================================================
    pub fn meta_barrier_direction_get_type() -> GType;

    //=========================================================================
    // MetaDebugPaintFlag
    //=========================================================================
    pub fn meta_debug_paint_flag_get_type() -> GType;

    //=========================================================================
    // MetaDebugTopic
    //=========================================================================
    pub fn meta_debug_topic_get_type() -> GType;

    //=========================================================================
    // MetaDirection
    //=========================================================================
    pub fn meta_direction_get_type() -> GType;

    //=========================================================================
    // MetaFrameFlags
    //=========================================================================
    pub fn meta_frame_flags_get_type() -> GType;

    //=========================================================================
    // MetaKeyBindingFlags
    //=========================================================================
    pub fn meta_key_binding_flags_get_type() -> GType;

    //=========================================================================
    // MetaMaximizeFlags
    //=========================================================================
    pub fn meta_maximize_flags_get_type() -> GType;

    //=========================================================================
    // MetaModalOptions
    //=========================================================================
    pub fn meta_modal_options_get_type() -> GType;

    //=========================================================================
    // MetaVirtualModifier
    //=========================================================================
    pub fn meta_virtual_modifier_get_type() -> GType;

    //=========================================================================
    // MetaBarrierEvent
    //=========================================================================
    pub fn meta_barrier_event_get_type() -> GType;

    //=========================================================================
    // MetaFrameBorders
    //=========================================================================
    pub fn meta_frame_borders_clear(self_: *mut MetaFrameBorders);

    //=========================================================================
    // MetaGroup
    //=========================================================================
    pub fn meta_group_get_size(group: *mut MetaGroup) -> c_int;
    pub fn meta_group_get_startup_id(group: *mut MetaGroup) -> *const c_char;
    pub fn meta_group_list_windows(group: *mut MetaGroup) -> *mut glib::GSList;
    pub fn meta_group_property_notify(group: *mut MetaGroup, event: *mut xlib::XEvent) -> gboolean;
    pub fn meta_group_update_layers(group: *mut MetaGroup);

    //=========================================================================
    // MetaKeyBinding
    //=========================================================================
    pub fn meta_key_binding_get_type() -> GType;
    pub fn meta_key_binding_get_mask(binding: *mut MetaKeyBinding) -> c_uint;
    pub fn meta_key_binding_get_modifiers(binding: *mut MetaKeyBinding) -> MetaVirtualModifier;
    pub fn meta_key_binding_get_name(binding: *mut MetaKeyBinding) -> *const c_char;
    pub fn meta_key_binding_is_builtin(binding: *mut MetaKeyBinding) -> gboolean;
    pub fn meta_key_binding_is_reversed(binding: *mut MetaKeyBinding) -> gboolean;

    //=========================================================================
    // MetaRectangle
    //=========================================================================
    pub fn meta_rectangle_get_type() -> GType;
    pub fn meta_rectangle_area(rect: *const MetaRectangle) -> c_int;
    pub fn meta_rectangle_contains_rect(outer_rect: *const MetaRectangle, inner_rect: *const MetaRectangle) -> gboolean;
    pub fn meta_rectangle_copy(rect: *const MetaRectangle) -> *mut MetaRectangle;
    pub fn meta_rectangle_could_fit_rect(outer_rect: *const MetaRectangle, inner_rect: *const MetaRectangle) -> gboolean;
    pub fn meta_rectangle_equal(src1: *const MetaRectangle, src2: *const MetaRectangle) -> gboolean;
    pub fn meta_rectangle_free(rect: *mut MetaRectangle);
    pub fn meta_rectangle_horiz_overlap(rect1: *const MetaRectangle, rect2: *const MetaRectangle) -> gboolean;
    pub fn meta_rectangle_intersect(src1: *const MetaRectangle, src2: *const MetaRectangle, dest: *mut MetaRectangle) -> gboolean;
    pub fn meta_rectangle_overlap(rect1: *const MetaRectangle, rect2: *const MetaRectangle) -> gboolean;
    pub fn meta_rectangle_union(rect1: *const MetaRectangle, rect2: *const MetaRectangle, dest: *mut MetaRectangle);
    pub fn meta_rectangle_vert_overlap(rect1: *const MetaRectangle, rect2: *const MetaRectangle) -> gboolean;

    //=========================================================================
    // MetaSettings
    //=========================================================================
    pub fn meta_settings_get_font_dpi(settings: *mut MetaSettings) -> c_int;
    pub fn meta_settings_get_ui_scaling_factor(settings: *mut MetaSettings) -> c_int;

    //=========================================================================
    // MetaShadow
    //=========================================================================
    pub fn meta_shadow_get_type() -> GType;
    pub fn meta_shadow_get_bounds(shadow: *mut MetaShadow, window_x: c_int, window_y: c_int, window_width: c_int, window_height: c_int, bounds: *mut cairo::cairo_rectangle_int_t);
    pub fn meta_shadow_paint(shadow: *mut MetaShadow, framebuffer: *mut cogl::CoglFramebuffer, window_x: c_int, window_y: c_int, window_width: c_int, window_height: c_int, opacity: u8, clip: *mut cairo::cairo_region_t, clip_strictly: gboolean);
    pub fn meta_shadow_ref(shadow: *mut MetaShadow) -> *mut MetaShadow;
    pub fn meta_shadow_unref(shadow: *mut MetaShadow);

    //=========================================================================
    // MetaTheme
    //=========================================================================
    pub fn meta_theme_free(theme: *mut MetaTheme);
    pub fn meta_theme_get_default() -> *mut MetaTheme;
    pub fn meta_theme_new() -> *mut MetaTheme;

    //=========================================================================
    // MetaWindowShape
    //=========================================================================
    pub fn meta_window_shape_get_type() -> GType;
    pub fn meta_window_shape_new(region: *mut cairo::cairo_region_t) -> *mut MetaWindowShape;
    pub fn meta_window_shape_equal(shape_a: *mut MetaWindowShape, shape_b: *mut MetaWindowShape) -> gboolean;
    pub fn meta_window_shape_get_borders(shape: *mut MetaWindowShape, border_top: *mut c_int, border_right: *mut c_int, border_bottom: *mut c_int, border_left: *mut c_int);
    pub fn meta_window_shape_hash(shape: *mut MetaWindowShape) -> c_uint;
    pub fn meta_window_shape_ref(shape: *mut MetaWindowShape) -> *mut MetaWindowShape;
    pub fn meta_window_shape_to_region(shape: *mut MetaWindowShape, center_width: c_int, center_height: c_int) -> *mut cairo::cairo_region_t;
    pub fn meta_window_shape_unref(shape: *mut MetaWindowShape);

    //=========================================================================
    // MetaBackend
    //=========================================================================
    pub fn meta_backend_get_type() -> GType;
    pub fn meta_backend_get_dnd(backend: *mut MetaBackend) -> *mut MetaDnd;
    pub fn meta_backend_get_remote_access_controller(backend: *mut MetaBackend) -> *mut MetaRemoteAccessController;
    pub fn meta_backend_get_settings(backend: *mut MetaBackend) -> *mut MetaSettings;
    pub fn meta_backend_get_stage(backend: *mut MetaBackend) -> *mut clutter::ClutterActor;
    pub fn meta_backend_is_rendering_hardware_accelerated(backend: *mut MetaBackend) -> gboolean;
    pub fn meta_backend_lock_layout_group(backend: *mut MetaBackend, idx: c_uint);
    pub fn meta_backend_set_keymap(backend: *mut MetaBackend, layouts: *const c_char, variants: *const c_char, options: *const c_char);
    pub fn meta_backend_set_numlock(backend: *mut MetaBackend, numlock_state: gboolean);

    //=========================================================================
    // MetaBackground
    //=========================================================================
    pub fn meta_background_get_type() -> GType;
    pub fn meta_background_new(display: *mut MetaDisplay) -> *mut MetaBackground;
    pub fn meta_background_refresh_all();
    pub fn meta_background_set_blend(self_: *mut MetaBackground, file1: *mut gio::GFile, file2: *mut gio::GFile, blend_factor: c_double, style: gdesktop_enums::GDesktopBackgroundStyle);
    pub fn meta_background_set_color(self_: *mut MetaBackground, color: *mut clutter::ClutterColor);
    pub fn meta_background_set_file(self_: *mut MetaBackground, file: *mut gio::GFile, style: gdesktop_enums::GDesktopBackgroundStyle);
    pub fn meta_background_set_gradient(self_: *mut MetaBackground, shading_direction: gdesktop_enums::GDesktopBackgroundShading, color: *mut clutter::ClutterColor, second_color: *mut clutter::ClutterColor);

    //=========================================================================
    // MetaBackgroundActor
    //=========================================================================
    pub fn meta_background_actor_get_type() -> GType;
    pub fn meta_background_actor_new(display: *mut MetaDisplay, monitor: c_int) -> *mut clutter::ClutterActor;

    //=========================================================================
    // MetaBackgroundContent
    //=========================================================================
    pub fn meta_background_content_get_type() -> GType;
    pub fn meta_background_content_new(display: *mut MetaDisplay, monitor: c_int) -> *mut clutter::ClutterContent;
    pub fn meta_background_content_set_background(self_: *mut MetaBackgroundContent, background: *mut MetaBackground);
    pub fn meta_background_content_set_gradient(self_: *mut MetaBackgroundContent, enabled: gboolean, height: c_int, tone_start: c_double);
    pub fn meta_background_content_set_rounded_clip_bounds(self_: *mut MetaBackgroundContent, bounds: *const graphene::graphene_rect_t);
    pub fn meta_background_content_set_rounded_clip_radius(self_: *mut MetaBackgroundContent, radius: c_float);
    pub fn meta_background_content_set_vignette(self_: *mut MetaBackgroundContent, enabled: gboolean, brightness: c_double, sharpness: c_double);

    //=========================================================================
    // MetaBackgroundGroup
    //=========================================================================
    pub fn meta_background_group_get_type() -> GType;
    pub fn meta_background_group_new() -> *mut clutter::ClutterActor;

    //=========================================================================
    // MetaBackgroundImage
    //=========================================================================
    pub fn meta_background_image_get_type() -> GType;
    pub fn meta_background_image_get_success(image: *mut MetaBackgroundImage) -> gboolean;
    pub fn meta_background_image_get_texture(image: *mut MetaBackgroundImage) -> *mut cogl::CoglTexture;
    pub fn meta_background_image_is_loaded(image: *mut MetaBackgroundImage) -> gboolean;

    //=========================================================================
    // MetaBackgroundImageCache
    //=========================================================================
    pub fn meta_background_image_cache_get_type() -> GType;
    pub fn meta_background_image_cache_get_default() -> *mut MetaBackgroundImageCache;
    pub fn meta_background_image_cache_load(cache: *mut MetaBackgroundImageCache, file: *mut gio::GFile) -> *mut MetaBackgroundImage;
    pub fn meta_background_image_cache_purge(cache: *mut MetaBackgroundImageCache, file: *mut gio::GFile);

    //=========================================================================
    // MetaBarrier
    //=========================================================================
    pub fn meta_barrier_get_type() -> GType;
    pub fn meta_barrier_destroy(barrier: *mut MetaBarrier);
    pub fn meta_barrier_is_active(barrier: *mut MetaBarrier) -> gboolean;
    pub fn meta_barrier_release(barrier: *mut MetaBarrier, event: *mut MetaBarrierEvent);

    //=========================================================================
    // MetaCompositor
    //=========================================================================
    pub fn meta_compositor_get_type() -> GType;
    pub fn meta_compositor_add_window(compositor: *mut MetaCompositor, window: *mut MetaWindow);
    pub fn meta_compositor_destroy(compositor: *mut MetaCompositor);
    pub fn meta_compositor_filter_keybinding(compositor: *mut MetaCompositor, binding: *mut MetaKeyBinding) -> gboolean;
    pub fn meta_compositor_flash_display(compositor: *mut MetaCompositor, display: *mut MetaDisplay);
    pub fn meta_compositor_hide_tile_preview(compositor: *mut MetaCompositor);
    pub fn meta_compositor_hide_window(compositor: *mut MetaCompositor, window: *mut MetaWindow, effect: MetaCompEffect);
    pub fn meta_compositor_manage(compositor: *mut MetaCompositor);
    pub fn meta_compositor_queue_frame_drawn(compositor: *mut MetaCompositor, window: *mut MetaWindow, no_delay_frame: gboolean);
    pub fn meta_compositor_remove_window(compositor: *mut MetaCompositor, window: *mut MetaWindow);
    pub fn meta_compositor_show_tile_preview(compositor: *mut MetaCompositor, window: *mut MetaWindow, tile_rect: *mut MetaRectangle, tile_monitor_number: c_int);
    pub fn meta_compositor_show_window(compositor: *mut MetaCompositor, window: *mut MetaWindow, effect: MetaCompEffect);
    pub fn meta_compositor_show_window_menu(compositor: *mut MetaCompositor, window: *mut MetaWindow, menu: MetaWindowMenuType, x: c_int, y: c_int);
    pub fn meta_compositor_show_window_menu_for_rect(compositor: *mut MetaCompositor, window: *mut MetaWindow, menu: MetaWindowMenuType, rect: *mut MetaRectangle);
    pub fn meta_compositor_size_change_window(compositor: *mut MetaCompositor, window: *mut MetaWindow, which_change: MetaSizeChange, old_frame_rect: *mut MetaRectangle, old_buffer_rect: *mut MetaRectangle);
    pub fn meta_compositor_switch_workspace(compositor: *mut MetaCompositor, from: *mut MetaWorkspace, to: *mut MetaWorkspace, direction: MetaMotionDirection);
    pub fn meta_compositor_sync_stack(compositor: *mut MetaCompositor, stack: *mut glib::GList);
    pub fn meta_compositor_sync_updates_frozen(compositor: *mut MetaCompositor, window: *mut MetaWindow);
    pub fn meta_compositor_sync_window_geometry(compositor: *mut MetaCompositor, window: *mut MetaWindow, did_placement: gboolean);
    pub fn meta_compositor_unmanage(compositor: *mut MetaCompositor);
    pub fn meta_compositor_window_opacity_changed(compositor: *mut MetaCompositor, window: *mut MetaWindow);
    pub fn meta_compositor_window_shape_changed(compositor: *mut MetaCompositor, window: *mut MetaWindow);

    //=========================================================================
    // MetaCursorTracker
    //=========================================================================
    pub fn meta_cursor_tracker_get_type() -> GType;
    pub fn meta_cursor_tracker_get_for_display(display: *mut MetaDisplay) -> *mut MetaCursorTracker;
    pub fn meta_cursor_tracker_get_hot(tracker: *mut MetaCursorTracker, x: *mut c_int, y: *mut c_int);
    pub fn meta_cursor_tracker_get_pointer(tracker: *mut MetaCursorTracker, coords: *mut graphene::graphene_point_t, mods: *mut clutter::ClutterModifierType);
    pub fn meta_cursor_tracker_get_pointer_visible(tracker: *mut MetaCursorTracker) -> gboolean;
    pub fn meta_cursor_tracker_get_sprite(tracker: *mut MetaCursorTracker) -> *mut cogl::CoglTexture;
    pub fn meta_cursor_tracker_set_pointer_visible(tracker: *mut MetaCursorTracker, visible: gboolean);

    //=========================================================================
    // MetaDisplay
    //=========================================================================
    pub fn meta_display_get_type() -> GType;
    pub fn meta_display_add_ignored_crossing_serial(display: *mut MetaDisplay, serial: c_ulong);
    pub fn meta_display_add_keybinding(display: *mut MetaDisplay, name: *const c_char, settings: *mut gio::GSettings, flags: MetaKeyBindingFlags, handler: MetaKeyHandlerFunc, user_data: gpointer, free_data: glib::GDestroyNotify) -> c_uint;
    pub fn meta_display_begin_grab_op(display: *mut MetaDisplay, window: *mut MetaWindow, op: MetaGrabOp, pointer_already_grabbed: gboolean, frame_action: gboolean, button: c_int, modmask: c_ulong, timestamp: u32, root_x: c_int, root_y: c_int) -> gboolean;
    pub fn meta_display_clear_mouse_mode(display: *mut MetaDisplay);
    pub fn meta_display_close(display: *mut MetaDisplay, timestamp: u32);
    pub fn meta_display_end_grab_op(display: *mut MetaDisplay, timestamp: u32);
    pub fn meta_display_focus_default_window(display: *mut MetaDisplay, timestamp: u32);
    pub fn meta_display_freeze_keyboard(display: *mut MetaDisplay, timestamp: u32);
    pub fn meta_display_get_compositor(display: *mut MetaDisplay) -> *mut MetaCompositor;
    pub fn meta_display_get_compositor_modifiers(display: *mut MetaDisplay) -> clutter::ClutterModifierType;
    pub fn meta_display_get_current_monitor(display: *mut MetaDisplay) -> c_int;
    pub fn meta_display_get_current_time(display: *mut MetaDisplay) -> u32;
    pub fn meta_display_get_current_time_roundtrip(display: *mut MetaDisplay) -> u32;
    pub fn meta_display_get_focus_window(display: *mut MetaDisplay) -> *mut MetaWindow;
    pub fn meta_display_get_grab_op(display: *mut MetaDisplay) -> MetaGrabOp;
    pub fn meta_display_get_keybinding_action(display: *mut MetaDisplay, keycode: c_uint, mask: c_ulong) -> c_uint;
    pub fn meta_display_get_last_user_time(display: *mut MetaDisplay) -> u32;
    pub fn meta_display_get_monitor_geometry(display: *mut MetaDisplay, monitor: c_int, geometry: *mut MetaRectangle);
    pub fn meta_display_get_monitor_in_fullscreen(display: *mut MetaDisplay, monitor: c_int) -> gboolean;
    pub fn meta_display_get_monitor_index_for_rect(display: *mut MetaDisplay, rect: *mut MetaRectangle) -> c_int;
    pub fn meta_display_get_monitor_neighbor_index(display: *mut MetaDisplay, which_monitor: c_int, dir: MetaDisplayDirection) -> c_int;
    pub fn meta_display_get_monitor_scale(display: *mut MetaDisplay, monitor: c_int) -> c_float;
    pub fn meta_display_get_n_monitors(display: *mut MetaDisplay) -> c_int;
    pub fn meta_display_get_pad_action_label(display: *mut MetaDisplay, pad: *mut clutter::ClutterInputDevice, action_type: MetaPadActionType, action_number: c_uint) -> *mut c_char;
    pub fn meta_display_get_primary_monitor(display: *mut MetaDisplay) -> c_int;
    pub fn meta_display_get_selection(display: *mut MetaDisplay) -> *mut MetaSelection;
    pub fn meta_display_get_size(display: *mut MetaDisplay, width: *mut c_int, height: *mut c_int);
    pub fn meta_display_get_sound_player(display: *mut MetaDisplay) -> *mut MetaSoundPlayer;
    pub fn meta_display_get_startup_notification(display: *mut MetaDisplay) -> *mut MetaStartupNotification;
    pub fn meta_display_get_tab_current(display: *mut MetaDisplay, type_: MetaTabList, workspace: *mut MetaWorkspace) -> *mut MetaWindow;
    pub fn meta_display_get_tab_list(display: *mut MetaDisplay, type_: MetaTabList, workspace: *mut MetaWorkspace) -> *mut glib::GList;
    pub fn meta_display_get_tab_next(display: *mut MetaDisplay, type_: MetaTabList, workspace: *mut MetaWorkspace, window: *mut MetaWindow, backward: gboolean) -> *mut MetaWindow;
    pub fn meta_display_get_workspace_manager(display: *mut MetaDisplay) -> *mut MetaWorkspaceManager;
    pub fn meta_display_get_x11_display(display: *mut MetaDisplay) -> *mut MetaX11Display;
    pub fn meta_display_grab_accelerator(display: *mut MetaDisplay, accelerator: *const c_char, flags: MetaKeyBindingFlags) -> c_uint;
    pub fn meta_display_is_pointer_emulating_sequence(display: *mut MetaDisplay, sequence: *mut clutter::ClutterEventSequence) -> gboolean;
    pub fn meta_display_remove_keybinding(display: *mut MetaDisplay, name: *const c_char) -> gboolean;
    pub fn meta_display_request_pad_osd(display: *mut MetaDisplay, pad: *mut clutter::ClutterInputDevice, edition_mode: gboolean);
    pub fn meta_display_set_cursor(display: *mut MetaDisplay, cursor: MetaCursor);
    pub fn meta_display_set_input_focus(display: *mut MetaDisplay, window: *mut MetaWindow, focus_frame: gboolean, timestamp: u32);
    pub fn meta_display_sort_windows_by_stacking(display: *mut MetaDisplay, windows: *mut glib::GSList) -> *mut glib::GSList;
    pub fn meta_display_supports_extended_barriers(display: *mut MetaDisplay) -> gboolean;
    pub fn meta_display_unfreeze_keyboard(display: *mut MetaDisplay, timestamp: u32);
    pub fn meta_display_ungrab_accelerator(display: *mut MetaDisplay, action_id: c_uint) -> gboolean;
    pub fn meta_display_ungrab_keyboard(display: *mut MetaDisplay, timestamp: u32);
    pub fn meta_display_unset_input_focus(display: *mut MetaDisplay, timestamp: u32);
    pub fn meta_display_xserver_time_is_before(display: *mut MetaDisplay, time1: u32, time2: u32) -> gboolean;

    //=========================================================================
    // MetaDnd
    //=========================================================================
    pub fn meta_dnd_get_type() -> GType;

    //=========================================================================
    // MetaIdleMonitor
    //=========================================================================
    pub fn meta_idle_monitor_get_type() -> GType;
    pub fn meta_idle_monitor_get_core() -> *mut MetaIdleMonitor;
    pub fn meta_idle_monitor_add_idle_watch(monitor: *mut MetaIdleMonitor, interval_msec: u64, callback: MetaIdleMonitorWatchFunc, user_data: gpointer, notify: glib::GDestroyNotify) -> c_uint;
    pub fn meta_idle_monitor_add_user_active_watch(monitor: *mut MetaIdleMonitor, callback: MetaIdleMonitorWatchFunc, user_data: gpointer, notify: glib::GDestroyNotify) -> c_uint;
    pub fn meta_idle_monitor_get_idletime(monitor: *mut MetaIdleMonitor) -> i64;
    pub fn meta_idle_monitor_remove_watch(monitor: *mut MetaIdleMonitor, id: c_uint);

    //=========================================================================
    // MetaLaunchContext
    //=========================================================================
    pub fn meta_launch_context_get_type() -> GType;
    pub fn meta_launch_context_set_timestamp(context: *mut MetaLaunchContext, timestamp: u32);
    pub fn meta_launch_context_set_workspace(context: *mut MetaLaunchContext, workspace: *mut MetaWorkspace);

    //=========================================================================
    // MetaMonitorManager
    //=========================================================================
    pub fn meta_monitor_manager_get_type() -> GType;
    pub fn meta_monitor_manager_get() -> *mut MetaMonitorManager;
    pub fn meta_monitor_manager_get_display_configuration_timeout() -> c_int;
    pub fn meta_monitor_manager_can_switch_config(manager: *mut MetaMonitorManager) -> gboolean;
    pub fn meta_monitor_manager_get_is_builtin_display_on(manager: *mut MetaMonitorManager) -> gboolean;
    pub fn meta_monitor_manager_get_monitor_for_connector(manager: *mut MetaMonitorManager, connector: *const c_char) -> c_int;
    pub fn meta_monitor_manager_get_panel_orientation_managed(manager: *mut MetaMonitorManager) -> gboolean;
    pub fn meta_monitor_manager_get_switch_config(manager: *mut MetaMonitorManager) -> MetaMonitorSwitchConfigType;
    pub fn meta_monitor_manager_switch_config(manager: *mut MetaMonitorManager, config_type: MetaMonitorSwitchConfigType);

    //=========================================================================
    // MetaPlugin
    //=========================================================================
    pub fn meta_plugin_get_type() -> GType;
    pub fn meta_plugin_manager_set_plugin_type(gtype: GType);
    pub fn meta_plugin_begin_modal(plugin: *mut MetaPlugin, options: MetaModalOptions, timestamp: u32) -> gboolean;
    pub fn meta_plugin_complete_display_change(plugin: *mut MetaPlugin, ok: gboolean);
    pub fn meta_plugin_destroy_completed(plugin: *mut MetaPlugin, actor: *mut MetaWindowActor);
    pub fn meta_plugin_end_modal(plugin: *mut MetaPlugin, timestamp: u32);
    pub fn meta_plugin_get_display(plugin: *mut MetaPlugin) -> *mut MetaDisplay;
    pub fn meta_plugin_get_info(plugin: *mut MetaPlugin) -> *const MetaPluginInfo;
    pub fn meta_plugin_map_completed(plugin: *mut MetaPlugin, actor: *mut MetaWindowActor);
    pub fn meta_plugin_minimize_completed(plugin: *mut MetaPlugin, actor: *mut MetaWindowActor);
    pub fn meta_plugin_size_change_completed(plugin: *mut MetaPlugin, actor: *mut MetaWindowActor);
    pub fn meta_plugin_switch_workspace_completed(plugin: *mut MetaPlugin);
    pub fn meta_plugin_unminimize_completed(plugin: *mut MetaPlugin, actor: *mut MetaWindowActor);

    //=========================================================================
    // MetaRemoteAccessController
    //=========================================================================
    pub fn meta_remote_access_controller_get_type() -> GType;
    pub fn meta_remote_access_controller_inhibit_remote_access(controller: *mut MetaRemoteAccessController);
    pub fn meta_remote_access_controller_uninhibit_remote_access(controller: *mut MetaRemoteAccessController);

    //=========================================================================
    // MetaRemoteAccessHandle
    //=========================================================================
    pub fn meta_remote_access_handle_get_type() -> GType;
    pub fn meta_remote_access_handle_get_disable_animations(handle: *mut MetaRemoteAccessHandle) -> gboolean;
    pub fn meta_remote_access_handle_stop(handle: *mut MetaRemoteAccessHandle);

    //=========================================================================
    // MetaSelection
    //=========================================================================
    pub fn meta_selection_get_type() -> GType;
    pub fn meta_selection_new(display: *mut MetaDisplay) -> *mut MetaSelection;
    pub fn meta_selection_get_mimetypes(selection: *mut MetaSelection, selection_type: MetaSelectionType) -> *mut glib::GList;
    pub fn meta_selection_set_owner(selection: *mut MetaSelection, selection_type: MetaSelectionType, owner: *mut MetaSelectionSource);
    pub fn meta_selection_transfer_async(selection: *mut MetaSelection, selection_type: MetaSelectionType, mimetype: *const c_char, size: ssize_t, output: *mut gio::GOutputStream, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn meta_selection_transfer_finish(selection: *mut MetaSelection, result: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> gboolean;
    pub fn meta_selection_unset_owner(selection: *mut MetaSelection, selection_type: MetaSelectionType, owner: *mut MetaSelectionSource);

    //=========================================================================
    // MetaSelectionSource
    //=========================================================================
    pub fn meta_selection_source_get_type() -> GType;
    pub fn meta_selection_source_get_mimetypes(source: *mut MetaSelectionSource) -> *mut glib::GList;
    pub fn meta_selection_source_is_active(source: *mut MetaSelectionSource) -> gboolean;
    pub fn meta_selection_source_read_async(source: *mut MetaSelectionSource, mimetype: *const c_char, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn meta_selection_source_read_finish(source: *mut MetaSelectionSource, result: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> *mut gio::GInputStream;

    //=========================================================================
    // MetaSelectionSourceMemory
    //=========================================================================
    pub fn meta_selection_source_memory_get_type() -> GType;
    pub fn meta_selection_source_memory_new(mimetype: *const c_char, content: *mut glib::GBytes) -> *mut MetaSelectionSource;

    //=========================================================================
    // MetaShadowFactory
    //=========================================================================
    pub fn meta_shadow_factory_get_type() -> GType;
    pub fn meta_shadow_factory_new() -> *mut MetaShadowFactory;
    pub fn meta_shadow_factory_get_default() -> *mut MetaShadowFactory;
    pub fn meta_shadow_factory_get_params(factory: *mut MetaShadowFactory, class_name: *const c_char, focused: gboolean, params: *mut MetaShadowParams);
    pub fn meta_shadow_factory_get_shadow(factory: *mut MetaShadowFactory, shape: *mut MetaWindowShape, width: c_int, height: c_int, class_name: *const c_char, focused: gboolean) -> *mut MetaShadow;
    pub fn meta_shadow_factory_set_params(factory: *mut MetaShadowFactory, class_name: *const c_char, focused: gboolean, params: *mut MetaShadowParams);

    //=========================================================================
    // MetaShapedTexture
    //=========================================================================
    pub fn meta_shaped_texture_get_type() -> GType;
    pub fn meta_shaped_texture_get_image(stex: *mut MetaShapedTexture, clip: *mut cairo::cairo_rectangle_int_t) -> *mut cairo::cairo_surface_t;
    pub fn meta_shaped_texture_get_texture(stex: *mut MetaShapedTexture) -> *mut cogl::CoglTexture;
    pub fn meta_shaped_texture_set_create_mipmaps(stex: *mut MetaShapedTexture, create_mipmaps: gboolean);
    pub fn meta_shaped_texture_set_mask_texture(stex: *mut MetaShapedTexture, mask_texture: *mut cogl::CoglTexture);

    //=========================================================================
    // MetaSoundPlayer
    //=========================================================================
    pub fn meta_sound_player_get_type() -> GType;
    pub fn meta_sound_player_play_from_file(player: *mut MetaSoundPlayer, file: *mut gio::GFile, description: *const c_char, cancellable: *mut gio::GCancellable);
    pub fn meta_sound_player_play_from_theme(player: *mut MetaSoundPlayer, name: *const c_char, description: *const c_char, cancellable: *mut gio::GCancellable);

    //=========================================================================
    // MetaStage
    //=========================================================================
    pub fn meta_stage_get_type() -> GType;
    pub fn meta_stage_is_focused(display: *mut MetaDisplay) -> gboolean;

    //=========================================================================
    // MetaStartupNotification
    //=========================================================================
    pub fn meta_startup_notification_get_type() -> GType;
    pub fn meta_startup_notification_create_launcher(sn: *mut MetaStartupNotification) -> *mut MetaLaunchContext;
    pub fn meta_startup_notification_get_sequences(sn: *mut MetaStartupNotification) -> *mut glib::GSList;

    //=========================================================================
    // MetaStartupSequence
    //=========================================================================
    pub fn meta_startup_sequence_get_type() -> GType;
    pub fn meta_startup_sequence_complete(sequence: *mut MetaStartupSequence);
    pub fn meta_startup_sequence_get_application_id(sequence: *mut MetaStartupSequence) -> *const c_char;
    pub fn meta_startup_sequence_get_completed(sequence: *mut MetaStartupSequence) -> gboolean;
    pub fn meta_startup_sequence_get_icon_name(sequence: *mut MetaStartupSequence) -> *const c_char;
    pub fn meta_startup_sequence_get_id(sequence: *mut MetaStartupSequence) -> *const c_char;
    pub fn meta_startup_sequence_get_name(sequence: *mut MetaStartupSequence) -> *const c_char;
    pub fn meta_startup_sequence_get_timestamp(sequence: *mut MetaStartupSequence) -> u64;
    pub fn meta_startup_sequence_get_wmclass(sequence: *mut MetaStartupSequence) -> *const c_char;
    pub fn meta_startup_sequence_get_workspace(sequence: *mut MetaStartupSequence) -> c_int;

    //=========================================================================
    // MetaWaylandClient
    //=========================================================================
    pub fn meta_wayland_client_get_type() -> GType;
    pub fn meta_wayland_client_new(launcher: *mut gio::GSubprocessLauncher, error: *mut *mut glib::GError) -> *mut MetaWaylandClient;
    pub fn meta_wayland_client_hide_from_window_list(client: *mut MetaWaylandClient, window: *mut MetaWindow);
    pub fn meta_wayland_client_owns_window(client: *mut MetaWaylandClient, window: *mut MetaWindow) -> gboolean;
    pub fn meta_wayland_client_show_in_window_list(client: *mut MetaWaylandClient, window: *mut MetaWindow);
    pub fn meta_wayland_client_spawn(client: *mut MetaWaylandClient, display: *mut MetaDisplay, error: *mut *mut glib::GError, argv0: *const c_char, ...) -> *mut gio::GSubprocess;
    pub fn meta_wayland_client_spawnv(client: *mut MetaWaylandClient, display: *mut MetaDisplay, argv: *const *const c_char, error: *mut *mut glib::GError) -> *mut gio::GSubprocess;

    //=========================================================================
    // MetaWindow
    //=========================================================================
    pub fn meta_window_get_type() -> GType;
    pub fn meta_window_activate(window: *mut MetaWindow, current_time: u32);
    pub fn meta_window_activate_with_workspace(window: *mut MetaWindow, current_time: u32, workspace: *mut MetaWorkspace);
    pub fn meta_window_allows_move(window: *mut MetaWindow) -> gboolean;
    pub fn meta_window_allows_resize(window: *mut MetaWindow) -> gboolean;
    pub fn meta_window_appears_focused(window: *mut MetaWindow) -> gboolean;
    pub fn meta_window_begin_grab_op(window: *mut MetaWindow, op: MetaGrabOp, frame_action: gboolean, timestamp: u32);
    pub fn meta_window_can_close(window: *mut MetaWindow) -> gboolean;
    pub fn meta_window_can_maximize(window: *mut MetaWindow) -> gboolean;
    pub fn meta_window_can_minimize(window: *mut MetaWindow) -> gboolean;
    pub fn meta_window_can_shade(window: *mut MetaWindow) -> gboolean;
    pub fn meta_window_change_workspace(window: *mut MetaWindow, workspace: *mut MetaWorkspace);
    pub fn meta_window_change_workspace_by_index(window: *mut MetaWindow, space_index: c_int, append: gboolean);
    pub fn meta_window_check_alive(window: *mut MetaWindow, timestamp: u32);
    pub fn meta_window_client_rect_to_frame_rect(window: *mut MetaWindow, client_rect: *mut MetaRectangle, frame_rect: *mut MetaRectangle);
    pub fn meta_window_compute_group(window: *mut MetaWindow);
    pub fn meta_window_delete(window: *mut MetaWindow, timestamp: u32);
    pub fn meta_window_find_root_ancestor(window: *mut MetaWindow) -> *mut MetaWindow;
    pub fn meta_window_focus(window: *mut MetaWindow, timestamp: u32);
    pub fn meta_window_foreach_ancestor(window: *mut MetaWindow, func: MetaWindowForeachFunc, user_data: *mut c_void);
    pub fn meta_window_foreach_transient(window: *mut MetaWindow, func: MetaWindowForeachFunc, user_data: *mut c_void);
    pub fn meta_window_frame_rect_to_client_rect(window: *mut MetaWindow, frame_rect: *mut MetaRectangle, client_rect: *mut MetaRectangle);
    pub fn meta_window_get_buffer_rect(window: *const MetaWindow, rect: *mut MetaRectangle);
    pub fn meta_window_get_client_machine(window: *mut MetaWindow) -> *const c_char;
    pub fn meta_window_get_client_type(window: *mut MetaWindow) -> MetaWindowClientType;
    pub fn meta_window_get_compositor_private(window: *mut MetaWindow) -> *mut gobject::GObject;
    pub fn meta_window_get_description(window: *mut MetaWindow) -> *const c_char;
    pub fn meta_window_get_display(window: *mut MetaWindow) -> *mut MetaDisplay;
    pub fn meta_window_get_frame(window: *mut MetaWindow) -> *mut MetaFrame;
    pub fn meta_window_get_frame_bounds(window: *mut MetaWindow) -> *mut cairo::cairo_region_t;
    pub fn meta_window_get_frame_rect(window: *const MetaWindow, rect: *mut MetaRectangle);
    pub fn meta_window_get_frame_type(window: *mut MetaWindow) -> MetaFrameType;
    pub fn meta_window_get_group(window: *mut MetaWindow) -> *mut MetaGroup;
    pub fn meta_window_get_gtk_app_menu_object_path(window: *mut MetaWindow) -> *const c_char;
    pub fn meta_window_get_gtk_application_id(window: *mut MetaWindow) -> *const c_char;
    pub fn meta_window_get_gtk_application_object_path(window: *mut MetaWindow) -> *const c_char;
    pub fn meta_window_get_gtk_menubar_object_path(window: *mut MetaWindow) -> *const c_char;
    pub fn meta_window_get_gtk_theme_variant(window: *mut MetaWindow) -> *const c_char;
    pub fn meta_window_get_gtk_unique_bus_name(window: *mut MetaWindow) -> *const c_char;
    pub fn meta_window_get_gtk_window_object_path(window: *mut MetaWindow) -> *const c_char;
    pub fn meta_window_get_icon_geometry(window: *mut MetaWindow, rect: *mut MetaRectangle) -> gboolean;
    pub fn meta_window_get_id(window: *mut MetaWindow) -> u64;
    pub fn meta_window_get_layer(window: *mut MetaWindow) -> MetaStackLayer;
    pub fn meta_window_get_maximized(window: *mut MetaWindow) -> MetaMaximizeFlags;
    pub fn meta_window_get_monitor(window: *mut MetaWindow) -> c_int;
    pub fn meta_window_get_mutter_hints(window: *mut MetaWindow) -> *const c_char;
    pub fn meta_window_get_pid(window: *mut MetaWindow) -> c_int;
    pub fn meta_window_get_role(window: *mut MetaWindow) -> *const c_char;
    pub fn meta_window_get_sandboxed_app_id(window: *mut MetaWindow) -> *const c_char;
    pub fn meta_window_get_stable_sequence(window: *mut MetaWindow) -> c_uint;
    pub fn meta_window_get_startup_id(window: *mut MetaWindow) -> *const c_char;
    pub fn meta_window_get_tile_match(window: *mut MetaWindow) -> *mut MetaWindow;
    pub fn meta_window_get_title(window: *mut MetaWindow) -> *const c_char;
    pub fn meta_window_get_transient_for(window: *mut MetaWindow) -> *mut MetaWindow;
    pub fn meta_window_get_user_time(window: *mut MetaWindow) -> u32;
    pub fn meta_window_get_window_type(window: *mut MetaWindow) -> MetaWindowType;
    pub fn meta_window_get_wm_class(window: *mut MetaWindow) -> *const c_char;
    pub fn meta_window_get_wm_class_instance(window: *mut MetaWindow) -> *const c_char;
    pub fn meta_window_get_work_area_all_monitors(window: *mut MetaWindow, area: *mut MetaRectangle);
    pub fn meta_window_get_work_area_current_monitor(window: *mut MetaWindow, area: *mut MetaRectangle);
    pub fn meta_window_get_work_area_for_monitor(window: *mut MetaWindow, which_monitor: c_int, area: *mut MetaRectangle);
    pub fn meta_window_get_workspace(window: *mut MetaWindow) -> *mut MetaWorkspace;
    pub fn meta_window_get_xwindow(window: *mut MetaWindow) -> xlib::Window;
    pub fn meta_window_group_leader_changed(window: *mut MetaWindow);
    pub fn meta_window_has_focus(window: *mut MetaWindow) -> gboolean;
    pub fn meta_window_is_above(window: *mut MetaWindow) -> gboolean;
    pub fn meta_window_is_always_on_all_workspaces(window: *mut MetaWindow) -> gboolean;
    pub fn meta_window_is_ancestor_of_transient(window: *mut MetaWindow, transient: *mut MetaWindow) -> gboolean;
    pub fn meta_window_is_attached_dialog(window: *mut MetaWindow) -> gboolean;
    pub fn meta_window_is_client_decorated(window: *mut MetaWindow) -> gboolean;
    pub fn meta_window_is_fullscreen(window: *mut MetaWindow) -> gboolean;
    pub fn meta_window_is_hidden(window: *mut MetaWindow) -> gboolean;
    pub fn meta_window_is_monitor_sized(window: *mut MetaWindow) -> gboolean;
    pub fn meta_window_is_on_all_workspaces(window: *mut MetaWindow) -> gboolean;
    pub fn meta_window_is_on_primary_monitor(window: *mut MetaWindow) -> gboolean;
    pub fn meta_window_is_override_redirect(window: *mut MetaWindow) -> gboolean;
    pub fn meta_window_is_remote(window: *mut MetaWindow) -> gboolean;
    pub fn meta_window_is_screen_sized(window: *mut MetaWindow) -> gboolean;
    pub fn meta_window_is_shaded(window: *mut MetaWindow) -> gboolean;
    pub fn meta_window_is_skip_taskbar(window: *mut MetaWindow) -> gboolean;
    pub fn meta_window_kill(window: *mut MetaWindow);
    pub fn meta_window_located_on_workspace(window: *mut MetaWindow, workspace: *mut MetaWorkspace) -> gboolean;
    pub fn meta_window_lower(window: *mut MetaWindow);
    pub fn meta_window_make_above(window: *mut MetaWindow);
    pub fn meta_window_make_fullscreen(window: *mut MetaWindow);
    pub fn meta_window_maximize(window: *mut MetaWindow, directions: MetaMaximizeFlags);
    pub fn meta_window_minimize(window: *mut MetaWindow);
    pub fn meta_window_move_frame(window: *mut MetaWindow, user_op: gboolean, root_x_nw: c_int, root_y_nw: c_int);
    pub fn meta_window_move_resize_frame(window: *mut MetaWindow, user_op: gboolean, root_x_nw: c_int, root_y_nw: c_int, w: c_int, h: c_int);
    pub fn meta_window_move_to_monitor(window: *mut MetaWindow, monitor: c_int);
    pub fn meta_window_raise(window: *mut MetaWindow);
    pub fn meta_window_set_compositor_private(window: *mut MetaWindow, priv_: *mut gobject::GObject);
    pub fn meta_window_set_demands_attention(window: *mut MetaWindow);
    pub fn meta_window_set_icon_geometry(window: *mut MetaWindow, rect: *mut MetaRectangle);
    pub fn meta_window_shade(window: *mut MetaWindow, timestamp: u32);
    pub fn meta_window_shove_titlebar_onscreen(window: *mut MetaWindow);
    pub fn meta_window_showing_on_its_workspace(window: *mut MetaWindow) -> gboolean;
    pub fn meta_window_shutdown_group(window: *mut MetaWindow);
    pub fn meta_window_stick(window: *mut MetaWindow);
    pub fn meta_window_titlebar_is_onscreen(window: *mut MetaWindow) -> gboolean;
    pub fn meta_window_unmake_above(window: *mut MetaWindow);
    pub fn meta_window_unmake_fullscreen(window: *mut MetaWindow);
    pub fn meta_window_unmaximize(window: *mut MetaWindow, directions: MetaMaximizeFlags);
    pub fn meta_window_unminimize(window: *mut MetaWindow);
    pub fn meta_window_unset_demands_attention(window: *mut MetaWindow);
    pub fn meta_window_unshade(window: *mut MetaWindow, timestamp: u32);
    pub fn meta_window_unstick(window: *mut MetaWindow);

    //=========================================================================
    // MetaWindowActor
    //=========================================================================
    pub fn meta_window_actor_get_type() -> GType;
    pub fn meta_window_actor_freeze(self_: *mut MetaWindowActor);
    pub fn meta_window_actor_get_image(self_: *mut MetaWindowActor, clip: *mut cairo::cairo_rectangle_int_t) -> *mut cairo::cairo_surface_t;
    pub fn meta_window_actor_get_meta_window(self_: *mut MetaWindowActor) -> *mut MetaWindow;
    pub fn meta_window_actor_get_texture(self_: *mut MetaWindowActor) -> *mut MetaShapedTexture;
    pub fn meta_window_actor_is_destroyed(self_: *mut MetaWindowActor) -> gboolean;
    pub fn meta_window_actor_sync_visibility(self_: *mut MetaWindowActor);
    pub fn meta_window_actor_thaw(self_: *mut MetaWindowActor);

    //=========================================================================
    // MetaWindowGroup
    //=========================================================================
    pub fn meta_window_group_get_type() -> GType;

    //=========================================================================
    // MetaWorkspace
    //=========================================================================
    pub fn meta_workspace_get_type() -> GType;
    pub fn meta_workspace_activate(workspace: *mut MetaWorkspace, timestamp: u32);
    pub fn meta_workspace_activate_with_focus(workspace: *mut MetaWorkspace, focus_this: *mut MetaWindow, timestamp: u32);
    pub fn meta_workspace_get_display(workspace: *mut MetaWorkspace) -> *mut MetaDisplay;
    pub fn meta_workspace_get_neighbor(workspace: *mut MetaWorkspace, direction: MetaMotionDirection) -> *mut MetaWorkspace;
    pub fn meta_workspace_get_work_area_all_monitors(workspace: *mut MetaWorkspace, area: *mut MetaRectangle);
    pub fn meta_workspace_get_work_area_for_monitor(workspace: *mut MetaWorkspace, which_monitor: c_int, area: *mut MetaRectangle);
    pub fn meta_workspace_index(workspace: *mut MetaWorkspace) -> c_int;
    pub fn meta_workspace_list_windows(workspace: *mut MetaWorkspace) -> *mut glib::GList;
    pub fn meta_workspace_set_builtin_struts(workspace: *mut MetaWorkspace, struts: *mut glib::GSList);

    //=========================================================================
    // MetaWorkspaceManager
    //=========================================================================
    pub fn meta_workspace_manager_get_type() -> GType;
    pub fn meta_workspace_manager_append_new_workspace(workspace_manager: *mut MetaWorkspaceManager, activate: gboolean, timestamp: u32) -> *mut MetaWorkspace;
    pub fn meta_workspace_manager_get_active_workspace(workspace_manager: *mut MetaWorkspaceManager) -> *mut MetaWorkspace;
    pub fn meta_workspace_manager_get_active_workspace_index(workspace_manager: *mut MetaWorkspaceManager) -> c_int;
    pub fn meta_workspace_manager_get_n_workspaces(workspace_manager: *mut MetaWorkspaceManager) -> c_int;
    pub fn meta_workspace_manager_get_workspace_by_index(workspace_manager: *mut MetaWorkspaceManager, index: c_int) -> *mut MetaWorkspace;
    pub fn meta_workspace_manager_get_workspaces(workspace_manager: *mut MetaWorkspaceManager) -> *mut glib::GList;
    pub fn meta_workspace_manager_override_workspace_layout(workspace_manager: *mut MetaWorkspaceManager, starting_corner: MetaDisplayCorner, vertical_layout: gboolean, n_rows: c_int, n_columns: c_int);
    pub fn meta_workspace_manager_remove_workspace(workspace_manager: *mut MetaWorkspaceManager, workspace: *mut MetaWorkspace, timestamp: u32);
    pub fn meta_workspace_manager_reorder_workspace(workspace_manager: *mut MetaWorkspaceManager, workspace: *mut MetaWorkspace, new_index: c_int);

    //=========================================================================
    // MetaX11Display
    //=========================================================================
    pub fn meta_x11_display_get_type() -> GType;
    pub fn meta_x11_display_clear_stage_input_region(x11_display: *mut MetaX11Display);
    pub fn meta_x11_display_get_damage_event_base(x11_display: *mut MetaX11Display) -> c_int;
    pub fn meta_x11_display_get_screen_number(x11_display: *mut MetaX11Display) -> c_int;
    pub fn meta_x11_display_get_shape_event_base(x11_display: *mut MetaX11Display) -> c_int;
    pub fn meta_x11_display_get_xdisplay(x11_display: *mut MetaX11Display) -> *mut xlib::Display;
    pub fn meta_x11_display_get_xinput_opcode(x11_display: *mut MetaX11Display) -> c_int;
    pub fn meta_x11_display_get_xroot(x11_display: *mut MetaX11Display) -> xlib::Window;
    pub fn meta_x11_display_has_shape(x11_display: *mut MetaX11Display) -> gboolean;
    pub fn meta_x11_display_lookup_group(x11_display: *mut MetaX11Display, group_leader: xlib::Window) -> *mut MetaGroup;
    pub fn meta_x11_display_set_cm_selection(x11_display: *mut MetaX11Display);
    pub fn meta_x11_display_xwindow_is_a_no_focus_window(x11_display: *mut MetaX11Display, xwindow: xlib::Window) -> gboolean;

    //=========================================================================
    // MetaCloseDialog
    //=========================================================================
    pub fn meta_close_dialog_get_type() -> GType;
    pub fn meta_close_dialog_focus(dialog: *mut MetaCloseDialog);
    pub fn meta_close_dialog_hide(dialog: *mut MetaCloseDialog);
    pub fn meta_close_dialog_is_visible(dialog: *mut MetaCloseDialog) -> gboolean;
    pub fn meta_close_dialog_response(dialog: *mut MetaCloseDialog, response: MetaCloseDialogResponse);
    pub fn meta_close_dialog_show(dialog: *mut MetaCloseDialog);

    //=========================================================================
    // MetaInhibitShortcutsDialog
    //=========================================================================
    pub fn meta_inhibit_shortcuts_dialog_get_type() -> GType;
    pub fn meta_inhibit_shortcuts_dialog_hide(dialog: *mut MetaInhibitShortcutsDialog);
    pub fn meta_inhibit_shortcuts_dialog_response(dialog: *mut MetaInhibitShortcutsDialog, response: MetaInhibitShortcutsDialogResponse);
    pub fn meta_inhibit_shortcuts_dialog_show(dialog: *mut MetaInhibitShortcutsDialog);

    //=========================================================================
    // Other functions
    //=========================================================================
    pub fn meta_add_clutter_debug_flags(debug_flags: clutter::ClutterDebugFlag, draw_flags: clutter::ClutterDrawDebugFlag, pick_flags: clutter::ClutterPickDebugFlag);
    pub fn meta_add_debug_paint_flag(flag: MetaDebugPaintFlag);
    pub fn meta_add_verbose_topic(topic: MetaDebugTopic);
    pub fn meta_bug(format: *const c_char, ...);
    pub fn meta_clutter_init();
    pub fn meta_disable_unredirect_for_display(display: *mut MetaDisplay);
    pub fn meta_enable_unredirect_for_display(display: *mut MetaDisplay);
    pub fn meta_exit(code: MetaExitCode);
    pub fn meta_external_binding_name_for_action(keybinding_action: c_uint) -> *mut c_char;
    pub fn meta_fatal(format: *const c_char, ...);
    pub fn meta_finalize();
    pub fn meta_focus_stage_window(display: *mut MetaDisplay, timestamp: u32);
    pub fn meta_g_utf8_strndup(src: *const c_char, n: size_t) -> *mut c_char;
    pub fn meta_get_backend() -> *mut MetaBackend;
    pub fn meta_get_debug_paint_flags() -> MetaDebugPaintFlag;
    pub fn meta_get_exit_code() -> MetaExitCode;
    pub fn meta_get_feedback_group_for_display(display: *mut MetaDisplay) -> *mut clutter::ClutterActor;
    pub fn meta_get_locale_direction() -> MetaLocaleDirection;
    pub fn meta_get_option_context() -> *mut glib::GOptionContext;
    pub fn meta_get_replace_current_wm() -> gboolean;
    pub fn meta_get_stage_for_display(display: *mut MetaDisplay) -> *mut clutter::ClutterActor;
    pub fn meta_get_top_window_group_for_display(display: *mut MetaDisplay) -> *mut clutter::ClutterActor;
    pub fn meta_get_window_actors(display: *mut MetaDisplay) -> *mut glib::GList;
    pub fn meta_get_window_group_for_display(display: *mut MetaDisplay) -> *mut clutter::ClutterActor;
    pub fn meta_init();
    pub fn meta_is_restart() -> gboolean;
    pub fn meta_is_syncing() -> gboolean;
    pub fn meta_is_topic_enabled(topic: MetaDebugTopic) -> gboolean;
    pub fn meta_is_verbose() -> gboolean;
    pub fn meta_is_wayland_compositor() -> gboolean;
    pub fn meta_keybindings_set_custom_handler(name: *const c_char, handler: MetaKeyHandlerFunc, user_data: gpointer, free_data: glib::GDestroyNotify) -> gboolean;
    pub fn meta_later_add(when: MetaLaterType, func: glib::GSourceFunc, data: gpointer, notify: glib::GDestroyNotify) -> c_uint;
    pub fn meta_later_remove(later_id: c_uint);
    pub fn meta_pop_no_msg_prefix();
    pub fn meta_prefs_add_listener(func: MetaPrefsChangedFunc, user_data: gpointer);
    pub fn meta_prefs_bell_is_audible() -> gboolean;
    pub fn meta_prefs_change_workspace_name(i: c_int, name: *const c_char);
    pub fn meta_prefs_get_action_double_click_titlebar() -> gdesktop_enums::GDesktopTitlebarAction;
    pub fn meta_prefs_get_action_middle_click_titlebar() -> gdesktop_enums::GDesktopTitlebarAction;
    pub fn meta_prefs_get_action_right_click_titlebar() -> gdesktop_enums::GDesktopTitlebarAction;
    pub fn meta_prefs_get_attach_modal_dialogs() -> gboolean;
    pub fn meta_prefs_get_auto_maximize() -> gboolean;
    pub fn meta_prefs_get_auto_raise() -> gboolean;
    pub fn meta_prefs_get_auto_raise_delay() -> c_int;
    pub fn meta_prefs_get_button_layout(button_layout: *mut MetaButtonLayout);
    pub fn meta_prefs_get_center_new_windows() -> gboolean;
    pub fn meta_prefs_get_check_alive_timeout() -> c_uint;
    pub fn meta_prefs_get_compositing_manager() -> gboolean;
    pub fn meta_prefs_get_cursor_size() -> c_int;
    pub fn meta_prefs_get_cursor_theme() -> *const c_char;
    pub fn meta_prefs_get_disable_workarounds() -> gboolean;
    pub fn meta_prefs_get_drag_threshold() -> c_int;
    pub fn meta_prefs_get_draggable_border_width() -> c_int;
    pub fn meta_prefs_get_dynamic_workspaces() -> gboolean;
    pub fn meta_prefs_get_edge_tiling() -> gboolean;
    pub fn meta_prefs_get_focus_change_on_pointer_rest() -> gboolean;
    pub fn meta_prefs_get_focus_mode() -> gdesktop_enums::GDesktopFocusMode;
    pub fn meta_prefs_get_focus_new_windows() -> gdesktop_enums::GDesktopFocusNewWindows;
    pub fn meta_prefs_get_force_fullscreen() -> gboolean;
    pub fn meta_prefs_get_gnome_accessibility() -> gboolean;
    pub fn meta_prefs_get_gnome_animations() -> gboolean;
    pub fn meta_prefs_get_keybinding_action(name: *const c_char) -> MetaKeyBindingAction;
    pub fn meta_prefs_get_mouse_button_menu() -> c_int;
    pub fn meta_prefs_get_mouse_button_mods() -> MetaVirtualModifier;
    pub fn meta_prefs_get_mouse_button_resize() -> c_int;
    pub fn meta_prefs_get_num_workspaces() -> c_int;
    pub fn meta_prefs_get_raise_on_click() -> gboolean;
    pub fn meta_prefs_get_show_fallback_app_menu() -> gboolean;
    pub fn meta_prefs_get_titlebar_font() -> *const pango::PangoFontDescription;
    pub fn meta_prefs_get_visual_bell() -> gboolean;
    pub fn meta_prefs_get_visual_bell_type() -> gdesktop_enums::GDesktopVisualBellType;
    pub fn meta_prefs_get_workspace_name(i: c_int) -> *const c_char;
    pub fn meta_prefs_get_workspaces_only_on_primary() -> gboolean;
    pub fn meta_prefs_init();
    pub fn meta_prefs_remove_listener(func: MetaPrefsChangedFunc, user_data: gpointer);
    pub fn meta_prefs_set_force_fullscreen(whether: gboolean);
    pub fn meta_prefs_set_num_workspaces(n_workspaces: c_int);
    pub fn meta_prefs_set_show_fallback_app_menu(whether: gboolean);
    pub fn meta_push_no_msg_prefix();
    pub fn meta_quit(code: MetaExitCode);
    pub fn meta_rect(x: c_int, y: c_int, width: c_int, height: c_int) -> MetaRectangle;
    pub fn meta_register_with_session();
    pub fn meta_remove_clutter_debug_flags(debug_flags: clutter::ClutterDebugFlag, draw_flags: clutter::ClutterDrawDebugFlag, pick_flags: clutter::ClutterPickDebugFlag);
    pub fn meta_remove_debug_paint_flag(flag: MetaDebugPaintFlag);
    pub fn meta_remove_verbose_topic(topic: MetaDebugTopic);
    pub fn meta_restart(message: *const c_char);
    pub fn meta_run() -> c_int;
    pub fn meta_run_main_loop();
    pub fn meta_set_gnome_wm_keybindings(wm_keybindings: *const c_char);
    pub fn meta_set_wm_name(wm_name: *const c_char);
    pub fn meta_show_dialog(type_: *const c_char, message: *const c_char, timeout: *const c_char, display: *const c_char, ok_text: *const c_char, cancel_text: *const c_char, icon_name: *const c_char, transient_for: c_int, columns: *mut glib::GSList, entries: *mut glib::GSList) -> glib::GPid;
    pub fn meta_start();
    pub fn meta_test_init();
    pub fn meta_topic_real(topic: MetaDebugTopic, format: *const c_char, ...);
    pub fn meta_unsigned_long_equal(v1: gconstpointer, v2: gconstpointer) -> c_int;
    pub fn meta_unsigned_long_hash(v: gconstpointer) -> c_uint;
    pub fn meta_verbose_real(format: *const c_char, ...);
    pub fn meta_warning(format: *const c_char, ...);
    pub fn meta_x11_error_trap_pop(x11_display: *mut MetaX11Display);
    pub fn meta_x11_error_trap_pop_with_return(x11_display: *mut MetaX11Display) -> c_int;
    pub fn meta_x11_error_trap_push(x11_display: *mut MetaX11Display);
    pub fn meta_x11_init_gdk_display(error: *mut *mut glib::GError) -> gboolean;

}
