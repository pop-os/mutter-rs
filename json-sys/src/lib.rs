// Generated by gir (https://github.com/gtk-rs/gir @ 5bbf6cb)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 8e47c67)
// from mutter-gir-files
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]
#![allow(clippy::approx_constant, clippy::type_complexity, clippy::unreadable_literal, clippy::upper_case_acronyms)]
#![cfg_attr(feature = "dox", feature(doc_cfg))]

use gio_sys as gio;
use glib_sys as glib;
use gobject_sys as gobject;

#[allow(unused_imports)]
use libc::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong,
    c_void, size_t, ssize_t, intptr_t, uintptr_t, time_t, FILE};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

// Enums
pub type JsonNodeType = c_int;
pub const JSON_NODE_OBJECT: JsonNodeType = 0;
pub const JSON_NODE_ARRAY: JsonNodeType = 1;
pub const JSON_NODE_VALUE: JsonNodeType = 2;
pub const JSON_NODE_NULL: JsonNodeType = 3;

pub type JsonParserError = c_int;
pub const JSON_PARSER_ERROR_PARSE: JsonParserError = 0;
pub const JSON_PARSER_ERROR_TRAILING_COMMA: JsonParserError = 1;
pub const JSON_PARSER_ERROR_MISSING_COMMA: JsonParserError = 2;
pub const JSON_PARSER_ERROR_MISSING_COLON: JsonParserError = 3;
pub const JSON_PARSER_ERROR_INVALID_BAREWORD: JsonParserError = 4;
pub const JSON_PARSER_ERROR_EMPTY_MEMBER_NAME: JsonParserError = 5;
pub const JSON_PARSER_ERROR_INVALID_DATA: JsonParserError = 6;
pub const JSON_PARSER_ERROR_UNKNOWN: JsonParserError = 7;

pub type JsonPathError = c_int;
pub const JSON_PATH_ERROR_INVALID_QUERY: JsonPathError = 0;

pub type JsonReaderError = c_int;
pub const JSON_READER_ERROR_NO_ARRAY: JsonReaderError = 0;
pub const JSON_READER_ERROR_INVALID_INDEX: JsonReaderError = 1;
pub const JSON_READER_ERROR_NO_OBJECT: JsonReaderError = 2;
pub const JSON_READER_ERROR_INVALID_MEMBER: JsonReaderError = 3;
pub const JSON_READER_ERROR_INVALID_NODE: JsonReaderError = 4;
pub const JSON_READER_ERROR_NO_VALUE: JsonReaderError = 5;
pub const JSON_READER_ERROR_INVALID_TYPE: JsonReaderError = 6;

// Constants
pub const JSON_MAJOR_VERSION: c_int = 1;
pub const JSON_MICRO_VERSION: c_int = 2;
pub const JSON_MINOR_VERSION: c_int = 6;
pub const JSON_VERSION_S: *const c_char = b"1.6.2\0" as *const u8 as *const c_char;

// Callbacks
pub type JsonArrayForeach = Option<unsafe extern "C" fn(*mut JsonArray, c_uint, *mut JsonNode, gpointer)>;
pub type JsonBoxedDeserializeFunc = Option<unsafe extern "C" fn(*mut JsonNode) -> gpointer>;
pub type JsonBoxedSerializeFunc = Option<unsafe extern "C" fn(gconstpointer) -> *mut JsonNode>;
pub type JsonObjectForeach = Option<unsafe extern "C" fn(*mut JsonObject, *const c_char, *mut JsonNode, gpointer)>;

// Records
#[repr(C)]
pub struct JsonArray(c_void);

impl ::std::fmt::Debug for JsonArray {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("JsonArray @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct JsonBuilderClass {
    pub parent_class: gobject::GObjectClass,
    pub _json_reserved1: Option<unsafe extern "C" fn()>,
    pub _json_reserved2: Option<unsafe extern "C" fn()>,
}

impl ::std::fmt::Debug for JsonBuilderClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("JsonBuilderClass @ {:p}", self))
         .field("_json_reserved1", &self._json_reserved1)
         .field("_json_reserved2", &self._json_reserved2)
         .finish()
    }
}

#[repr(C)]
pub struct _JsonBuilderPrivate(c_void);

pub type JsonBuilderPrivate = *mut _JsonBuilderPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct JsonGeneratorClass {
    pub parent_class: gobject::GObjectClass,
    pub _json_reserved1: Option<unsafe extern "C" fn()>,
    pub _json_reserved2: Option<unsafe extern "C" fn()>,
    pub _json_reserved3: Option<unsafe extern "C" fn()>,
    pub _json_reserved4: Option<unsafe extern "C" fn()>,
}

impl ::std::fmt::Debug for JsonGeneratorClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("JsonGeneratorClass @ {:p}", self))
         .field("_json_reserved1", &self._json_reserved1)
         .field("_json_reserved2", &self._json_reserved2)
         .field("_json_reserved3", &self._json_reserved3)
         .field("_json_reserved4", &self._json_reserved4)
         .finish()
    }
}

#[repr(C)]
pub struct _JsonGeneratorPrivate(c_void);

pub type JsonGeneratorPrivate = *mut _JsonGeneratorPrivate;

#[repr(C)]
pub struct JsonNode(c_void);

impl ::std::fmt::Debug for JsonNode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("JsonNode @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct JsonObject(c_void);

impl ::std::fmt::Debug for JsonObject {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("JsonObject @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct JsonObjectIter {
    pub priv_pointer: [gpointer; 6],
    pub priv_int: [c_int; 2],
    pub priv_boolean: [gboolean; 1],
}

impl ::std::fmt::Debug for JsonObjectIter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("JsonObjectIter @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct JsonParserClass {
    pub parent_class: gobject::GObjectClass,
    pub parse_start: Option<unsafe extern "C" fn(*mut JsonParser)>,
    pub object_start: Option<unsafe extern "C" fn(*mut JsonParser)>,
    pub object_member: Option<unsafe extern "C" fn(*mut JsonParser, *mut JsonObject, *const c_char)>,
    pub object_end: Option<unsafe extern "C" fn(*mut JsonParser, *mut JsonObject)>,
    pub array_start: Option<unsafe extern "C" fn(*mut JsonParser)>,
    pub array_element: Option<unsafe extern "C" fn(*mut JsonParser, *mut JsonArray, c_int)>,
    pub array_end: Option<unsafe extern "C" fn(*mut JsonParser, *mut JsonArray)>,
    pub parse_end: Option<unsafe extern "C" fn(*mut JsonParser)>,
    pub error: Option<unsafe extern "C" fn(*mut JsonParser, *const glib::GError)>,
    pub _json_reserved1: Option<unsafe extern "C" fn()>,
    pub _json_reserved2: Option<unsafe extern "C" fn()>,
    pub _json_reserved3: Option<unsafe extern "C" fn()>,
    pub _json_reserved4: Option<unsafe extern "C" fn()>,
    pub _json_reserved5: Option<unsafe extern "C" fn()>,
    pub _json_reserved6: Option<unsafe extern "C" fn()>,
    pub _json_reserved7: Option<unsafe extern "C" fn()>,
    pub _json_reserved8: Option<unsafe extern "C" fn()>,
}

impl ::std::fmt::Debug for JsonParserClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("JsonParserClass @ {:p}", self))
         .field("parse_start", &self.parse_start)
         .field("object_start", &self.object_start)
         .field("object_member", &self.object_member)
         .field("object_end", &self.object_end)
         .field("array_start", &self.array_start)
         .field("array_element", &self.array_element)
         .field("array_end", &self.array_end)
         .field("parse_end", &self.parse_end)
         .field("error", &self.error)
         .field("_json_reserved1", &self._json_reserved1)
         .field("_json_reserved2", &self._json_reserved2)
         .field("_json_reserved3", &self._json_reserved3)
         .field("_json_reserved4", &self._json_reserved4)
         .field("_json_reserved5", &self._json_reserved5)
         .field("_json_reserved6", &self._json_reserved6)
         .field("_json_reserved7", &self._json_reserved7)
         .field("_json_reserved8", &self._json_reserved8)
         .finish()
    }
}

#[repr(C)]
pub struct _JsonParserPrivate(c_void);

pub type JsonParserPrivate = *mut _JsonParserPrivate;

#[repr(C)]
pub struct _JsonPathClass(c_void);

pub type JsonPathClass = *mut _JsonPathClass;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct JsonReaderClass {
    pub parent_class: gobject::GObjectClass,
    pub _json_padding0: Option<unsafe extern "C" fn()>,
    pub _json_padding1: Option<unsafe extern "C" fn()>,
    pub _json_padding2: Option<unsafe extern "C" fn()>,
    pub _json_padding3: Option<unsafe extern "C" fn()>,
    pub _json_padding4: Option<unsafe extern "C" fn()>,
}

impl ::std::fmt::Debug for JsonReaderClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("JsonReaderClass @ {:p}", self))
         .field("_json_padding0", &self._json_padding0)
         .field("_json_padding1", &self._json_padding1)
         .field("_json_padding2", &self._json_padding2)
         .field("_json_padding3", &self._json_padding3)
         .field("_json_padding4", &self._json_padding4)
         .finish()
    }
}

#[repr(C)]
pub struct _JsonReaderPrivate(c_void);

pub type JsonReaderPrivate = *mut _JsonReaderPrivate;

#[repr(C)]
#[derive(Copy, Clone)]
pub struct JsonSerializableIface {
    pub g_iface: gobject::GTypeInterface,
    pub serialize_property: Option<unsafe extern "C" fn(*mut JsonSerializable, *const c_char, *const gobject::GValue, *mut gobject::GParamSpec) -> *mut JsonNode>,
    pub deserialize_property: Option<unsafe extern "C" fn(*mut JsonSerializable, *const c_char, *mut gobject::GValue, *mut gobject::GParamSpec, *mut JsonNode) -> gboolean>,
    pub find_property: Option<unsafe extern "C" fn(*mut JsonSerializable, *const c_char) -> *mut gobject::GParamSpec>,
    pub list_properties: Option<unsafe extern "C" fn(*mut JsonSerializable, *mut c_uint) -> *mut *mut gobject::GParamSpec>,
    pub set_property: Option<unsafe extern "C" fn(*mut JsonSerializable, *mut gobject::GParamSpec, *mut gobject::GValue)>,
    pub get_property: Option<unsafe extern "C" fn(*mut JsonSerializable, *mut gobject::GParamSpec, *mut gobject::GValue)>,
}

impl ::std::fmt::Debug for JsonSerializableIface {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("JsonSerializableIface @ {:p}", self))
         .field("serialize_property", &self.serialize_property)
         .field("deserialize_property", &self.deserialize_property)
         .field("find_property", &self.find_property)
         .field("list_properties", &self.list_properties)
         .field("set_property", &self.set_property)
         .field("get_property", &self.get_property)
         .finish()
    }
}

// Classes
#[repr(C)]
#[derive(Copy, Clone)]
pub struct JsonBuilder {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut JsonBuilderPrivate,
}

impl ::std::fmt::Debug for JsonBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("JsonBuilder @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct JsonGenerator {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut JsonGeneratorPrivate,
}

impl ::std::fmt::Debug for JsonGenerator {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("JsonGenerator @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct JsonParser {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut JsonParserPrivate,
}

impl ::std::fmt::Debug for JsonParser {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("JsonParser @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
pub struct JsonPath(c_void);

impl ::std::fmt::Debug for JsonPath {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("JsonPath @ {:p}", self))
         .finish()
    }
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct JsonReader {
    pub parent_instance: gobject::GObject,
    pub priv_: *mut JsonReaderPrivate,
}

impl ::std::fmt::Debug for JsonReader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("JsonReader @ {:p}", self))
         .finish()
    }
}

// Interfaces
#[repr(C)]
pub struct JsonSerializable(c_void);

impl ::std::fmt::Debug for JsonSerializable {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "JsonSerializable @ {:p}", self)
    }
}


#[link(name = "json-glib-1.0")]
extern "C" {

    //=========================================================================
    // JsonNodeType
    //=========================================================================
    pub fn json_node_type_get_type() -> GType;

    //=========================================================================
    // JsonParserError
    //=========================================================================
    pub fn json_parser_error_get_type() -> GType;
    pub fn json_parser_error_quark() -> glib::GQuark;

    //=========================================================================
    // JsonPathError
    //=========================================================================
    #[cfg(any(feature = "v0_14", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_14")))]
    pub fn json_path_error_get_type() -> GType;
    #[cfg(any(feature = "v0_14", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_14")))]
    pub fn json_path_error_quark() -> glib::GQuark;

    //=========================================================================
    // JsonReaderError
    //=========================================================================
    #[cfg(any(feature = "v0_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_12")))]
    pub fn json_reader_error_get_type() -> GType;
    #[cfg(any(feature = "v0_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_12")))]
    pub fn json_reader_error_quark() -> glib::GQuark;

    //=========================================================================
    // JsonArray
    //=========================================================================
    pub fn json_array_get_type() -> GType;
    pub fn json_array_new() -> *mut JsonArray;
    pub fn json_array_sized_new(n_elements: c_uint) -> *mut JsonArray;
    #[cfg(any(feature = "v0_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_8")))]
    pub fn json_array_add_array_element(array: *mut JsonArray, value: *mut JsonArray);
    #[cfg(any(feature = "v0_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_8")))]
    pub fn json_array_add_boolean_element(array: *mut JsonArray, value: gboolean);
    #[cfg(any(feature = "v0_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_8")))]
    pub fn json_array_add_double_element(array: *mut JsonArray, value: c_double);
    pub fn json_array_add_element(array: *mut JsonArray, node: *mut JsonNode);
    #[cfg(any(feature = "v0_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_8")))]
    pub fn json_array_add_int_element(array: *mut JsonArray, value: i64);
    #[cfg(any(feature = "v0_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_8")))]
    pub fn json_array_add_null_element(array: *mut JsonArray);
    #[cfg(any(feature = "v0_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_8")))]
    pub fn json_array_add_object_element(array: *mut JsonArray, value: *mut JsonObject);
    #[cfg(any(feature = "v0_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_8")))]
    pub fn json_array_add_string_element(array: *mut JsonArray, value: *const c_char);
    #[cfg(any(feature = "v0_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_6")))]
    pub fn json_array_dup_element(array: *mut JsonArray, index_: c_uint) -> *mut JsonNode;
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn json_array_equal(a: gconstpointer, b: gconstpointer) -> gboolean;
    #[cfg(any(feature = "v0_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_8")))]
    pub fn json_array_foreach_element(array: *mut JsonArray, func: JsonArrayForeach, data: gpointer);
    #[cfg(any(feature = "v0_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_8")))]
    pub fn json_array_get_array_element(array: *mut JsonArray, index_: c_uint) -> *mut JsonArray;
    #[cfg(any(feature = "v0_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_8")))]
    pub fn json_array_get_boolean_element(array: *mut JsonArray, index_: c_uint) -> gboolean;
    #[cfg(any(feature = "v0_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_8")))]
    pub fn json_array_get_double_element(array: *mut JsonArray, index_: c_uint) -> c_double;
    pub fn json_array_get_element(array: *mut JsonArray, index_: c_uint) -> *mut JsonNode;
    pub fn json_array_get_elements(array: *mut JsonArray) -> *mut glib::GList;
    #[cfg(any(feature = "v0_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_8")))]
    pub fn json_array_get_int_element(array: *mut JsonArray, index_: c_uint) -> i64;
    pub fn json_array_get_length(array: *mut JsonArray) -> c_uint;
    #[cfg(any(feature = "v0_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_8")))]
    pub fn json_array_get_null_element(array: *mut JsonArray, index_: c_uint) -> gboolean;
    #[cfg(any(feature = "v0_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_8")))]
    pub fn json_array_get_object_element(array: *mut JsonArray, index_: c_uint) -> *mut JsonObject;
    #[cfg(any(feature = "v0_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_8")))]
    pub fn json_array_get_string_element(array: *mut JsonArray, index_: c_uint) -> *const c_char;
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn json_array_hash(key: gconstpointer) -> c_uint;
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn json_array_is_immutable(array: *mut JsonArray) -> gboolean;
    pub fn json_array_ref(array: *mut JsonArray) -> *mut JsonArray;
    pub fn json_array_remove_element(array: *mut JsonArray, index_: c_uint);
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn json_array_seal(array: *mut JsonArray);
    pub fn json_array_unref(array: *mut JsonArray);

    //=========================================================================
    // JsonNode
    //=========================================================================
    pub fn json_node_get_type() -> GType;
    #[cfg(any(feature = "v0_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_16")))]
    pub fn json_node_alloc() -> *mut JsonNode;
    pub fn json_node_new(type_: JsonNodeType) -> *mut JsonNode;
    pub fn json_node_copy(node: *mut JsonNode) -> *mut JsonNode;
    pub fn json_node_dup_array(node: *mut JsonNode) -> *mut JsonArray;
    pub fn json_node_dup_object(node: *mut JsonNode) -> *mut JsonObject;
    pub fn json_node_dup_string(node: *mut JsonNode) -> *mut c_char;
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn json_node_equal(a: gconstpointer, b: gconstpointer) -> gboolean;
    pub fn json_node_free(node: *mut JsonNode);
    pub fn json_node_get_array(node: *mut JsonNode) -> *mut JsonArray;
    pub fn json_node_get_boolean(node: *mut JsonNode) -> gboolean;
    pub fn json_node_get_double(node: *mut JsonNode) -> c_double;
    pub fn json_node_get_int(node: *mut JsonNode) -> i64;
    #[cfg(any(feature = "v0_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_8")))]
    pub fn json_node_get_node_type(node: *mut JsonNode) -> JsonNodeType;
    pub fn json_node_get_object(node: *mut JsonNode) -> *mut JsonObject;
    pub fn json_node_get_parent(node: *mut JsonNode) -> *mut JsonNode;
    pub fn json_node_get_string(node: *mut JsonNode) -> *const c_char;
    pub fn json_node_get_value(node: *mut JsonNode, value: *mut gobject::GValue);
    #[cfg(any(feature = "v0_4", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_4")))]
    pub fn json_node_get_value_type(node: *mut JsonNode) -> GType;
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn json_node_hash(key: gconstpointer) -> c_uint;
    #[cfg(any(feature = "v0_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_16")))]
    pub fn json_node_init(node: *mut JsonNode, type_: JsonNodeType) -> *mut JsonNode;
    #[cfg(any(feature = "v0_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_16")))]
    pub fn json_node_init_array(node: *mut JsonNode, array: *mut JsonArray) -> *mut JsonNode;
    #[cfg(any(feature = "v0_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_16")))]
    pub fn json_node_init_boolean(node: *mut JsonNode, value: gboolean) -> *mut JsonNode;
    #[cfg(any(feature = "v0_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_16")))]
    pub fn json_node_init_double(node: *mut JsonNode, value: c_double) -> *mut JsonNode;
    #[cfg(any(feature = "v0_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_16")))]
    pub fn json_node_init_int(node: *mut JsonNode, value: i64) -> *mut JsonNode;
    #[cfg(any(feature = "v0_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_16")))]
    pub fn json_node_init_null(node: *mut JsonNode) -> *mut JsonNode;
    #[cfg(any(feature = "v0_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_16")))]
    pub fn json_node_init_object(node: *mut JsonNode, object: *mut JsonObject) -> *mut JsonNode;
    #[cfg(any(feature = "v0_16", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_16")))]
    pub fn json_node_init_string(node: *mut JsonNode, value: *const c_char) -> *mut JsonNode;
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn json_node_is_immutable(node: *mut JsonNode) -> gboolean;
    #[cfg(any(feature = "v0_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_8")))]
    pub fn json_node_is_null(node: *mut JsonNode) -> gboolean;
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn json_node_ref(node: *mut JsonNode) -> *mut JsonNode;
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn json_node_seal(node: *mut JsonNode);
    pub fn json_node_set_array(node: *mut JsonNode, array: *mut JsonArray);
    pub fn json_node_set_boolean(node: *mut JsonNode, value: gboolean);
    pub fn json_node_set_double(node: *mut JsonNode, value: c_double);
    pub fn json_node_set_int(node: *mut JsonNode, value: i64);
    pub fn json_node_set_object(node: *mut JsonNode, object: *mut JsonObject);
    #[cfg(any(feature = "v0_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_8")))]
    pub fn json_node_set_parent(node: *mut JsonNode, parent: *mut JsonNode);
    pub fn json_node_set_string(node: *mut JsonNode, value: *const c_char);
    pub fn json_node_set_value(node: *mut JsonNode, value: *const gobject::GValue);
    pub fn json_node_take_array(node: *mut JsonNode, array: *mut JsonArray);
    pub fn json_node_take_object(node: *mut JsonNode, object: *mut JsonObject);
    pub fn json_node_type_name(node: *mut JsonNode) -> *const c_char;
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn json_node_unref(node: *mut JsonNode);

    //=========================================================================
    // JsonObject
    //=========================================================================
    pub fn json_object_get_type() -> GType;
    pub fn json_object_new() -> *mut JsonObject;
    pub fn json_object_add_member(object: *mut JsonObject, member_name: *const c_char, node: *mut JsonNode);
    #[cfg(any(feature = "v0_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_6")))]
    pub fn json_object_dup_member(object: *mut JsonObject, member_name: *const c_char) -> *mut JsonNode;
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn json_object_equal(a: gconstpointer, b: gconstpointer) -> gboolean;
    #[cfg(any(feature = "v0_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_8")))]
    pub fn json_object_foreach_member(object: *mut JsonObject, func: JsonObjectForeach, data: gpointer);
    #[cfg(any(feature = "v0_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_8")))]
    pub fn json_object_get_array_member(object: *mut JsonObject, member_name: *const c_char) -> *mut JsonArray;
    #[cfg(any(feature = "v0_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_8")))]
    pub fn json_object_get_boolean_member(object: *mut JsonObject, member_name: *const c_char) -> gboolean;
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    pub fn json_object_get_boolean_member_with_default(object: *mut JsonObject, member_name: *const c_char, default_value: gboolean) -> gboolean;
    #[cfg(any(feature = "v0_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_8")))]
    pub fn json_object_get_double_member(object: *mut JsonObject, member_name: *const c_char) -> c_double;
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    pub fn json_object_get_double_member_with_default(object: *mut JsonObject, member_name: *const c_char, default_value: c_double) -> c_double;
    #[cfg(any(feature = "v0_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_8")))]
    pub fn json_object_get_int_member(object: *mut JsonObject, member_name: *const c_char) -> i64;
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    pub fn json_object_get_int_member_with_default(object: *mut JsonObject, member_name: *const c_char, default_value: i64) -> i64;
    pub fn json_object_get_member(object: *mut JsonObject, member_name: *const c_char) -> *mut JsonNode;
    pub fn json_object_get_members(object: *mut JsonObject) -> *mut glib::GList;
    #[cfg(any(feature = "v0_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_8")))]
    pub fn json_object_get_null_member(object: *mut JsonObject, member_name: *const c_char) -> gboolean;
    #[cfg(any(feature = "v0_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_8")))]
    pub fn json_object_get_object_member(object: *mut JsonObject, member_name: *const c_char) -> *mut JsonObject;
    pub fn json_object_get_size(object: *mut JsonObject) -> c_uint;
    #[cfg(any(feature = "v0_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_8")))]
    pub fn json_object_get_string_member(object: *mut JsonObject, member_name: *const c_char) -> *const c_char;
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    pub fn json_object_get_string_member_with_default(object: *mut JsonObject, member_name: *const c_char, default_value: *const c_char) -> *const c_char;
    pub fn json_object_get_values(object: *mut JsonObject) -> *mut glib::GList;
    pub fn json_object_has_member(object: *mut JsonObject, member_name: *const c_char) -> gboolean;
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn json_object_hash(key: gconstpointer) -> c_uint;
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn json_object_is_immutable(object: *mut JsonObject) -> gboolean;
    pub fn json_object_ref(object: *mut JsonObject) -> *mut JsonObject;
    pub fn json_object_remove_member(object: *mut JsonObject, member_name: *const c_char);
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn json_object_seal(object: *mut JsonObject);
    #[cfg(any(feature = "v0_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_8")))]
    pub fn json_object_set_array_member(object: *mut JsonObject, member_name: *const c_char, value: *mut JsonArray);
    #[cfg(any(feature = "v0_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_8")))]
    pub fn json_object_set_boolean_member(object: *mut JsonObject, member_name: *const c_char, value: gboolean);
    #[cfg(any(feature = "v0_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_8")))]
    pub fn json_object_set_double_member(object: *mut JsonObject, member_name: *const c_char, value: c_double);
    #[cfg(any(feature = "v0_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_8")))]
    pub fn json_object_set_int_member(object: *mut JsonObject, member_name: *const c_char, value: i64);
    #[cfg(any(feature = "v0_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_8")))]
    pub fn json_object_set_member(object: *mut JsonObject, member_name: *const c_char, node: *mut JsonNode);
    #[cfg(any(feature = "v0_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_8")))]
    pub fn json_object_set_null_member(object: *mut JsonObject, member_name: *const c_char);
    #[cfg(any(feature = "v0_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_8")))]
    pub fn json_object_set_object_member(object: *mut JsonObject, member_name: *const c_char, value: *mut JsonObject);
    #[cfg(any(feature = "v0_8", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_8")))]
    pub fn json_object_set_string_member(object: *mut JsonObject, member_name: *const c_char, value: *const c_char);
    pub fn json_object_unref(object: *mut JsonObject);

    //=========================================================================
    // JsonObjectIter
    //=========================================================================
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn json_object_iter_init(iter: *mut JsonObjectIter, object: *mut JsonObject);
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    pub fn json_object_iter_init_ordered(iter: *mut JsonObjectIter, object: *mut JsonObject);
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn json_object_iter_next(iter: *mut JsonObjectIter, member_name: *mut *const c_char, member_node: *mut *mut JsonNode) -> gboolean;
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    pub fn json_object_iter_next_ordered(iter: *mut JsonObjectIter, member_name: *mut *const c_char, member_node: *mut *mut JsonNode) -> gboolean;

    //=========================================================================
    // JsonBuilder
    //=========================================================================
    #[cfg(any(feature = "v0_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_12")))]
    pub fn json_builder_get_type() -> GType;
    #[cfg(any(feature = "v0_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_12")))]
    pub fn json_builder_new() -> *mut JsonBuilder;
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn json_builder_new_immutable() -> *mut JsonBuilder;
    #[cfg(any(feature = "v0_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_12")))]
    pub fn json_builder_add_boolean_value(builder: *mut JsonBuilder, value: gboolean) -> *mut JsonBuilder;
    #[cfg(any(feature = "v0_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_12")))]
    pub fn json_builder_add_double_value(builder: *mut JsonBuilder, value: c_double) -> *mut JsonBuilder;
    #[cfg(any(feature = "v0_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_12")))]
    pub fn json_builder_add_int_value(builder: *mut JsonBuilder, value: i64) -> *mut JsonBuilder;
    #[cfg(any(feature = "v0_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_12")))]
    pub fn json_builder_add_null_value(builder: *mut JsonBuilder) -> *mut JsonBuilder;
    #[cfg(any(feature = "v0_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_12")))]
    pub fn json_builder_add_string_value(builder: *mut JsonBuilder, value: *const c_char) -> *mut JsonBuilder;
    #[cfg(any(feature = "v0_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_12")))]
    pub fn json_builder_add_value(builder: *mut JsonBuilder, node: *mut JsonNode) -> *mut JsonBuilder;
    #[cfg(any(feature = "v0_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_12")))]
    pub fn json_builder_begin_array(builder: *mut JsonBuilder) -> *mut JsonBuilder;
    #[cfg(any(feature = "v0_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_12")))]
    pub fn json_builder_begin_object(builder: *mut JsonBuilder) -> *mut JsonBuilder;
    #[cfg(any(feature = "v0_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_12")))]
    pub fn json_builder_end_array(builder: *mut JsonBuilder) -> *mut JsonBuilder;
    #[cfg(any(feature = "v0_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_12")))]
    pub fn json_builder_end_object(builder: *mut JsonBuilder) -> *mut JsonBuilder;
    #[cfg(any(feature = "v0_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_12")))]
    pub fn json_builder_get_root(builder: *mut JsonBuilder) -> *mut JsonNode;
    #[cfg(any(feature = "v0_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_12")))]
    pub fn json_builder_reset(builder: *mut JsonBuilder);
    #[cfg(any(feature = "v0_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_12")))]
    pub fn json_builder_set_member_name(builder: *mut JsonBuilder, member_name: *const c_char) -> *mut JsonBuilder;

    //=========================================================================
    // JsonGenerator
    //=========================================================================
    pub fn json_generator_get_type() -> GType;
    pub fn json_generator_new() -> *mut JsonGenerator;
    #[cfg(any(feature = "v0_14", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_14")))]
    pub fn json_generator_get_indent(generator: *mut JsonGenerator) -> c_uint;
    #[cfg(any(feature = "v0_14", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_14")))]
    pub fn json_generator_get_indent_char(generator: *mut JsonGenerator) -> u32;
    #[cfg(any(feature = "v0_14", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_14")))]
    pub fn json_generator_get_pretty(generator: *mut JsonGenerator) -> gboolean;
    #[cfg(any(feature = "v0_14", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_14")))]
    pub fn json_generator_get_root(generator: *mut JsonGenerator) -> *mut JsonNode;
    #[cfg(any(feature = "v0_14", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_14")))]
    pub fn json_generator_set_indent(generator: *mut JsonGenerator, indent_level: c_uint);
    #[cfg(any(feature = "v0_14", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_14")))]
    pub fn json_generator_set_indent_char(generator: *mut JsonGenerator, indent_char: u32);
    #[cfg(any(feature = "v0_14", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_14")))]
    pub fn json_generator_set_pretty(generator: *mut JsonGenerator, is_pretty: gboolean);
    pub fn json_generator_set_root(generator: *mut JsonGenerator, node: *mut JsonNode);
    pub fn json_generator_to_data(generator: *mut JsonGenerator, length: *mut size_t) -> *mut c_char;
    pub fn json_generator_to_file(generator: *mut JsonGenerator, filename: *const c_char, error: *mut *mut glib::GError) -> gboolean;
    #[cfg(any(feature = "v1_4", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_4")))]
    pub fn json_generator_to_gstring(generator: *mut JsonGenerator, string: *mut glib::GString) -> *mut glib::GString;
    #[cfg(any(feature = "v0_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_12")))]
    pub fn json_generator_to_stream(generator: *mut JsonGenerator, stream: *mut gio::GOutputStream, cancellable: *mut gio::GCancellable, error: *mut *mut glib::GError) -> gboolean;

    //=========================================================================
    // JsonParser
    //=========================================================================
    pub fn json_parser_get_type() -> GType;
    pub fn json_parser_new() -> *mut JsonParser;
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn json_parser_new_immutable() -> *mut JsonParser;
    pub fn json_parser_get_current_line(parser: *mut JsonParser) -> c_uint;
    pub fn json_parser_get_current_pos(parser: *mut JsonParser) -> c_uint;
    pub fn json_parser_get_root(parser: *mut JsonParser) -> *mut JsonNode;
    #[cfg(any(feature = "v0_4", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_4")))]
    pub fn json_parser_has_assignment(parser: *mut JsonParser, variable_name: *mut *mut c_char) -> gboolean;
    pub fn json_parser_load_from_data(parser: *mut JsonParser, data: *const c_char, length: ssize_t, error: *mut *mut glib::GError) -> gboolean;
    pub fn json_parser_load_from_file(parser: *mut JsonParser, filename: *const c_char, error: *mut *mut glib::GError) -> gboolean;
    #[cfg(any(feature = "v1_6", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_6")))]
    pub fn json_parser_load_from_mapped_file(parser: *mut JsonParser, filename: *const c_char, error: *mut *mut glib::GError) -> gboolean;
    #[cfg(any(feature = "v0_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_12")))]
    pub fn json_parser_load_from_stream(parser: *mut JsonParser, stream: *mut gio::GInputStream, cancellable: *mut gio::GCancellable, error: *mut *mut glib::GError) -> gboolean;
    #[cfg(any(feature = "v0_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_12")))]
    pub fn json_parser_load_from_stream_async(parser: *mut JsonParser, stream: *mut gio::GInputStream, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    #[cfg(any(feature = "v0_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_12")))]
    pub fn json_parser_load_from_stream_finish(parser: *mut JsonParser, result: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> gboolean;
    #[cfg(any(feature = "v1_4", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_4")))]
    pub fn json_parser_steal_root(parser: *mut JsonParser) -> *mut JsonNode;

    //=========================================================================
    // JsonPath
    //=========================================================================
    #[cfg(any(feature = "v0_14", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_14")))]
    pub fn json_path_get_type() -> GType;
    #[cfg(any(feature = "v0_14", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_14")))]
    pub fn json_path_new() -> *mut JsonPath;
    #[cfg(any(feature = "v0_14", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_14")))]
    pub fn json_path_query(expression: *const c_char, root: *mut JsonNode, error: *mut *mut glib::GError) -> *mut JsonNode;
    #[cfg(any(feature = "v0_14", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_14")))]
    pub fn json_path_compile(path: *mut JsonPath, expression: *const c_char, error: *mut *mut glib::GError) -> gboolean;
    #[cfg(any(feature = "v0_14", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_14")))]
    pub fn json_path_match(path: *mut JsonPath, root: *mut JsonNode) -> *mut JsonNode;

    //=========================================================================
    // JsonReader
    //=========================================================================
    #[cfg(any(feature = "v0_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_12")))]
    pub fn json_reader_get_type() -> GType;
    #[cfg(any(feature = "v0_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_12")))]
    pub fn json_reader_new(node: *mut JsonNode) -> *mut JsonReader;
    #[cfg(any(feature = "v0_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_12")))]
    pub fn json_reader_count_elements(reader: *mut JsonReader) -> c_int;
    #[cfg(any(feature = "v0_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_12")))]
    pub fn json_reader_count_members(reader: *mut JsonReader) -> c_int;
    #[cfg(any(feature = "v0_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_12")))]
    pub fn json_reader_end_element(reader: *mut JsonReader);
    #[cfg(any(feature = "v0_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_12")))]
    pub fn json_reader_end_member(reader: *mut JsonReader);
    #[cfg(any(feature = "v0_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_12")))]
    pub fn json_reader_get_boolean_value(reader: *mut JsonReader) -> gboolean;
    #[cfg(any(feature = "v0_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_12")))]
    pub fn json_reader_get_double_value(reader: *mut JsonReader) -> c_double;
    #[cfg(any(feature = "v0_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_12")))]
    pub fn json_reader_get_error(reader: *mut JsonReader) -> *const glib::GError;
    #[cfg(any(feature = "v0_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_12")))]
    pub fn json_reader_get_int_value(reader: *mut JsonReader) -> i64;
    #[cfg(any(feature = "v0_14", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_14")))]
    pub fn json_reader_get_member_name(reader: *mut JsonReader) -> *const c_char;
    #[cfg(any(feature = "v0_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_12")))]
    pub fn json_reader_get_null_value(reader: *mut JsonReader) -> gboolean;
    #[cfg(any(feature = "v0_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_12")))]
    pub fn json_reader_get_string_value(reader: *mut JsonReader) -> *const c_char;
    #[cfg(any(feature = "v0_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_12")))]
    pub fn json_reader_get_value(reader: *mut JsonReader) -> *mut JsonNode;
    #[cfg(any(feature = "v0_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_12")))]
    pub fn json_reader_is_array(reader: *mut JsonReader) -> gboolean;
    #[cfg(any(feature = "v0_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_12")))]
    pub fn json_reader_is_object(reader: *mut JsonReader) -> gboolean;
    #[cfg(any(feature = "v0_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_12")))]
    pub fn json_reader_is_value(reader: *mut JsonReader) -> gboolean;
    #[cfg(any(feature = "v0_14", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_14")))]
    pub fn json_reader_list_members(reader: *mut JsonReader) -> *mut *mut c_char;
    #[cfg(any(feature = "v0_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_12")))]
    pub fn json_reader_read_element(reader: *mut JsonReader, index_: c_uint) -> gboolean;
    #[cfg(any(feature = "v0_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_12")))]
    pub fn json_reader_read_member(reader: *mut JsonReader, member_name: *const c_char) -> gboolean;
    #[cfg(any(feature = "v0_12", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_12")))]
    pub fn json_reader_set_root(reader: *mut JsonReader, root: *mut JsonNode);

    //=========================================================================
    // JsonSerializable
    //=========================================================================
    pub fn json_serializable_get_type() -> GType;
    #[cfg(any(feature = "v0_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_10")))]
    pub fn json_serializable_default_deserialize_property(serializable: *mut JsonSerializable, property_name: *const c_char, value: *mut gobject::GValue, pspec: *mut gobject::GParamSpec, property_node: *mut JsonNode) -> gboolean;
    #[cfg(any(feature = "v0_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_10")))]
    pub fn json_serializable_default_serialize_property(serializable: *mut JsonSerializable, property_name: *const c_char, value: *const gobject::GValue, pspec: *mut gobject::GParamSpec) -> *mut JsonNode;
    pub fn json_serializable_deserialize_property(serializable: *mut JsonSerializable, property_name: *const c_char, value: *mut gobject::GValue, pspec: *mut gobject::GParamSpec, property_node: *mut JsonNode) -> gboolean;
    #[cfg(any(feature = "v0_14", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_14")))]
    pub fn json_serializable_find_property(serializable: *mut JsonSerializable, name: *const c_char) -> *mut gobject::GParamSpec;
    #[cfg(any(feature = "v0_14", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_14")))]
    pub fn json_serializable_get_property(serializable: *mut JsonSerializable, pspec: *mut gobject::GParamSpec, value: *mut gobject::GValue);
    #[cfg(any(feature = "v0_14", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_14")))]
    pub fn json_serializable_list_properties(serializable: *mut JsonSerializable, n_pspecs: *mut c_uint) -> *mut *mut gobject::GParamSpec;
    pub fn json_serializable_serialize_property(serializable: *mut JsonSerializable, property_name: *const c_char, value: *const gobject::GValue, pspec: *mut gobject::GParamSpec) -> *mut JsonNode;
    #[cfg(any(feature = "v0_14", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_14")))]
    pub fn json_serializable_set_property(serializable: *mut JsonSerializable, pspec: *mut gobject::GParamSpec, value: *const gobject::GValue);

    //=========================================================================
    // Other functions
    //=========================================================================
    #[cfg(any(feature = "v0_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_10")))]
    pub fn json_boxed_can_deserialize(gboxed_type: GType, node_type: JsonNodeType) -> gboolean;
    #[cfg(any(feature = "v0_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_10")))]
    pub fn json_boxed_can_serialize(gboxed_type: GType, node_type: *mut JsonNodeType) -> gboolean;
    #[cfg(any(feature = "v0_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_10")))]
    pub fn json_boxed_deserialize(gboxed_type: GType, node: *mut JsonNode) -> gpointer;
    #[cfg(any(feature = "v0_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_10")))]
    pub fn json_boxed_register_deserialize_func(gboxed_type: GType, node_type: JsonNodeType, deserialize_func: JsonBoxedDeserializeFunc);
    #[cfg(any(feature = "v0_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_10")))]
    pub fn json_boxed_register_serialize_func(gboxed_type: GType, node_type: JsonNodeType, serialize_func: JsonBoxedSerializeFunc);
    #[cfg(any(feature = "v0_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_10")))]
    pub fn json_boxed_serialize(gboxed_type: GType, boxed: gconstpointer) -> *mut JsonNode;
    #[cfg(any(feature = "v0_4", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_4")))]
    pub fn json_construct_gobject(gtype: GType, data: *const c_char, length: size_t, error: *mut *mut glib::GError) -> *mut gobject::GObject;
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn json_from_string(str: *const c_char, error: *mut *mut glib::GError) -> *mut JsonNode;
    #[cfg(any(feature = "v0_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_10")))]
    pub fn json_gobject_deserialize(gtype: GType, node: *mut JsonNode) -> *mut gobject::GObject;
    #[cfg(any(feature = "v0_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_10")))]
    pub fn json_gobject_from_data(gtype: GType, data: *const c_char, length: ssize_t, error: *mut *mut glib::GError) -> *mut gobject::GObject;
    #[cfg(any(feature = "v0_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_10")))]
    pub fn json_gobject_serialize(gobject: *mut gobject::GObject) -> *mut JsonNode;
    #[cfg(any(feature = "v0_10", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_10")))]
    pub fn json_gobject_to_data(gobject: *mut gobject::GObject, length: *mut size_t) -> *mut c_char;
    #[cfg(any(feature = "v0_14", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_14")))]
    pub fn json_gvariant_deserialize(json_node: *mut JsonNode, signature: *const c_char, error: *mut *mut glib::GError) -> *mut glib::GVariant;
    #[cfg(any(feature = "v0_14", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_14")))]
    pub fn json_gvariant_deserialize_data(json: *const c_char, length: ssize_t, signature: *const c_char, error: *mut *mut glib::GError) -> *mut glib::GVariant;
    #[cfg(any(feature = "v0_14", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_14")))]
    pub fn json_gvariant_serialize(variant: *mut glib::GVariant) -> *mut JsonNode;
    #[cfg(any(feature = "v0_14", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v0_14")))]
    pub fn json_gvariant_serialize_data(variant: *mut glib::GVariant, length: *mut size_t) -> *mut c_char;
    pub fn json_serialize_gobject(gobject: *mut gobject::GObject, length: *mut size_t) -> *mut c_char;
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn json_string_compare(a: gconstpointer, b: gconstpointer) -> c_int;
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn json_string_equal(a: gconstpointer, b: gconstpointer) -> gboolean;
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn json_string_hash(key: gconstpointer) -> c_uint;
    #[cfg(any(feature = "v1_2", feature = "dox"))]
    #[cfg_attr(feature = "dox", doc(cfg(feature = "v1_2")))]
    pub fn json_to_string(node: *mut JsonNode, pretty: gboolean) -> *mut c_char;

}
