// Generated by gir (https://github.com/gtk-rs/gir @ 45cd7bc)
// from gir-files (https://github.com/gtk-rs/gir-files.git @ 8e47c67)
// from mutter-gir-files
// DO NOT EDIT

use glib::translate::*;
use std::fmt;

#[derive(Debug, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[derive(Clone, Copy)]
#[non_exhaustive]
#[doc(alias = "GDesktopBackgroundStyle")]
pub enum BackgroundStyle {
    #[doc(alias = "G_DESKTOP_BACKGROUND_STYLE_NONE")]
    None,
    #[doc(alias = "G_DESKTOP_BACKGROUND_STYLE_WALLPAPER")]
    Wallpaper,
    #[doc(alias = "G_DESKTOP_BACKGROUND_STYLE_CENTERED")]
    Centered,
    #[doc(alias = "G_DESKTOP_BACKGROUND_STYLE_SCALED")]
    Scaled,
    #[doc(alias = "G_DESKTOP_BACKGROUND_STYLE_STRETCHED")]
    Stretched,
    #[doc(alias = "G_DESKTOP_BACKGROUND_STYLE_ZOOM")]
    Zoom,
    #[doc(alias = "G_DESKTOP_BACKGROUND_STYLE_SPANNED")]
    Spanned,
#[doc(hidden)]
    __Unknown(i32),
}

impl fmt::Display for BackgroundStyle {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "BackgroundStyle::{}", match *self {
            Self::None => "None",
            Self::Wallpaper => "Wallpaper",
            Self::Centered => "Centered",
            Self::Scaled => "Scaled",
            Self::Stretched => "Stretched",
            Self::Zoom => "Zoom",
            Self::Spanned => "Spanned",
            _ => "Unknown",
        })
    }
}

#[doc(hidden)]
impl IntoGlib for BackgroundStyle {
    type GlibType = ffi::GDesktopBackgroundStyle;

    fn into_glib(self) -> ffi::GDesktopBackgroundStyle {
        match self {
            Self::None => ffi::G_DESKTOP_BACKGROUND_STYLE_NONE,
            Self::Wallpaper => ffi::G_DESKTOP_BACKGROUND_STYLE_WALLPAPER,
            Self::Centered => ffi::G_DESKTOP_BACKGROUND_STYLE_CENTERED,
            Self::Scaled => ffi::G_DESKTOP_BACKGROUND_STYLE_SCALED,
            Self::Stretched => ffi::G_DESKTOP_BACKGROUND_STYLE_STRETCHED,
            Self::Zoom => ffi::G_DESKTOP_BACKGROUND_STYLE_ZOOM,
            Self::Spanned => ffi::G_DESKTOP_BACKGROUND_STYLE_SPANNED,
            Self::__Unknown(value) => value,
}
    }
}

#[doc(hidden)]
impl FromGlib<ffi::GDesktopBackgroundStyle> for BackgroundStyle {
    unsafe fn from_glib(value: ffi::GDesktopBackgroundStyle) -> Self {
        match value {
            ffi::G_DESKTOP_BACKGROUND_STYLE_NONE => Self::None,
            ffi::G_DESKTOP_BACKGROUND_STYLE_WALLPAPER => Self::Wallpaper,
            ffi::G_DESKTOP_BACKGROUND_STYLE_CENTERED => Self::Centered,
            ffi::G_DESKTOP_BACKGROUND_STYLE_SCALED => Self::Scaled,
            ffi::G_DESKTOP_BACKGROUND_STYLE_STRETCHED => Self::Stretched,
            ffi::G_DESKTOP_BACKGROUND_STYLE_ZOOM => Self::Zoom,
            ffi::G_DESKTOP_BACKGROUND_STYLE_SPANNED => Self::Spanned,
            value => Self::__Unknown(value),
}
    }
}

